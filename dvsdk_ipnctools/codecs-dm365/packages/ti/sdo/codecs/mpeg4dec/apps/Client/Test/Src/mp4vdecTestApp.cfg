/*
 *  Copyright 2008 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */


/*
 * Load common XDC config settings
 */

 var GTINFRA = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
      GTINFRA.runtimeEnv = GTINFRA.NONE;
     
      var GT = xdc.useModule("ti.sdo.utils.trace.GT");
      GT.MALLOCFXN = "myMalloc";
      GT.PRINTFXN = "printfCaller";


//environment['xdc.cfg.check.fatal'] = 'false';
var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');

var Program = xdc.useModule('xdc.cfg.Program');
    Program.heap = 0x800000;
    Program.stack = 0x2800;
    Program.sectMap[".text"] = "DDR2";
    Program.sectMap[".stack"] = "DDR2";
    Program.sectMap[".far"] = "DDR2";
    Program.sectMap[".switch"] = "DDR2" 
    Program.sectMap[".tables"] = "DDR2";
    Program.sectMap[".data"] = "DDR2";
    Program.sectMap[".bss"] = "DDR2";
    Program.sectMap[".sysmem"] = "DDR2";
    Program.sectMap[".cinit"] = "DDR2";
    Program.sectMap[".const"] = "DDR2";
    Program.sectMap[".cio"] = "DDR2" 
    Program.sectMap[".input_buffer"] = "DDR2";
    Program.sectMap[".display_buffer"] = "DDR2";
    Program.sectMap[".ref_buffer"] = "DDR2";
    Program.sectMap[".outBuffer"] = "DDR2";
    Program.sectMap[".ext_mem"] = "DDR2";
    Program.sectMap[".sstack"] = "DDR2";
    Program.sectMap[".fstack"] = "DDR2";
    Program.sectMap[".mmutable"] = "DRAM1";
/*
    Program.sectMap[".vectors"] = "VECS";
    Program.sectMap[".handler"] = "IRAM0";
    Program.sectMap[".intvecs"] = "VECS";
*/ 

/*
 * Configure the RMAN to be used 
 */ 
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = false;
RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
RMAN.persistentFreeFxn = "__ALG_freeMemory" ;

RMAN.tableSize = 10;
RMAN.semCreateFxn = "Sem_create";
RMAN.semDeleteFxn = "Sem_delete";
RMAN.semPendFxn = "Sem_pend";
RMAN.semPostFxn = "Sem_post";

/* When EDMA3 resources are required, configure the fc.edma3 Meta-config module
 */
var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');

var chipType = "DM365";

if ((chipType == "DM365") || (chipType == "PC")) {
    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');
    var EX = xdc.useModule("ti.sdo.fc.rman.examples.EXAMPLE");
    EX.debug = false;
    var DEBUGM = xdc.useModule('ti.sdo.fc.utils.SMGRMP'); /* For debug only */
    DEBUGM.debug = false;
    DEBUGM = xdc.useModule('ti.sdo.fc.utils.SHM'); /* For debug only */
    DEBUGM.debug = false;
    var VICPSYNC = xdc.useModule('ti.sdo.fc.vicpsync.VICPSYNC');
VICPSYNC.debug = false;    
var MEMUTILS = xdc.useModule('ti.sdo.fc.memutils.MEMUTILS');
var vicp = xdc.useModule('ti.sdo.linuxutils.vicp.VICP');
vicp.debug = false;	
}
else {
    var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP');
}
var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');


EDMA3.globalInit = true;
EDMA3.maxQdmaChannels = [10,10,10,10];

 RMAN.trace = false;
 EDMA3CHAN.trace = false;
 EDMA3.trace = false;
 
 var LSP = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');
 LSP.debug = false;

xdc.loadPackage("ti.sdo.fc.utils.api");    

/* This package provides mock implementation of Locks and Semaphores */ 

RMAN.debug = false;
VICP.debug = false;
 EDMA3.debug = false;
 EDMA3CHAN.debug = false;

//VICP.trace = false;
/*
 *  @(#) ti.sdo.fc.rman.examples.vicp; 1, 0, 0,66; 7-6-2008 13:34:42; /db/atree/library/trees/fc-f17x/src/
 */

