; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	I:\library\trees\winceutils\winceutils-b01x\src\ti\sdo\winceutils\cmem\drivers\cmemk.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|gdwPageSize|, 0x4

	 COMMON	|CMKDevice|, 0x8

	 COMMON	|p_objs|, 0x1c00


  00000			 AREA	 |.bss|, NOINIT
|real_block_virtp| % 0x8
|real_block_start| % 0x8
|block_virtp| %	0x8
|block_virtoff| % 0x8
|block_virtend| % 0x8
|block_start| %	0x8
|block_end| %	0x8
|block_avail_size| % 0x8
|total_num_buffers| % 0x8
|mem_alloc_type| % 0x8
|reference_count| % 0x4
|numBlocks| %	0x4
|phys_start| %	0x4
|phys_end| %	0x4
|npools| %	0x8
|pools|	%	0x200
|phys_start_1| % 0x4
|phys_end_1| %	0x4
|pools_1| %	0x200
|allowOverlap| % 0x4
|useHeapIfPoolUnavailable| % 0x4
|cmem_mutex| %	0x4
|heap_size| %	0x8
|heap_virtp| %	0x8
|heap_head| %	0x10

  00000			 AREA	 |.data|, DATA
|version| DCD	0x2200000
|heap_pool| DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|HeapMem_alloc|

  00000			 AREA	 |.pdata|, PDATA
|$T41130| DCD	|$LN18@HeapMem_al|
	DCD	0x40009604
; Function compile flags: /Odtp
; File i:\library\trees\winceutils\winceutils-b01x\src\ti\sdo\winceutils\cmem\drivers\cmemk.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HeapMem_alloc| PROC

; 305  : {

  00000		 |$LN18@HeapMem_al|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M41127|

; 306  :     HeapMem_Header *prevHeader, *newHeader, *curHeader;
; 307  :     char *allocAddr;
; 308  :     size_t curSize, adjSize;
; 309  :     size_t remainSize; /* free memory after allocated memory      */
; 310  :     size_t adjAlign, offset;
; 311  : //    long key;
; 312  : 
; 313  : #if 0
; 314  :     /* Assert that requested align is a power of 2 */
; 315  :     Assert_isTrue(((reqAlign & (reqAlign - 1)) == 0), HeapMem_A_align);
; 316  : 
; 317  :     /* Assert that requested block size is non-zero */
; 318  :     Assert_isTrue((reqSize != 0), HeapMem_A_zeroBlock);
; 319  : #endif
; 320  : 
; 321  :     adjSize = reqSize;

  00010	e59d3034	 ldr         r3, [sp, #0x34]
  00014	e58d3020	 str         r3, [sp, #0x20]

; 322  : 
; 323  :     /* Make size requested a multiple of HEAP_ALIGN */
; 324  :     if ((offset = (adjSize & (HEAP_ALIGN - 1))) != 0) {

  00018	e59f3234	 ldr         r3, [pc, #0x234]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e2432001	 sub         r2, r3, #1
  00024	e59d3020	 ldr         r3, [sp, #0x20]
  00028	e0033002	 and         r3, r3, r2
  0002c	e58d3010	 str         r3, [sp, #0x10]
  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e3530000	 cmp         r3, #0
  00038	0a000006	 beq         |$LN13@HeapMem_al|

; 325  :         adjSize = adjSize + (HEAP_ALIGN - offset);

  0003c	e59f3210	 ldr         r3, [pc, #0x210]
  00040	e5932000	 ldr         r2, [r3]
  00044	e59d3010	 ldr         r3, [sp, #0x10]
  00048	e0422003	 sub         r2, r2, r3
  0004c	e59d3020	 ldr         r3, [sp, #0x20]
  00050	e0833002	 add         r3, r3, r2
  00054	e58d3020	 str         r3, [sp, #0x20]
  00058		 |$LN13@HeapMem_al|

; 326  :     }
; 327  : 
; 328  :     /*
; 329  :      *  Make sure the alignment is at least as large as HEAP_ALIGN.
; 330  :      *  Note: adjAlign must be a power of 2 (by function constraint) and
; 331  :      *  HEAP_ALIGN is also a power of 2,
; 332  :      */
; 333  :     adjAlign = reqAlign;

  00058	e59d3038	 ldr         r3, [sp, #0x38]
  0005c	e58d3000	 str         r3, [sp]

; 334  :     if (adjAlign & (HEAP_ALIGN - 1)) {

  00060	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00064	e5933000	 ldr         r3, [r3]
  00068	e2432001	 sub         r2, r3, #1
  0006c	e59d3000	 ldr         r3, [sp]
  00070	e1130002	 tst         r3, r2
  00074	0a000002	 beq         |$LN12@HeapMem_al|

; 335  :         /* adjAlign is less than HEAP_ALIGN */
; 336  :         adjAlign = HEAP_ALIGN;

  00078	e59f31d4	 ldr         r3, [pc, #0x1D4]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e58d3000	 str         r3, [sp]
  00084		 |$LN12@HeapMem_al|

; 337  :     }
; 338  : 
; 339  :     /*
; 340  :      *  NOTE: We don't need a "gate" here since this function is called
; 341  :      *  after acquiring a mutex.
; 342  :      */
; 343  : 
; 344  :     /*
; 345  :      *  The block will be allocated from curHeader. Maintain a pointer to
; 346  :      *  prevHeader so prevHeader->next can be updated after the alloc.
; 347  :      */
; 348  :     prevHeader  = &heap_head[bi];

  00084	e59d1030	 ldr         r1, [sp, #0x30]
  00088	e3a03008	 mov         r3, #8
  0008c	e0020391	 mul         r2, r1, r3
  00090	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00094	e0833002	 add         r3, r3, r2
  00098	e58d3008	 str         r3, [sp, #8]

; 349  :     curHeader = prevHeader->next;

  0009c	e59d3008	 ldr         r3, [sp, #8]
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e58d3014	 str         r3, [sp, #0x14]
  000a8		 |$LN11@HeapMem_al|

; 350  : 
; 351  :     /* Loop over the free list. */
; 352  :     while (curHeader != NULL) {

  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e3530000	 cmp         r3, #0
  000b0	0a000060	 beq         |$LN10@HeapMem_al|

; 353  : 
; 354  :         curSize = curHeader->size;

  000b4	e59d3014	 ldr         r3, [sp, #0x14]
  000b8	e2833004	 add         r3, r3, #4
  000bc	e5933000	 ldr         r3, [r3]
  000c0	e58d300c	 str         r3, [sp, #0xC]

; 355  : 
; 356  :         /*
; 357  :          *  Determine the offset from the beginning to make sure
; 358  :          *  the alignment request is honored.
; 359  :          */
; 360  :         offset = (unsigned long)curHeader & (adjAlign - 1);

  000c4	e59d3000	 ldr         r3, [sp]
  000c8	e2432001	 sub         r2, r3, #1
  000cc	e59d3014	 ldr         r3, [sp, #0x14]
  000d0	e0033002	 and         r3, r3, r2
  000d4	e58d3010	 str         r3, [sp, #0x10]

; 361  :         if (offset) {

  000d8	e59d3010	 ldr         r3, [sp, #0x10]
  000dc	e3530000	 cmp         r3, #0
  000e0	0a000003	 beq         |$LN9@HeapMem_al|

; 362  :             offset = adjAlign - offset;

  000e4	e59d2000	 ldr         r2, [sp]
  000e8	e59d3010	 ldr         r3, [sp, #0x10]
  000ec	e0423003	 sub         r3, r2, r3
  000f0	e58d3010	 str         r3, [sp, #0x10]
  000f4		 |$LN9@HeapMem_al|

; 363  :         }
; 364  : 
; 365  : #if 0
; 366  :         /* Internal Assert that offset is a multiple of HEAP_ALIGN */
; 367  :         Assert_isTrue(((offset & (HEAP_ALIGN - 1)) == 0), NULL);
; 368  : #endif
; 369  : 
; 370  :         /* big enough? */
; 371  :         if (curSize >= (adjSize + offset)) {

  000f4	e59d2020	 ldr         r2, [sp, #0x20]
  000f8	e59d3010	 ldr         r3, [sp, #0x10]
  000fc	e0822003	 add         r2, r2, r3
  00100	e59d300c	 ldr         r3, [sp, #0xC]
  00104	e1530002	 cmp         r3, r2
  00108	3a000044	 bcc         |$LN8@HeapMem_al|

; 372  : 
; 373  :             /* Set the pointer that will be returned. Alloc from front */
; 374  :             allocAddr = (char *)((unsigned long)curHeader + offset);

  0010c	e59d2014	 ldr         r2, [sp, #0x14]
  00110	e59d3010	 ldr         r3, [sp, #0x10]
  00114	e0823003	 add         r3, r2, r3
  00118	e58d3004	 str         r3, [sp, #4]

; 375  : 
; 376  :             if (dryrun) {

  0011c	e59d303c	 ldr         r3, [sp, #0x3C]
  00120	e3530000	 cmp         r3, #0
  00124	0a000002	 beq         |$LN7@HeapMem_al|

; 377  :                 return ((void *)allocAddr);

  00128	e59d3004	 ldr         r3, [sp, #4]
  0012c	e58d3024	 str         r3, [sp, #0x24]
  00130	ea000042	 b           |$LN14@HeapMem_al|
  00134		 |$LN7@HeapMem_al|

; 378  :             }
; 379  : 
; 380  :             /*
; 381  :              *  Determine the remaining memory after the allocated block.
; 382  :              *  Note: this cannot be negative because of above comparison.
; 383  :              */
; 384  :             remainSize = curSize - adjSize - offset;

  00134	e59d200c	 ldr         r2, [sp, #0xC]
  00138	e59d3020	 ldr         r3, [sp, #0x20]
  0013c	e0422003	 sub         r2, r2, r3
  00140	e59d3010	 ldr         r3, [sp, #0x10]
  00144	e0423003	 sub         r3, r2, r3
  00148	e58d301c	 str         r3, [sp, #0x1C]

; 385  : 
; 386  : #if 0
; 387  :             /* Internal Assert that remainSize is a multiple of HEAP_ALIGN */
; 388  :             Assert_isTrue(((remainSize & (HEAP_ALIGN - 1)) == 0), NULL);
; 389  : #endif
; 390  : 
; 391  :             /*
; 392  :              *  If there is memory at the beginning (due to alignment
; 393  :              *  requirements), maintain it in the list.
; 394  :              *
; 395  :              *  offset and remainSize must be multiples of
; 396  :              *  HEAP_ALIGN. Therefore the address of the newHeader
; 397  :              *  below must be a multiple of the HEAP_ALIGN, thus
; 398  :              *  maintaining the requirement.
; 399  :              */
; 400  :             if (offset) {

  0014c	e59d3010	 ldr         r3, [sp, #0x10]
  00150	e3530000	 cmp         r3, #0
  00154	0a000016	 beq         |$LN6@HeapMem_al|

; 401  : 
; 402  :                 /* Adjust the curHeader size accordingly */
; 403  :                 curHeader->size = offset;

  00158	e59d3014	 ldr         r3, [sp, #0x14]
  0015c	e2832004	 add         r2, r3, #4
  00160	e59d3010	 ldr         r3, [sp, #0x10]
  00164	e5823000	 str         r3, [r2]

; 404  : 
; 405  :                 /*
; 406  :                  *  If there is remaining memory, add into the free list.
; 407  :                  *  Note: no need to coalesce and we have HeapMem locked so
; 408  :                  *        it is safe.
; 409  :                  */
; 410  :                 if (remainSize) {

  00168	e59d301c	 ldr         r3, [sp, #0x1C]
  0016c	e3530000	 cmp         r3, #0
  00170	0a00000e	 beq         |$LN5@HeapMem_al|

; 411  :                     newHeader = (HeapMem_Header *)
; 412  :                         ((unsigned long)allocAddr + adjSize);

  00174	e59d2004	 ldr         r2, [sp, #4]
  00178	e59d3020	 ldr         r3, [sp, #0x20]
  0017c	e0823003	 add         r3, r2, r3
  00180	e58d3018	 str         r3, [sp, #0x18]

; 413  :                     newHeader->next = curHeader->next;

  00184	e59d3014	 ldr         r3, [sp, #0x14]
  00188	e5932000	 ldr         r2, [r3]
  0018c	e59d3018	 ldr         r3, [sp, #0x18]
  00190	e5832000	 str         r2, [r3]

; 414  :                     newHeader->size = remainSize;

  00194	e59d3018	 ldr         r3, [sp, #0x18]
  00198	e2832004	 add         r2, r3, #4
  0019c	e59d301c	 ldr         r3, [sp, #0x1C]
  001a0	e5823000	 str         r3, [r2]

; 415  :                     curHeader->next = newHeader;

  001a4	e59d2018	 ldr         r2, [sp, #0x18]
  001a8	e59d3014	 ldr         r3, [sp, #0x14]
  001ac	e5832000	 str         r2, [r3]
  001b0		 |$LN5@HeapMem_al|

; 416  :                 }
; 417  :             }
; 418  :             else {

  001b0	ea000016	 b           |$LN4@HeapMem_al|
  001b4		 |$LN6@HeapMem_al|

; 419  :                 /*
; 420  :                  *  If there is any remaining, link it in,
; 421  :                  *  else point to the next free block.
; 422  :                  *  Note: no need to coalesce and we have HeapMem locked so
; 423  :                  *        it is safe.
; 424  :                  */
; 425  :                 if (remainSize) {

  001b4	e59d301c	 ldr         r3, [sp, #0x1C]
  001b8	e3530000	 cmp         r3, #0
  001bc	0a00000f	 beq         |$LN3@HeapMem_al|

; 426  :                     newHeader = (HeapMem_Header *)
; 427  :                         ((unsigned long)allocAddr + adjSize);

  001c0	e59d2004	 ldr         r2, [sp, #4]
  001c4	e59d3020	 ldr         r3, [sp, #0x20]
  001c8	e0823003	 add         r3, r2, r3
  001cc	e58d3018	 str         r3, [sp, #0x18]

; 428  :                     newHeader->next  = curHeader->next;

  001d0	e59d3014	 ldr         r3, [sp, #0x14]
  001d4	e5932000	 ldr         r2, [r3]
  001d8	e59d3018	 ldr         r3, [sp, #0x18]
  001dc	e5832000	 str         r2, [r3]

; 429  :                     newHeader->size  = remainSize;

  001e0	e59d3018	 ldr         r3, [sp, #0x18]
  001e4	e2832004	 add         r2, r3, #4
  001e8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ec	e5823000	 str         r3, [r2]

; 430  :                     prevHeader->next = newHeader;

  001f0	e59d2018	 ldr         r2, [sp, #0x18]
  001f4	e59d3008	 ldr         r3, [sp, #8]
  001f8	e5832000	 str         r2, [r3]

; 431  :                 }
; 432  :                 else {

  001fc	ea000003	 b           |$LN2@HeapMem_al|
  00200		 |$LN3@HeapMem_al|

; 433  :                     prevHeader->next = curHeader->next;

  00200	e59d3014	 ldr         r3, [sp, #0x14]
  00204	e5932000	 ldr         r2, [r3]
  00208	e59d3008	 ldr         r3, [sp, #8]
  0020c	e5832000	 str         r2, [r3]
  00210		 |$LN2@HeapMem_al|
  00210		 |$LN4@HeapMem_al|

; 434  :                 }
; 435  :             }
; 436  : 
; 437  :             /* Success, return the allocated memory */
; 438  :             return ((void *)allocAddr);

  00210	e59d3004	 ldr         r3, [sp, #4]
  00214	e58d3024	 str         r3, [sp, #0x24]
  00218	ea000008	 b           |$LN14@HeapMem_al|

; 439  :         }
; 440  :         else {

  0021c	ea000004	 b           |$LN1@HeapMem_al|
  00220		 |$LN8@HeapMem_al|

; 441  :             prevHeader = curHeader;

  00220	e59d3014	 ldr         r3, [sp, #0x14]
  00224	e58d3008	 str         r3, [sp, #8]

; 442  :             curHeader = curHeader->next;

  00228	e59d3014	 ldr         r3, [sp, #0x14]
  0022c	e5933000	 ldr         r3, [r3]
  00230	e58d3014	 str         r3, [sp, #0x14]
  00234		 |$LN1@HeapMem_al|

; 443  :         }
; 444  :     }

  00234	eaffff9b	 b           |$LN11@HeapMem_al|
  00238		 |$LN10@HeapMem_al|

; 445  : 
; 446  :     return (NULL);

  00238	e3a03000	 mov         r3, #0
  0023c	e58d3024	 str         r3, [sp, #0x24]
  00240		 |$LN14@HeapMem_al|

; 447  : }

  00240	e59d0024	 ldr         r0, [sp, #0x24]
  00244	e28dd028	 add         sp, sp, #0x28
  00248	e89d6000	 ldmia       sp, {sp, lr}
  0024c	e12fff1e	 bx          lr
  00250		 |$LN19@HeapMem_al|
  00250		 |$LN20@HeapMem_al|
  00250	00000000	 DCD         |heap_head|
  00254		 |$LN21@HeapMem_al|
  00254	00000000	 DCD         |gdwPageSize|
  00258		 |$M41128|

			 ENDP  ; |HeapMem_alloc|

	EXPORT	|HeapMem_free|

  00008			 AREA	 |.pdata|, PDATA
|$T41138| DCD	|$LN10@HeapMem_fr|
	DCD	0x40007004
; Function compile flags: /Odtp

  00258			 AREA	 |.text|, CODE, ARM

  00258		 |HeapMem_free| PROC

; 453  : {

  00258		 |$LN10@HeapMem_fr|
  00258	e1a0c00d	 mov         r12, sp
  0025c	e92d0007	 stmdb       sp!, {r0 - r2}
  00260	e92d5000	 stmdb       sp!, {r12, lr}
  00264	e24dd010	 sub         sp, sp, #0x10
  00268		 |$M41135|

; 454  : //    long key;
; 455  :     HeapMem_Header *curHeader, *newHeader, *nextHeader;
; 456  :     size_t offset;
; 457  : 
; 458  :     /* obj->head never changes, doesn't need Gate protection. */
; 459  :     curHeader = &heap_head[bi];

  00268	e59d1018	 ldr         r1, [sp, #0x18]
  0026c	e3a03008	 mov         r3, #8
  00270	e0020391	 mul         r2, r1, r3
  00274	e59f3194	 ldr         r3, [pc, #0x194]
  00278	e0833002	 add         r3, r3, r2
  0027c	e58d3004	 str         r3, [sp, #4]

; 460  : 
; 461  :     /* Restore size to actual allocated size */
; 462  :     if ((offset = size & (HEAP_ALIGN - 1)) != 0) {

  00280	e59f318c	 ldr         r3, [pc, #0x18C]
  00284	e5933000	 ldr         r3, [r3]
  00288	e2432001	 sub         r2, r3, #1
  0028c	e59d3020	 ldr         r3, [sp, #0x20]
  00290	e0033002	 and         r3, r3, r2
  00294	e58d3000	 str         r3, [sp]
  00298	e59d3000	 ldr         r3, [sp]
  0029c	e3530000	 cmp         r3, #0
  002a0	0a000006	 beq         |$LN5@HeapMem_fr|

; 463  :         size += HEAP_ALIGN - offset;

  002a4	e59f3168	 ldr         r3, [pc, #0x168]
  002a8	e5932000	 ldr         r2, [r3]
  002ac	e59d3000	 ldr         r3, [sp]
  002b0	e0422003	 sub         r2, r2, r3
  002b4	e59d3020	 ldr         r3, [sp, #0x20]
  002b8	e0833002	 add         r3, r3, r2
  002bc	e58d3020	 str         r3, [sp, #0x20]
  002c0		 |$LN5@HeapMem_fr|

; 464  :     }
; 465  : 
; 466  : /*
; 467  :  * We don't need to enter the "gate" since this function is called
; 468  :  * with it held already.
; 469  :  */
; 470  : //    key = Gate_enterModule();
; 471  : 
; 472  :     newHeader = (HeapMem_Header *)addr;

  002c0	e59d301c	 ldr         r3, [sp, #0x1C]
  002c4	e58d3008	 str         r3, [sp, #8]

; 473  :     nextHeader = curHeader->next;

  002c8	e59d3004	 ldr         r3, [sp, #4]
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e58d300c	 str         r3, [sp, #0xC]
  002d4		 |$LN4@HeapMem_fr|

; 474  : 
; 475  :     /* Go down freelist and find right place for buf */
; 476  :     while (nextHeader != NULL && nextHeader < newHeader) {

  002d4	e59d300c	 ldr         r3, [sp, #0xC]
  002d8	e3530000	 cmp         r3, #0
  002dc	0a000009	 beq         |$LN3@HeapMem_fr|
  002e0	e59d200c	 ldr         r2, [sp, #0xC]
  002e4	e59d3008	 ldr         r3, [sp, #8]
  002e8	e1520003	 cmp         r2, r3
  002ec	2a000005	 bcs         |$LN3@HeapMem_fr|

; 477  :         curHeader = nextHeader;

  002f0	e59d300c	 ldr         r3, [sp, #0xC]
  002f4	e58d3004	 str         r3, [sp, #4]

; 478  :         nextHeader = nextHeader->next;

  002f8	e59d300c	 ldr         r3, [sp, #0xC]
  002fc	e5933000	 ldr         r3, [r3]
  00300	e58d300c	 str         r3, [sp, #0xC]

; 479  :     }

  00304	eafffff2	 b           |$LN4@HeapMem_fr|
  00308		 |$LN3@HeapMem_fr|

; 480  : 
; 481  :     newHeader->next = nextHeader;

  00308	e59d200c	 ldr         r2, [sp, #0xC]
  0030c	e59d3008	 ldr         r3, [sp, #8]
  00310	e5832000	 str         r2, [r3]

; 482  :     newHeader->size = size;

  00314	e59d3008	 ldr         r3, [sp, #8]
  00318	e2832004	 add         r2, r3, #4
  0031c	e59d3020	 ldr         r3, [sp, #0x20]
  00320	e5823000	 str         r3, [r2]

; 483  :     curHeader->next = newHeader;

  00324	e59d2008	 ldr         r2, [sp, #8]
  00328	e59d3004	 ldr         r3, [sp, #4]
  0032c	e5832000	 str         r2, [r3]

; 484  : 
; 485  :     /* Join contiguous free blocks */
; 486  :     /* Join with upper block */
; 487  :     if ((nextHeader != NULL) &&
; 488  :             (((unsigned long)newHeader + size) == (unsigned long)nextHeader)) {

  00330	e59d300c	 ldr         r3, [sp, #0xC]
  00334	e3530000	 cmp         r3, #0
  00338	0a000013	 beq         |$LN2@HeapMem_fr|
  0033c	e59d2008	 ldr         r2, [sp, #8]
  00340	e59d3020	 ldr         r3, [sp, #0x20]
  00344	e0822003	 add         r2, r2, r3
  00348	e59d300c	 ldr         r3, [sp, #0xC]
  0034c	e1520003	 cmp         r2, r3
  00350	1a00000d	 bne         |$LN2@HeapMem_fr|

; 489  :         newHeader->next = nextHeader->next;

  00354	e59d300c	 ldr         r3, [sp, #0xC]
  00358	e5932000	 ldr         r2, [r3]
  0035c	e59d3008	 ldr         r3, [sp, #8]
  00360	e5832000	 str         r2, [r3]

; 490  :         newHeader->size += nextHeader->size;

  00364	e59d3008	 ldr         r3, [sp, #8]
  00368	e2832004	 add         r2, r3, #4
  0036c	e59d300c	 ldr         r3, [sp, #0xC]
  00370	e2833004	 add         r3, r3, #4
  00374	e5922000	 ldr         r2, [r2]
  00378	e5933000	 ldr         r3, [r3]
  0037c	e0822003	 add         r2, r2, r3
  00380	e59d3008	 ldr         r3, [sp, #8]
  00384	e2833004	 add         r3, r3, #4
  00388	e5832000	 str         r2, [r3]
  0038c		 |$LN2@HeapMem_fr|

; 491  :     }
; 492  : 
; 493  :     /*
; 494  :      *  Join with lower block. Make sure to check to see if not the
; 495  :      *  first block.
; 496  :      */
; 497  :     if ((curHeader != &heap_head[bi]) &&
; 498  :             (((unsigned long)curHeader + curHeader->size) ==
; 499  :                     (unsigned long)newHeader)) {

  0038c	e59d1018	 ldr         r1, [sp, #0x18]
  00390	e3a03008	 mov         r3, #8
  00394	e0020391	 mul         r2, r1, r3
  00398	e59f3070	 ldr         r3, [pc, #0x70]
  0039c	e0832002	 add         r2, r3, r2
  003a0	e59d3004	 ldr         r3, [sp, #4]
  003a4	e1530002	 cmp         r3, r2
  003a8	0a000015	 beq         |$LN1@HeapMem_fr|
  003ac	e59d3004	 ldr         r3, [sp, #4]
  003b0	e2833004	 add         r3, r3, #4
  003b4	e59d2004	 ldr         r2, [sp, #4]
  003b8	e5933000	 ldr         r3, [r3]
  003bc	e0822003	 add         r2, r2, r3
  003c0	e59d3008	 ldr         r3, [sp, #8]
  003c4	e1520003	 cmp         r2, r3
  003c8	1a00000d	 bne         |$LN1@HeapMem_fr|

; 500  :         curHeader->next = newHeader->next;

  003cc	e59d3008	 ldr         r3, [sp, #8]
  003d0	e5932000	 ldr         r2, [r3]
  003d4	e59d3004	 ldr         r3, [sp, #4]
  003d8	e5832000	 str         r2, [r3]

; 501  :         curHeader->size += newHeader->size;

  003dc	e59d3004	 ldr         r3, [sp, #4]
  003e0	e2832004	 add         r2, r3, #4
  003e4	e59d3008	 ldr         r3, [sp, #8]
  003e8	e2833004	 add         r3, r3, #4
  003ec	e5922000	 ldr         r2, [r2]
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e0822003	 add         r2, r2, r3
  003f8	e59d3004	 ldr         r3, [sp, #4]
  003fc	e2833004	 add         r3, r3, #4
  00400	e5832000	 str         r2, [r3]
  00404		 |$LN1@HeapMem_fr|

; 502  :     }
; 503  : 
; 504  : /*
; 505  :  * See above comment on Gate_enterModule for an explanation of why we
; 506  :  * don't use the "gate".
; 507  :  */
; 508  : //    Gate_leaveModule(key);
; 509  : 
; 510  : }

  00404	e28dd010	 add         sp, sp, #0x10
  00408	e89d6000	 ldmia       sp, {sp, lr}
  0040c	e12fff1e	 bx          lr
  00410		 |$LN11@HeapMem_fr|
  00410		 |$LN12@HeapMem_fr|
  00410	00000000	 DCD         |heap_head|
  00414		 |$LN13@HeapMem_fr|
  00414	00000000	 DCD         |gdwPageSize|
  00418		 |$M41136|

			 ENDP  ; |HeapMem_free|

	EXPORT	|??_C@_1FM@JFOFNLID@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@JGDEPHGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@DANNKMFI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@EBCKMIOG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAb?$AAu?$AAf?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@EHIEFMCN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAh?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@JOGLBBIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAp?$AAo?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@PBGLKGFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GDPAOOKP@?$AAP?$AAo?$AAo?$AAl?$AAS?$AAi?$AAz?$AAe?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@CDBIOCIL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@DMMEGEFO@?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA_?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PICFELOA@?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JCJOGNFE@?$AAN?$AAu?$AAm?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAs?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@DKGFCODN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAi?$AAg?$AAu?$AAo?$AAu?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@POFHIEIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@KJFDBIDO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAe?$AAg?$AAa?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AAo?$AAf?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@DJKHEDFH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA_?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@FJFCHAIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@CGJLOLBJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@INLBPEDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAC?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@KFACKDPH@?$AAU?$AAs?$AAe?$AAH?$AAe?$AAa?$AAp?$AAI?$AAf?$AAP?$AAo?$AAo?$AAl?$AAU?$AAn?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@NOPHIHDE@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@GGELOAFB@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@EEHBOAGL@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@PMMNIHAO@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@ODBAMBIC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@BKOAGPDI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@FLKMKGOH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@GGDGBKHC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@BOKDKMGI@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAB?$AAu?$AAi?$AAl?$AAt?$AAI?$AAn?$AA?2?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|CMK_Init|
	IMPORT	|FreePhysMem|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|RegCloseKey|
	IMPORT	|StringCchPrintfW|
	IMPORT	|memset|
	IMPORT	|AllocPhysMem|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetSystemInfo|
	IMPORT	|CreateMutexW|
	IMPORT	|RegQueryValueExW|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  0049c			 AREA	 |.bss|, NOINIT
|mappedBufferList| % 0x8

  00010			 AREA	 |.pdata|, PDATA
|$T41182| DCD	|$LN44@CMK_Init|
	DCD	0xc003b204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@JFOFNLID@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "u", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "f", 0x0, "u", 0x0, "l", 0x0, "l", 0x0, "y"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@JGDEPHGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AA?$CF?$AAd@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, "t", 0x0, "w"
	DCB	0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@DANNKMFI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "h", 0x0, "e", 0x0, "a", 0x0, "p", 0x0, ",", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EBCKMIOG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAb?$AAu?$AAf?$AAf@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "e"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@EHIEFMCN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAh?$AAe?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "h", 0x0, "e"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@JOGLBBIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAp?$AAo?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "n", 0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@PBGLKGFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, "C", 0x0, "c", 0x0, "h", 0x0, "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "f", 0x0, " "
	DCB	0x0, "(", 0x0, "P", 0x0, "O", 0x0, "O", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "I", 0x0, "Z", 0x0, "E", 0x0, ")", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GDPAOOKP@?$AAP?$AAo?$AAo?$AAl?$AAS?$AAi?$AAz?$AAe?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "_", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@CDBIOCIL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, "C", 0x0, "c", 0x0, "h", 0x0, "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "f", 0x0, " "
	DCB	0x0, "(", 0x0, "N", 0x0, "U", 0x0, "M", 0x0, "_", 0x0, "B"
	DCB	0x0, "U", 0x0, "F", 0x0, "F", 0x0, "E", 0x0, "R", 0x0, "S"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DMMEGEFO@?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA_?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, "%", 0x0, "d", 0x0, "_", 0x0, "%", 0x0, "s"
	DCB	0x0, "%", 0x0, "d", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PICFELOA@?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| DCB "B", 0x0, "l", 0x0
	DCB	"o", 0x0, "c", 0x0, "k", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JCJOGNFE@?$AAN?$AAu?$AAm?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAs?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@| DCB "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "_", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@DKGFCODN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAi?$AAg?$AAu?$AAo?$AAu?$AAs@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "o", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "(", 0x0, "n", 0x0, "o"
	DCB	0x0, "n", 0x0, "-", 0x0, "c", 0x0, "a", 0x0, "c", 0x0, "h"
	DCB	0x0, "e", 0x0, "d", 0x0, ")", 0x0, "(", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "l"
	DCB	0x0, "d", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@POFHIEIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "i"
	DCB	0x0, "g", 0x0, "u", 0x0, "o", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "(", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-"
	DCB	0x0, "c", 0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "l", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@KJFDBIDO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAe?$AAg?$AAa?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AAo?$AAf?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "e", 0x0, "g", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "l", 0x0, "d", 0x0, ")", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@DJKHEDFH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA_?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, "_", 0x0, "M"
	DCB	0x0, "U", 0x0, "T", 0x0, "E", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@FJFCHAIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "y", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, "s", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "1", 0x0, ","
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@CGJLOLBJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "y", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, "s", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "0", 0x0, ","
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@INLBPEDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAC?$AAa?$AAn@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KFACKDPH@?$AAU?$AAs?$AAe?$AAH?$AAe?$AAa?$AAp?$AAI?$AAf?$AAP?$AAo?$AAo?$AAl?$AAU?$AAn?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "e", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "p"
	DCB	0x0, "I", 0x0, "f", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@NOPHIHDE@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA1?$AA?$AA@| DCB "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "s", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@GGELOAFB@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA0?$AA?$AA@| DCB "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "s", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@EEHBOAGL@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA1?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "1", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@PMMNIHAO@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA0?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "0", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@ODBAMBIC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA1?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "1", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@BKOAGPDI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "k", 0x0, "e"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, "!"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FLKMKGOH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA0?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GGDGBKHC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "k", 0x0, "e"
	DCB	0x0, "y", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BOKDKMGI@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAB?$AAu?$AAi?$AAl?$AAt?$AAI?$AAn?$AA?2?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "B", 0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "\\", 0x0, "C", 0x0, "M", 0x0, "E"
	DCB	0x0, "M", 0x0, "K", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T41178| DCD	0xffffff34
; Function compile flags: /Odtp

  00418			 AREA	 |.text|, CODE, ARM

  00418	00000000	 DCD         |__GSHandlerCheck|
  0041c	00000000	 DCD         |$T41178|

  00420		 |CMK_Init| PROC

; 763  : {

  00420		 |$LN44@CMK_Init|
  00420	e1a0c00d	 mov         r12, sp
  00424	e92d0001	 stmdb       sp!, {r0}
  00428	e92d5000	 stmdb       sp!, {r12, lr}
  0042c	e24ddfc7	 sub         sp, sp, #0xC7, 30
  00430		 |$M41179|
  00430	e59f3eac	 ldr         r3, [pc, #0xEAC]
  00434	e5933000	 ldr         r3, [r3]
  00438	e58d325c	 str         r3, [sp, #0x25C]

; 764  :     int bi;
; 765  :     int i;
; 766  :     int err;
; 767  :     int pool_size;
; 768  :     int pool_num_buffers;
; 769  :     unsigned long length;
; 770  :     HeapMem_Header *header;
; 771  :     SYSTEM_INFO systemInfo;
; 772  :     HKEY hKey;
; 773  :     DWORD dwDataSize;
; 774  : 
; 775  : //    __D("** CMEM kernel module built: " __DATE__ " " __TIME__ "\n" );
; 776  : //    DebugBreak();
; 777  : 
; 778  :     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, CMEMK_REG_KEY, 0, 0, &hKey) !=
; 779  :             ERROR_SUCCESS) {

  0043c	e28d3010	 add         r3, sp, #0x10
  00440	e58d3000	 str         r3, [sp]
  00444	e3a03000	 mov         r3, #0
  00448	e3a02000	 mov         r2, #0
  0044c	e59f1e8c	 ldr         r1, [pc, #0xE8C]
  00450	e3a0010a	 mov         r0, #0xA, 2
  00454	eb000000	 bl          RegOpenKeyExW
  00458	e58d02d4	 str         r0, [sp, #0x2D4]
  0045c	e59d32d4	 ldr         r3, [sp, #0x2D4]
  00460	e3530000	 cmp         r3, #0
  00464	0a000006	 beq         |$LN37@CMK_Init|

; 780  :         __E("CMEMK: cannot open registry key!\n");

  00468	e59f0e6c	 ldr         r0, [pc, #0xE6C]
  0046c	eb000000	 bl          NKDbgPrintfW

; 781  :         return 0;

  00470	e59d025c	 ldr         r0, [sp, #0x25C]
  00474	eb000000	 bl          __security_check_cookie
  00478	e3a03000	 mov         r3, #0
  0047c	e58d3264	 str         r3, [sp, #0x264]
  00480	ea000361	 b           |$LN38@CMK_Init|
  00484		 |$LN37@CMK_Init|

; 782  :     }
; 783  : 
; 784  :     dwDataSize = sizeof(block_start[0]);

  00484	e3a03004	 mov         r3, #4
  00488	e58d304c	 str         r3, [sp, #0x4C]

; 785  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_PHYSICAL_START_0, NULL, NULL,
; 786  :                 (LPBYTE)&block_start[0], &dwDataSize) != ERROR_SUCCESS) {

  0048c	e28d304c	 add         r3, sp, #0x4C
  00490	e58d3004	 str         r3, [sp, #4]
  00494	e59f3da0	 ldr         r3, [pc, #0xDA0]
  00498	e58d3000	 str         r3, [sp]
  0049c	e3a03000	 mov         r3, #0
  004a0	e3a02000	 mov         r2, #0
  004a4	e59f1e2c	 ldr         r1, [pc, #0xE2C]
  004a8	e59d0010	 ldr         r0, [sp, #0x10]
  004ac	eb000000	 bl          RegQueryValueExW
  004b0	e58d02d8	 str         r0, [sp, #0x2D8]
  004b4	e59d32d8	 ldr         r3, [sp, #0x2D8]
  004b8	e3530000	 cmp         r3, #0
  004bc	0a000005	 beq         |$LN36@CMK_Init|

; 787  :         __E("CMEMK: cannot open registry key: %s!\n",
; 788  :                 CMEMK_REG_KEY_PHYSICAL_START_0);

  004c0	e59f1e10	 ldr         r1, [pc, #0xE10]
  004c4	e59f0da0	 ldr         r0, [pc, #0xDA0]
  004c8	eb000000	 bl          NKDbgPrintfW

; 789  :         block_start[0] = 0;

  004cc	e59f2d68	 ldr         r2, [pc, #0xD68]
  004d0	e3a03000	 mov         r3, #0
  004d4	e5823000	 str         r3, [r2]
  004d8		 |$LN36@CMK_Init|

; 790  :     }
; 791  : 
; 792  :     dwDataSize = sizeof(block_start[1]);

  004d8	e3a03004	 mov         r3, #4
  004dc	e58d304c	 str         r3, [sp, #0x4C]

; 793  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_PHYSICAL_START_1, NULL, NULL,
; 794  :                 (LPBYTE)&block_start[1], &dwDataSize) != ERROR_SUCCESS) {

  004e0	e28d304c	 add         r3, sp, #0x4C
  004e4	e58d3004	 str         r3, [sp, #4]
  004e8	e59f3d4c	 ldr         r3, [pc, #0xD4C]
  004ec	e2833004	 add         r3, r3, #4
  004f0	e58d3000	 str         r3, [sp]
  004f4	e3a03000	 mov         r3, #0
  004f8	e3a02000	 mov         r2, #0
  004fc	e59f1dd0	 ldr         r1, [pc, #0xDD0]
  00500	e59d0010	 ldr         r0, [sp, #0x10]
  00504	eb000000	 bl          RegQueryValueExW
  00508	e58d02dc	 str         r0, [sp, #0x2DC]
  0050c	e59d32dc	 ldr         r3, [sp, #0x2DC]
  00510	e3530000	 cmp         r3, #0
  00514	0a000005	 beq         |$LN35@CMK_Init|

; 795  :         __E("CMEMK: cannot open registry key: %s!\n",
; 796  :                 CMEMK_REG_KEY_PHYSICAL_START_1);

  00518	e59f1db4	 ldr         r1, [pc, #0xDB4]
  0051c	e59f0d48	 ldr         r0, [pc, #0xD48]
  00520	eb000000	 bl          NKDbgPrintfW

; 797  :         block_start[1] = 0;

  00524	e59f2d10	 ldr         r2, [pc, #0xD10]
  00528	e3a03000	 mov         r3, #0
  0052c	e5823004	 str         r3, [r2, #4]
  00530		 |$LN35@CMK_Init|

; 798  :     }
; 799  : 
; 800  :     dwDataSize = sizeof(block_end[0]);

  00530	e3a03004	 mov         r3, #4
  00534	e58d304c	 str         r3, [sp, #0x4C]

; 801  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_PHYSICAL_END_0, NULL, NULL,
; 802  :                 (LPBYTE)&block_end[0], &dwDataSize) != ERROR_SUCCESS) {

  00538	e28d304c	 add         r3, sp, #0x4C
  0053c	e58d3004	 str         r3, [sp, #4]
  00540	e59f3cf8	 ldr         r3, [pc, #0xCF8]
  00544	e58d3000	 str         r3, [sp]
  00548	e3a03000	 mov         r3, #0
  0054c	e3a02000	 mov         r2, #0
  00550	e59f1d78	 ldr         r1, [pc, #0xD78]
  00554	e59d0010	 ldr         r0, [sp, #0x10]
  00558	eb000000	 bl          RegQueryValueExW
  0055c	e58d02e0	 str         r0, [sp, #0x2E0]
  00560	e59d32e0	 ldr         r3, [sp, #0x2E0]
  00564	e3530000	 cmp         r3, #0
  00568	0a000005	 beq         |$LN34@CMK_Init|

; 803  :         __E("CMEMK: cannot open registry key: %s!\n",
; 804  :                 CMEMK_REG_KEY_PHYSICAL_END_0);

  0056c	e59f1d5c	 ldr         r1, [pc, #0xD5C]
  00570	e59f0cf4	 ldr         r0, [pc, #0xCF4]
  00574	eb000000	 bl          NKDbgPrintfW

; 805  :         block_end[0] = 0;

  00578	e59f2cc0	 ldr         r2, [pc, #0xCC0]
  0057c	e3a03000	 mov         r3, #0
  00580	e5823000	 str         r3, [r2]
  00584		 |$LN34@CMK_Init|

; 806  :     }
; 807  : 
; 808  :     dwDataSize = sizeof(block_end[1]);

  00584	e3a03004	 mov         r3, #4
  00588	e58d304c	 str         r3, [sp, #0x4C]

; 809  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_PHYSICAL_END_1, NULL, NULL,
; 810  :                 (LPBYTE)&block_end[1], &dwDataSize) != ERROR_SUCCESS) {

  0058c	e28d304c	 add         r3, sp, #0x4C
  00590	e58d3004	 str         r3, [sp, #4]
  00594	e59f3ca4	 ldr         r3, [pc, #0xCA4]
  00598	e2833004	 add         r3, r3, #4
  0059c	e58d3000	 str         r3, [sp]
  005a0	e3a03000	 mov         r3, #0
  005a4	e3a02000	 mov         r2, #0
  005a8	e59f1d1c	 ldr         r1, [pc, #0xD1C]
  005ac	e59d0010	 ldr         r0, [sp, #0x10]
  005b0	eb000000	 bl          RegQueryValueExW
  005b4	e58d02e4	 str         r0, [sp, #0x2E4]
  005b8	e59d32e4	 ldr         r3, [sp, #0x2E4]
  005bc	e3530000	 cmp         r3, #0
  005c0	0a000005	 beq         |$LN33@CMK_Init|

; 811  :         __E("CMEMK: cannot open registry key: %s!\n",
; 812  :                 CMEMK_REG_KEY_PHYSICAL_END_1);

  005c4	e59f1d00	 ldr         r1, [pc, #0xD00]
  005c8	e59f0c9c	 ldr         r0, [pc, #0xC9C]
  005cc	eb000000	 bl          NKDbgPrintfW

; 813  :         block_end[1] = 0;

  005d0	e59f2c68	 ldr         r2, [pc, #0xC68]
  005d4	e3a03000	 mov         r3, #0
  005d8	e5823004	 str         r3, [r2, #4]
  005dc		 |$LN33@CMK_Init|

; 814  :     }
; 815  : 
; 816  : 
; 817  :     dwDataSize = sizeof(npools[0]);

  005dc	e3a03004	 mov         r3, #4
  005e0	e58d304c	 str         r3, [sp, #0x4C]

; 818  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_NUM_POOLS_0, NULL, NULL,
; 819  :                 (LPBYTE)&npools[0], &dwDataSize) != ERROR_SUCCESS) {

  005e4	e28d304c	 add         r3, sp, #0x4C
  005e8	e58d3004	 str         r3, [sp, #4]
  005ec	e59f3c44	 ldr         r3, [pc, #0xC44]
  005f0	e58d3000	 str         r3, [sp]
  005f4	e3a03000	 mov         r3, #0
  005f8	e3a02000	 mov         r2, #0
  005fc	e59f1cc4	 ldr         r1, [pc, #0xCC4]
  00600	e59d0010	 ldr         r0, [sp, #0x10]
  00604	eb000000	 bl          RegQueryValueExW
  00608	e58d02e8	 str         r0, [sp, #0x2E8]
  0060c	e59d32e8	 ldr         r3, [sp, #0x2E8]
  00610	e3530000	 cmp         r3, #0
  00614	0a000005	 beq         |$LN32@CMK_Init|

; 820  :         __E("CMEMK: cannot open registry key: %s!\n",
; 821  :                 CMEMK_REG_KEY_NUM_POOLS_0);

  00618	e59f1ca8	 ldr         r1, [pc, #0xCA8]
  0061c	e59f0c48	 ldr         r0, [pc, #0xC48]
  00620	eb000000	 bl          NKDbgPrintfW

; 822  :         npools[0] = 0;

  00624	e59f2c0c	 ldr         r2, [pc, #0xC0C]
  00628	e3a03000	 mov         r3, #0
  0062c	e5823000	 str         r3, [r2]
  00630		 |$LN32@CMK_Init|

; 823  :     }
; 824  : 
; 825  :     dwDataSize = sizeof(npools[1]);

  00630	e3a03004	 mov         r3, #4
  00634	e58d304c	 str         r3, [sp, #0x4C]

; 826  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_NUM_POOLS_1, NULL, NULL,
; 827  :                 (LPBYTE)&npools[1], &dwDataSize) != ERROR_SUCCESS) {

  00638	e28d304c	 add         r3, sp, #0x4C
  0063c	e58d3004	 str         r3, [sp, #4]
  00640	e59f3bf0	 ldr         r3, [pc, #0xBF0]
  00644	e2833004	 add         r3, r3, #4
  00648	e58d3000	 str         r3, [sp]
  0064c	e3a03000	 mov         r3, #0
  00650	e3a02000	 mov         r2, #0
  00654	e59f1c68	 ldr         r1, [pc, #0xC68]
  00658	e59d0010	 ldr         r0, [sp, #0x10]
  0065c	eb000000	 bl          RegQueryValueExW
  00660	e58d02ec	 str         r0, [sp, #0x2EC]
  00664	e59d32ec	 ldr         r3, [sp, #0x2EC]
  00668	e3530000	 cmp         r3, #0
  0066c	0a000005	 beq         |$LN31@CMK_Init|

; 828  :         __E("CMEMK: cannot open registry key: %s!\n",
; 829  :                 CMEMK_REG_KEY_NUM_POOLS_1);

  00670	e59f1c4c	 ldr         r1, [pc, #0xC4C]
  00674	e59f0bf0	 ldr         r0, [pc, #0xBF0]
  00678	eb000000	 bl          NKDbgPrintfW

; 830  :         npools[1] = 0;

  0067c	e59f2bb4	 ldr         r2, [pc, #0xBB4]
  00680	e3a03000	 mov         r3, #0
  00684	e5823004	 str         r3, [r2, #4]
  00688		 |$LN31@CMK_Init|

; 831  :     }
; 832  : 
; 833  :     dwDataSize = sizeof(useHeapIfPoolUnavailable);

  00688	e3a03004	 mov         r3, #4
  0068c	e58d304c	 str         r3, [sp, #0x4C]

; 834  :     if (RegQueryValueEx(hKey, CMEMK_REG_KEY_USE_HEAP, NULL, NULL,
; 835  :                 (LPBYTE)&useHeapIfPoolUnavailable,
; 836  :                 &dwDataSize) != ERROR_SUCCESS) {

  00690	e28d304c	 add         r3, sp, #0x4C
  00694	e58d3004	 str         r3, [sp, #4]
  00698	e59f3c18	 ldr         r3, [pc, #0xC18]
  0069c	e58d3000	 str         r3, [sp]
  006a0	e3a03000	 mov         r3, #0
  006a4	e3a02000	 mov         r2, #0
  006a8	e59f1c10	 ldr         r1, [pc, #0xC10]
  006ac	e59d0010	 ldr         r0, [sp, #0x10]
  006b0	eb000000	 bl          RegQueryValueExW
  006b4	e58d02f0	 str         r0, [sp, #0x2F0]
  006b8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  006bc	e3530000	 cmp         r3, #0
  006c0	0a000005	 beq         |$LN30@CMK_Init|

; 837  :         __D("CMEMK: Warning: Cannot open registry key: %s\n",
; 838  :                 CMEMK_REG_KEY_USE_HEAP);

  006c4	e59f1bf4	 ldr         r1, [pc, #0xBF4]
  006c8	e59f0bec	 ldr         r0, [pc, #0xBEC]
  006cc	eb000000	 bl          NKDbgPrintfW

; 839  :         useHeapIfPoolUnavailable = 0;

  006d0	e59f2be0	 ldr         r2, [pc, #0xBE0]
  006d4	e3a03000	 mov         r3, #0
  006d8	e5823000	 str         r3, [r2]
  006dc		 |$LN30@CMK_Init|

; 840  :     }
; 841  : 
; 842  :     if (npools[0] > MAX_POOLS) {

  006dc	e59f3b54	 ldr         r3, [pc, #0xB54]
  006e0	e5933000	 ldr         r3, [r3]
  006e4	e3530080	 cmp         r3, #0x80
  006e8	da000005	 ble         |$LN29@CMK_Init|

; 843  :         __E("Too many pools specified (%d) for Block 0, only %d supported.\n",
; 844  :                 npools[0], MAX_POOLS);

  006ec	e3a02080	 mov         r2, #0x80
  006f0	e59f3b40	 ldr         r3, [pc, #0xB40]
  006f4	e5931000	 ldr         r1, [r3]
  006f8	e59f0bb4	 ldr         r0, [pc, #0xBB4]
  006fc	eb000000	 bl          NKDbgPrintfW

; 845  :         goto fail_after_create;

  00700	ea0002bb	 b           |$fail_after_create$40493|
  00704		 |$LN29@CMK_Init|

; 846  :     }
; 847  : 
; 848  : /* cut-and-paste below as part of adding support for more than 2 blocks */
; 849  :     if (npools[1] > MAX_POOLS) {

  00704	e59f3b2c	 ldr         r3, [pc, #0xB2C]
  00708	e5933004	 ldr         r3, [r3, #4]
  0070c	e3530080	 cmp         r3, #0x80
  00710	da000005	 ble         |$LN28@CMK_Init|

; 850  :         __E("Too many pools specified (%d) for Block 1, only %d supported.\n",
; 851  :                 npools[1], MAX_POOLS);

  00714	e3a02080	 mov         r2, #0x80
  00718	e59f3b18	 ldr         r3, [pc, #0xB18]
  0071c	e5931004	 ldr         r1, [r3, #4]
  00720	e59f0b88	 ldr         r0, [pc, #0xB88]
  00724	eb000000	 bl          NKDbgPrintfW

; 852  :         goto fail_after_create;

  00728	ea0002b1	 b           |$fail_after_create$40493|
  0072c		 |$LN28@CMK_Init|

; 853  :     }
; 854  : 
; 855  : /* cut-and-paste above as part of adding support for more than 2 blocks */
; 856  : 
; 857  :     cmem_mutex = CreateMutex(NULL, FALSE, CMEMK_MUTEX_NAME);

  0072c	e59f2b78	 ldr         r2, [pc, #0xB78]
  00730	e3a01000	 mov         r1, #0
  00734	e3a00000	 mov         r0, #0
  00738	eb000000	 bl          CreateMutexW
  0073c	e58d02f4	 str         r0, [sp, #0x2F4]
  00740	e59d22f4	 ldr         r2, [sp, #0x2F4]
  00744	e59f3b5c	 ldr         r3, [pc, #0xB5C]
  00748	e5832000	 str         r2, [r3]

; 858  : 
; 859  :     GetSystemInfo(&systemInfo);

  0074c	e28d001c	 add         r0, sp, #0x1C
  00750	eb000000	 bl          GetSystemInfo

; 860  :     gdwPageSize = systemInfo.dwPageSize;

  00754	e59d2020	 ldr         r2, [sp, #0x20]
  00758	e59f3b00	 ldr         r3, [pc, #0xB00]
  0075c	e5832000	 str         r2, [r3]

; 861  : 
; 862  : /* cut-and-paste above as part of adding support for more than 2 blocks */
; 863  : 
; 864  :     for (bi = 0; bi < NBLOCKS; bi++) {

  00760	e3a03000	 mov         r3, #0
  00764	e58d3048	 str         r3, [sp, #0x48]
  00768	ea000002	 b           |$LN27@CMK_Init|
  0076c		 |$LN26@CMK_Init|
  0076c	e59d3048	 ldr         r3, [sp, #0x48]
  00770	e2833001	 add         r3, r3, #1
  00774	e58d3048	 str         r3, [sp, #0x48]
  00778		 |$LN27@CMK_Init|
  00778	e59d3048	 ldr         r3, [sp, #0x48]
  0077c	e3530002	 cmp         r3, #2
  00780	aa000256	 bge         |$LN25@CMK_Init|

; 865  : 
; 866  : /* cut-and-paste below as part of adding support for more than 2 blocks */
; 867  :         if (bi == 1 && (!block_start[1] || !block_end[1])) {

  00784	e59d3048	 ldr         r3, [sp, #0x48]
  00788	e3530001	 cmp         r3, #1
  0078c	1a000008	 bne         |$LN24@CMK_Init|
  00790	e59f3aa4	 ldr         r3, [pc, #0xAA4]
  00794	e5933004	 ldr         r3, [r3, #4]
  00798	e3530000	 cmp         r3, #0
  0079c	0a000003	 beq         |$LN23@CMK_Init|
  007a0	e59f3a98	 ldr         r3, [pc, #0xA98]
  007a4	e5933004	 ldr         r3, [r3, #4]
  007a8	e3530000	 cmp         r3, #0
  007ac	1a000000	 bne         |$LN24@CMK_Init|
  007b0		 |$LN23@CMK_Init|

; 868  :             break;

  007b0	ea00024a	 b           |$LN25@CMK_Init|
  007b4		 |$LN24@CMK_Init|

; 869  :         }
; 870  : 
; 871  : /* cut-and-paste above as part of adding support for more than 2 blocks */
; 872  : 
; 873  :         /* Get the start and end of CMEM memory */
; 874  :         block_start[bi] = PAGE_ALIGN(block_start[bi]);

  007b4	e59d1048	 ldr         r1, [sp, #0x48]
  007b8	e3a03004	 mov         r3, #4
  007bc	e0020391	 mul         r2, r1, r3
  007c0	e59f3a74	 ldr         r3, [pc, #0xA74]
  007c4	e0833002	 add         r3, r3, r2
  007c8	e5932000	 ldr         r2, [r3]
  007cc	e59f3a8c	 ldr         r3, [pc, #0xA8C]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e0823003	 add         r3, r2, r3
  007d8	e2432001	 sub         r2, r3, #1
  007dc	e59f3a7c	 ldr         r3, [pc, #0xA7C]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e2433001	 sub         r3, r3, #1
  007e8	e1e03003	 mvn         r3, r3
  007ec	e0020003	 and         r0, r2, r3
  007f0	e59d1048	 ldr         r1, [sp, #0x48]
  007f4	e3a03004	 mov         r3, #4
  007f8	e0020391	 mul         r2, r1, r3
  007fc	e59f3a38	 ldr         r3, [pc, #0xA38]
  00800	e0833002	 add         r3, r3, r2
  00804	e5830000	 str         r0, [r3]

; 875  :         block_end[bi] = PAGE_ALIGN(block_end[bi]);

  00808	e59d1048	 ldr         r1, [sp, #0x48]
  0080c	e3a03004	 mov         r3, #4
  00810	e0020391	 mul         r2, r1, r3
  00814	e59f3a24	 ldr         r3, [pc, #0xA24]
  00818	e0833002	 add         r3, r3, r2
  0081c	e5932000	 ldr         r2, [r3]
  00820	e59f3a38	 ldr         r3, [pc, #0xA38]
  00824	e5933000	 ldr         r3, [r3]
  00828	e0823003	 add         r3, r2, r3
  0082c	e2432001	 sub         r2, r3, #1
  00830	e59f3a28	 ldr         r3, [pc, #0xA28]
  00834	e5933000	 ldr         r3, [r3]
  00838	e2433001	 sub         r3, r3, #1
  0083c	e1e03003	 mvn         r3, r3
  00840	e0020003	 and         r0, r2, r3
  00844	e59d1048	 ldr         r1, [sp, #0x48]
  00848	e3a03004	 mov         r3, #4
  0084c	e0020391	 mul         r2, r1, r3
  00850	e59f39e8	 ldr         r3, [pc, #0x9E8]
  00854	e0833002	 add         r3, r3, r2
  00858	e5830000	 str         r0, [r3]

; 876  :         length = block_end[bi] - block_start[bi];

  0085c	e59d1048	 ldr         r1, [sp, #0x48]
  00860	e3a03004	 mov         r3, #4
  00864	e0020391	 mul         r2, r1, r3
  00868	e59f39d0	 ldr         r3, [pc, #0x9D0]
  0086c	e0830002	 add         r0, r3, r2
  00870	e59d1048	 ldr         r1, [sp, #0x48]
  00874	e3a03004	 mov         r3, #4
  00878	e0020391	 mul         r2, r1, r3
  0087c	e59f39b8	 ldr         r3, [pc, #0x9B8]
  00880	e0833002	 add         r3, r3, r2
  00884	e5902000	 ldr         r2, [r0]
  00888	e5933000	 ldr         r3, [r3]
  0088c	e0423003	 sub         r3, r2, r3
  00890	e58d300c	 str         r3, [sp, #0xC]

; 877  : 
; 878  :         if (length < 0) {

  00894	e59d300c	 ldr         r3, [sp, #0xC]
  00898	e3530000	 cmp         r3, #0
  0089c	2a000005	 bcs         |$LN22@CMK_Init|

; 879  :             __E("Negative length of physical memory (%ld)\n", length);

  008a0	e59d100c	 ldr         r1, [sp, #0xC]
  008a4	e59f09f8	 ldr         r0, [pc, #0x9F8]
  008a8	eb000000	 bl          NKDbgPrintfW

; 880  :             err = 0;

  008ac	e3a03000	 mov         r3, #0
  008b0	e58d3044	 str         r3, [sp, #0x44]

; 881  :             goto fail_after_create;

  008b4	ea00024e	 b           |$fail_after_create$40493|
  008b8		 |$LN22@CMK_Init|

; 882  :         }
; 883  : 
; 884  :         block_avail_size[bi] = length;

  008b8	e59d1048	 ldr         r1, [sp, #0x48]
  008bc	e3a03004	 mov         r3, #4
  008c0	e0020391	 mul         r2, r1, r3
  008c4	e59f3958	 ldr         r3, [pc, #0x958]
  008c8	e0832002	 add         r2, r3, r2
  008cc	e59d300c	 ldr         r3, [sp, #0xC]
  008d0	e5823000	 str         r3, [r2]

; 885  :         numBlocks = bi + 1;

  008d4	e59d3048	 ldr         r3, [sp, #0x48]
  008d8	e2832001	 add         r2, r3, #1
  008dc	e59f39bc	 ldr         r3, [pc, #0x9BC]
  008e0	e5832000	 str         r2, [r3]

; 886  : 
; 887  :         // TODO: Can't do this in WINCE....figure out some other way!
; 888  :         /* attempt to determine the end of Linux kernel memory */
; 889  :         //phys_end_kernel = virt_to_phys((void *)PAGE_OFFSET) +
; 890  :         //  (num_physpages << PAGE_SHIFT);
; 891  : 
; 892  :         //if (phys_end_kernel > block_start[bi])
; 893  :         //{
; 894  :         //  if (allowOverlap == 0)
; 895  :         //  {
; 896  :         //      __E("CMEM phys_start (%#lx) overlaps kernel (%#lx -> %#lx)\n",
; 897  :         //          block_start[bi], virt_to_phys((void *)PAGE_OFFSET), phys_end_kernel);
; 898  :         //      err = 0;
; 899  :         //      goto fail_after_create;
; 900  :         //  }
; 901  :         //  else
; 902  :         //  {
; 903  :         //      printk("CMEM Range Overlaps Kernel Physical - allowing overlap\n");
; 904  :         //      printk("CMEM phys_start (%#lx) overlaps kernel (%#lx -> %#lx)\n",
; 905  :         //          block_start[bi], virt_to_phys((void *)PAGE_OFFSET), phys_end_kernel);
; 906  :         //  }
; 907  :         //}
; 908  : 
; 909  :         /* Initialize the top memory chunk in which to put the pools */
; 910  :         //#ifdef NOCACHE
; 911  :         //    block_virtp[bi] = (unsigned long) ioremap_nocache(block_start[bi], length);
; 912  :         //#else
; 913  :         //    block_virtp[bi] = (unsigned long) ioremap_cached(block_start[bi], length);
; 914  :         //#endif
; 915  :         if (block_start[bi]) {

  008e4	e59d1048	 ldr         r1, [sp, #0x48]
  008e8	e3a03004	 mov         r3, #4
  008ec	e0020391	 mul         r2, r1, r3
  008f0	e59f3944	 ldr         r3, [pc, #0x944]
  008f4	e0833002	 add         r3, r3, r2
  008f8	e5933000	 ldr         r3, [r3]
  008fc	e3530000	 cmp         r3, #0
  00900	0a00001d	 beq         |$LN21@CMK_Init|

; 916  :             // physical address specified in registry (hole was punched in
; 917  :             // address table in config.bib) - use it directly
; 918  :             // HACKHACKHACK!!!! - This is a big security risk.  Either remove
; 919  :             // this feature or add a check on the allowable physical address
; 920  :             // range.
; 921  :             //
; 922  :             PHYSICAL_ADDRESS pa = {block_start[bi], 0};

  00904	e59d1048	 ldr         r1, [sp, #0x48]
  00908	e3a03004	 mov         r3, #4
  0090c	e0020391	 mul         r2, r1, r3
  00910	e59f3924	 ldr         r3, [pc, #0x924]
  00914	e0833002	 add         r3, r3, r2
  00918	e5933000	 ldr         r3, [r3]
  0091c	e58d3054	 str         r3, [sp, #0x54]
  00920	e3a03000	 mov         r3, #0
  00924	e58d3058	 str         r3, [sp, #0x58]

; 923  : #ifdef NOCACHE
; 924  :             block_virtp[bi] = (unsigned long)MmMapIoSpace(pa, length, FALSE);

  00928	e3a03000	 mov         r3, #0
  0092c	e59d200c	 ldr         r2, [sp, #0xC]
  00930	e59d0054	 ldr         r0, [sp, #0x54]
  00934	e59d1058	 ldr         r1, [sp, #0x58]
  00938	eb000000	 bl          MmMapIoSpace
  0093c	e58d02f8	 str         r0, [sp, #0x2F8]
  00940	e59d1048	 ldr         r1, [sp, #0x48]
  00944	e3a03004	 mov         r3, #4
  00948	e0020391	 mul         r2, r1, r3
  0094c	e59f38c8	 ldr         r3, [pc, #0x8C8]
  00950	e0832002	 add         r2, r3, r2
  00954	e59d32f8	 ldr         r3, [sp, #0x2F8]
  00958	e5823000	 str         r3, [r2]

; 925  : #else
; 926  :             block_virtp[bi] = (unsigned long)MmMapIoSpace(pa, length, TRUE);
; 927  : #endif // NOCACHE
; 928  :             mem_alloc_type[bi] = MMMAPIOSPACE;

  0095c	e59d1048	 ldr         r1, [sp, #0x48]
  00960	e3a03004	 mov         r3, #4
  00964	e0020391	 mul         r2, r1, r3
  00968	e59f38b0	 ldr         r3, [pc, #0x8B0]
  0096c	e0832002	 add         r2, r3, r2
  00970	e3a03000	 mov         r3, #0
  00974	e5823000	 str         r3, [r2]

; 929  :         }
; 930  :         else {

  00978	ea00006b	 b           |$LN20@CMK_Init|
  0097c		 |$LN21@CMK_Init|

; 931  :             // user did not specify a fixed physical address - let
; 932  :             // AllocPhysMem() decide where to allocate memory. Memory
; 933  :             // allocated this way is always uncached.
; 934  :             //
; 935  :             // block_virtp[bi] = (unsigned long)AllocPhysMem(length,
; 936  :             //         PAGE_READWRITE, gdwPageSize, 0, &block_start[bi]);
; 937  :             // block_virtp[bi] = (unsigned long)AllocPhysMem(length,
; 938  :             //         PAGE_READWRITE, 0, 0, &block_start[bi]);
; 939  : #define PHYS_ALLOC_MEM_ALIGN 0x10000
; 940  :             // hack: dsplink like the physical address which is 64k aligned,
; 941  :             // but AllocPhysMem seems to only care if the virtual address
; 942  :             // is aligned, so we have to adjust the physical address manually.
; 943  :             //
; 944  :             real_block_virtp[bi] = (unsigned long)AllocPhysMem(length +
; 945  :                     PHYS_ALLOC_MEM_ALIGN, PAGE_READWRITE, PHYS_ALLOC_MEM_ALIGN,
; 946  :                     0, &real_block_start[bi]);

  0097c	e59d1048	 ldr         r1, [sp, #0x48]
  00980	e3a03004	 mov         r3, #4
  00984	e0020391	 mul         r2, r1, r3
  00988	e59f3908	 ldr         r3, [pc, #0x908]
  0098c	e0833002	 add         r3, r3, r2
  00990	e58d3000	 str         r3, [sp]
  00994	e3a03000	 mov         r3, #0
  00998	e3a02801	 mov         r2, #1, 16
  0099c	e3a01004	 mov         r1, #4
  009a0	e59d000c	 ldr         r0, [sp, #0xC]
  009a4	e2800801	 add         r0, r0, #1, 16
  009a8	eb000000	 bl          AllocPhysMem
  009ac	e58d02fc	 str         r0, [sp, #0x2FC]
  009b0	e59d1048	 ldr         r1, [sp, #0x48]
  009b4	e3a03004	 mov         r3, #4
  009b8	e0020391	 mul         r2, r1, r3
  009bc	e59f38d8	 ldr         r3, [pc, #0x8D8]
  009c0	e0832002	 add         r2, r3, r2
  009c4	e59d32fc	 ldr         r3, [sp, #0x2FC]
  009c8	e5823000	 str         r3, [r2]

; 947  :             block_start[bi] = (real_block_start[bi] &
; 948  :                     (PHYS_ALLOC_MEM_ALIGN - 1)) ?
; 949  :                 (real_block_start[bi] & ~(PHYS_ALLOC_MEM_ALIGN - 1)) +
; 950  :                     PHYS_ALLOC_MEM_ALIGN
; 951  :                 : real_block_start[bi];

  009cc	e59d1048	 ldr         r1, [sp, #0x48]
  009d0	e3a03004	 mov         r3, #4
  009d4	e0020391	 mul         r2, r1, r3
  009d8	e59f38b8	 ldr         r3, [pc, #0x8B8]
  009dc	e0833002	 add         r3, r3, r2
  009e0	e5932000	 ldr         r2, [r3]
  009e4	e3a03cff	 mov         r3, #0xFF, 24
  009e8	e38330ff	 orr         r3, r3, #0xFF
  009ec	e1120003	 tst         r2, r3
  009f0	0a00000b	 beq         |$LN40@CMK_Init|
  009f4	e59d1048	 ldr         r1, [sp, #0x48]
  009f8	e3a03004	 mov         r3, #4
  009fc	e0020391	 mul         r2, r1, r3
  00a00	e59f3890	 ldr         r3, [pc, #0x890]
  00a04	e0833002	 add         r3, r3, r2
  00a08	e5932000	 ldr         r2, [r3]
  00a0c	e3e03cff	 mvn         r3, #0xFF, 24
  00a10	e22330ff	 eor         r3, r3, #0xFF
  00a14	e0023003	 and         r3, r2, r3
  00a18	e2833801	 add         r3, r3, #1, 16
  00a1c	e58d3300	 str         r3, [sp, #0x300]
  00a20	ea000006	 b           |$LN41@CMK_Init|
  00a24		 |$LN40@CMK_Init|
  00a24	e59d1048	 ldr         r1, [sp, #0x48]
  00a28	e3a03004	 mov         r3, #4
  00a2c	e0020391	 mul         r2, r1, r3
  00a30	e59f3860	 ldr         r3, [pc, #0x860]
  00a34	e0833002	 add         r3, r3, r2
  00a38	e5933000	 ldr         r3, [r3]
  00a3c	e58d3300	 str         r3, [sp, #0x300]
  00a40		 |$LN41@CMK_Init|
  00a40	e59d1048	 ldr         r1, [sp, #0x48]
  00a44	e3a03004	 mov         r3, #4
  00a48	e0020391	 mul         r2, r1, r3
  00a4c	e59f37e8	 ldr         r3, [pc, #0x7E8]
  00a50	e0832002	 add         r2, r3, r2
  00a54	e59d3300	 ldr         r3, [sp, #0x300]
  00a58	e5823000	 str         r3, [r2]

; 952  : 
; 953  :             block_virtp[bi] = real_block_virtp[bi] +
; 954  :                 (block_start[bi] - real_block_start[bi]);

  00a5c	e59d1048	 ldr         r1, [sp, #0x48]
  00a60	e3a03004	 mov         r3, #4
  00a64	e0020391	 mul         r2, r1, r3
  00a68	e59f382c	 ldr         r3, [pc, #0x82C]
  00a6c	e083e002	 add         lr, r3, r2
  00a70	e59d1048	 ldr         r1, [sp, #0x48]
  00a74	e3a03004	 mov         r3, #4
  00a78	e0020391	 mul         r2, r1, r3
  00a7c	e59f37b8	 ldr         r3, [pc, #0x7B8]
  00a80	e0830002	 add         r0, r3, r2
  00a84	e59d1048	 ldr         r1, [sp, #0x48]
  00a88	e3a03004	 mov         r3, #4
  00a8c	e0020391	 mul         r2, r1, r3
  00a90	e59f3800	 ldr         r3, [pc, #0x800]
  00a94	e0833002	 add         r3, r3, r2
  00a98	e5902000	 ldr         r2, [r0]
  00a9c	e5933000	 ldr         r3, [r3]
  00aa0	e0422003	 sub         r2, r2, r3
  00aa4	e59e3000	 ldr         r3, [lr]
  00aa8	e0830002	 add         r0, r3, r2
  00aac	e59d1048	 ldr         r1, [sp, #0x48]
  00ab0	e3a03004	 mov         r3, #4
  00ab4	e0020391	 mul         r2, r1, r3
  00ab8	e59f375c	 ldr         r3, [pc, #0x75C]
  00abc	e0833002	 add         r3, r3, r2
  00ac0	e5830000	 str         r0, [r3]

; 955  : 
; 956  :             block_end[bi] += block_start[bi];

  00ac4	e59d1048	 ldr         r1, [sp, #0x48]
  00ac8	e3a03004	 mov         r3, #4
  00acc	e0020391	 mul         r2, r1, r3
  00ad0	e59f3768	 ldr         r3, [pc, #0x768]
  00ad4	e0830002	 add         r0, r3, r2
  00ad8	e59d1048	 ldr         r1, [sp, #0x48]
  00adc	e3a03004	 mov         r3, #4
  00ae0	e0020391	 mul         r2, r1, r3
  00ae4	e59f3750	 ldr         r3, [pc, #0x750]
  00ae8	e0833002	 add         r3, r3, r2
  00aec	e5902000	 ldr         r2, [r0]
  00af0	e5933000	 ldr         r3, [r3]
  00af4	e0820003	 add         r0, r2, r3
  00af8	e59d1048	 ldr         r1, [sp, #0x48]
  00afc	e3a03004	 mov         r3, #4
  00b00	e0020391	 mul         r2, r1, r3
  00b04	e59f3734	 ldr         r3, [pc, #0x734]
  00b08	e0833002	 add         r3, r3, r2
  00b0c	e5830000	 str         r0, [r3]

; 957  :             mem_alloc_type[bi] = ALLOCPHYSMEM;

  00b10	e59d1048	 ldr         r1, [sp, #0x48]
  00b14	e3a03004	 mov         r3, #4
  00b18	e0020391	 mul         r2, r1, r3
  00b1c	e59f36fc	 ldr         r3, [pc, #0x6FC]
  00b20	e0832002	 add         r2, r3, r2
  00b24	e3a03001	 mov         r3, #1
  00b28	e5823000	 str         r3, [r2]
  00b2c		 |$LN20@CMK_Init|

; 958  :         }
; 959  : 
; 960  :         if (block_virtp[bi] == 0) {

  00b2c	e59d1048	 ldr         r1, [sp, #0x48]
  00b30	e3a03004	 mov         r3, #4
  00b34	e0020391	 mul         r2, r1, r3
  00b38	e59f36dc	 ldr         r3, [pc, #0x6DC]
  00b3c	e0833002	 add         r3, r3, r2
  00b40	e5933000	 ldr         r3, [r3]
  00b44	e3530000	 cmp         r3, #0
  00b48	1a00000c	 bne         |$LN19@CMK_Init|

; 961  : #ifdef NOCACHE
; 962  :             __E("Failed to allocate contiguous memory (non-cached) (%#lx, %ld)\n",
; 963  :                     block_start[bi], length);

  00b4c	e59d200c	 ldr         r2, [sp, #0xC]
  00b50	e59d0048	 ldr         r0, [sp, #0x48]
  00b54	e3a03004	 mov         r3, #4
  00b58	e0010390	 mul         r1, r0, r3
  00b5c	e59f36d8	 ldr         r3, [pc, #0x6D8]
  00b60	e0833001	 add         r3, r3, r1
  00b64	e5931000	 ldr         r1, [r3]
  00b68	e59f0724	 ldr         r0, [pc, #0x724]
  00b6c	eb000000	 bl          NKDbgPrintfW

; 964  : #else
; 965  :             __E("Failed to allocate contiguous memory (cached) (%#lx, %ld)\n",
; 966  :                     block_start[bi], length);
; 967  : #endif
; 968  :             err = 0;

  00b70	e3a03000	 mov         r3, #0
  00b74	e58d3044	 str         r3, [sp, #0x44]

; 969  :             goto fail_after_create;

  00b78	ea00019d	 b           |$fail_after_create$40493|

; 970  :         }
; 971  :         else {

  00b7c	ea00000e	 b           |$LN18@CMK_Init|
  00b80		 |$LN19@CMK_Init|

; 972  : #ifdef NOCACHE
; 973  :             __D("Allocate contiguous memory (non-cached)(%#lx, %ld)=%#lx\n",
; 974  :                     block_start[bi], length, block_virtp[bi]);

  00b80	e59d1048	 ldr         r1, [sp, #0x48]
  00b84	e3a03004	 mov         r3, #4
  00b88	e0020391	 mul         r2, r1, r3
  00b8c	e59f3688	 ldr         r3, [pc, #0x688]
  00b90	e0833002	 add         r3, r3, r2
  00b94	e5933000	 ldr         r3, [r3]
  00b98	e59d200c	 ldr         r2, [sp, #0xC]
  00b9c	e59de048	 ldr         lr, [sp, #0x48]
  00ba0	e3a01004	 mov         r1, #4
  00ba4	e000019e	 mul         r0, lr, r1
  00ba8	e59f168c	 ldr         r1, [pc, #0x68C]
  00bac	e0811000	 add         r1, r1, r0
  00bb0	e5911000	 ldr         r1, [r1]
  00bb4	e59f06d4	 ldr         r0, [pc, #0x6D4]
  00bb8	eb000000	 bl          NKDbgPrintfW
  00bbc		 |$LN18@CMK_Init|

; 975  : #else
; 976  :             __D("allocate contiguous memory (cached)(%#lx, %ld)=%#lx\n",
; 977  :                     block_start[bi], length, block_virtp[bi]);
; 978  : #endif
; 979  :         }
; 980  : 
; 981  :         block_virtoff[bi] = block_virtp[bi] - block_start[bi];

  00bbc	e59d1048	 ldr         r1, [sp, #0x48]
  00bc0	e3a03004	 mov         r3, #4
  00bc4	e0020391	 mul         r2, r1, r3
  00bc8	e59f364c	 ldr         r3, [pc, #0x64C]
  00bcc	e0830002	 add         r0, r3, r2
  00bd0	e59d1048	 ldr         r1, [sp, #0x48]
  00bd4	e3a03004	 mov         r3, #4
  00bd8	e0020391	 mul         r2, r1, r3
  00bdc	e59f3658	 ldr         r3, [pc, #0x658]
  00be0	e0833002	 add         r3, r3, r2
  00be4	e5902000	 ldr         r2, [r0]
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e0420003	 sub         r0, r2, r3
  00bf0	e59d1048	 ldr         r1, [sp, #0x48]
  00bf4	e3a03004	 mov         r3, #4
  00bf8	e0020391	 mul         r2, r1, r3
  00bfc	e59f3688	 ldr         r3, [pc, #0x688]
  00c00	e0833002	 add         r3, r3, r2
  00c04	e5830000	 str         r0, [r3]

; 982  :         block_virtend[bi] = block_virtp[bi] + length;

  00c08	e59d1048	 ldr         r1, [sp, #0x48]
  00c0c	e3a03004	 mov         r3, #4
  00c10	e0020391	 mul         r2, r1, r3
  00c14	e59f3600	 ldr         r3, [pc, #0x600]
  00c18	e0833002	 add         r3, r3, r2
  00c1c	e5932000	 ldr         r2, [r3]
  00c20	e59d300c	 ldr         r3, [sp, #0xC]
  00c24	e0820003	 add         r0, r2, r3
  00c28	e59d1048	 ldr         r1, [sp, #0x48]
  00c2c	e3a03004	 mov         r3, #4
  00c30	e0020391	 mul         r2, r1, r3
  00c34	e59f364c	 ldr         r3, [pc, #0x64C]
  00c38	e0833002	 add         r3, r3, r2
  00c3c	e5830000	 str         r0, [r3]

; 983  : 
; 984  :         memset((PUCHAR)block_virtp[bi], 0, length);

  00c40	e59d200c	 ldr         r2, [sp, #0xC]
  00c44	e3a01000	 mov         r1, #0
  00c48	e59de048	 ldr         lr, [sp, #0x48]
  00c4c	e3a03004	 mov         r3, #4
  00c50	e000039e	 mul         r0, lr, r3
  00c54	e59f35c0	 ldr         r3, [pc, #0x5C0]
  00c58	e0833000	 add         r3, r3, r0
  00c5c	e5930000	 ldr         r0, [r3]
  00c60	eb000000	 bl          memset

; 985  : 
; 986  :         /* Parse and allocate the pools */
; 987  :         for (i = 0; i < npools[bi]; i++) {

  00c64	e3a03000	 mov         r3, #0
  00c68	e58d3014	 str         r3, [sp, #0x14]
  00c6c	ea000002	 b           |$LN17@CMK_Init|
  00c70		 |$LN16@CMK_Init|
  00c70	e59d3014	 ldr         r3, [sp, #0x14]
  00c74	e2833001	 add         r3, r3, #1
  00c78	e58d3014	 str         r3, [sp, #0x14]
  00c7c		 |$LN17@CMK_Init|
  00c7c	e59d1048	 ldr         r1, [sp, #0x48]
  00c80	e3a03004	 mov         r3, #4
  00c84	e0020391	 mul         r2, r1, r3
  00c88	e59f35a8	 ldr         r3, [pc, #0x5A8]
  00c8c	e0833002	 add         r3, r3, r2
  00c90	e59d2014	 ldr         r2, [sp, #0x14]
  00c94	e5933000	 ldr         r3, [r3]
  00c98	e1520003	 cmp         r2, r3
  00c9c	aa00006a	 bge         |$LN15@CMK_Init|

; 988  :             TCHAR tszRegKey[256];
; 989  :             dwDataSize = sizeof(pool_num_buffers);

  00ca0	e3a03004	 mov         r3, #4
  00ca4	e58d304c	 str         r3, [sp, #0x4C]

; 990  :             if (StringCchPrintf(tszRegKey, 256, TEXT("%s%d_%s%d"),
; 991  :                         CMEMK_REG_KEY_BLOCK, bi, CMEMK_REG_KEY_NUM_BUFFERS, i)
; 992  :                     != S_OK) {

  00ca8	e59d3014	 ldr         r3, [sp, #0x14]
  00cac	e58d3008	 str         r3, [sp, #8]
  00cb0	e59f35cc	 ldr         r3, [pc, #0x5CC]
  00cb4	e58d3004	 str         r3, [sp, #4]
  00cb8	e59d3048	 ldr         r3, [sp, #0x48]
  00cbc	e58d3000	 str         r3, [sp]
  00cc0	e59f35b0	 ldr         r3, [pc, #0x5B0]
  00cc4	e59f25a8	 ldr         r2, [pc, #0x5A8]
  00cc8	e3a01c01	 mov         r1, #1, 24
  00ccc	e28d005c	 add         r0, sp, #0x5C
  00cd0	eb000000	 bl          StringCchPrintfW
  00cd4	e58d0304	 str         r0, [sp, #0x304]
  00cd8	e59d3304	 ldr         r3, [sp, #0x304]
  00cdc	e3530000	 cmp         r3, #0
  00ce0	0a000001	 beq         |$LN14@CMK_Init|

; 993  :                 RETAILMSG(1, (TEXT("ERROR: CMEMK init(): StringCchPrintf (NUM_BUFFERS) failed!!!\r\n")));

  00ce4	e59f0594	 ldr         r0, [pc, #0x594]
  00ce8	eb000000	 bl          NKDbgPrintfW
  00cec		 |$LN14@CMK_Init|

; 994  :             }
; 995  :             if (RegQueryValueEx(hKey, tszRegKey, NULL, NULL,
; 996  :                         (LPBYTE)&pool_num_buffers, &dwDataSize) !=
; 997  :                     ERROR_SUCCESS) {

  00cec	e28d304c	 add         r3, sp, #0x4C
  00cf0	e58d3004	 str         r3, [sp, #4]
  00cf4	e28d3018	 add         r3, sp, #0x18
  00cf8	e58d3000	 str         r3, [sp]
  00cfc	e3a03000	 mov         r3, #0
  00d00	e3a02000	 mov         r2, #0
  00d04	e28d105c	 add         r1, sp, #0x5C
  00d08	e59d0010	 ldr         r0, [sp, #0x10]
  00d0c	eb000000	 bl          RegQueryValueExW
  00d10	e58d0308	 str         r0, [sp, #0x308]
  00d14	e59d3308	 ldr         r3, [sp, #0x308]
  00d18	e3530000	 cmp         r3, #0
  00d1c	0a000004	 beq         |$LN13@CMK_Init|

; 998  :                 __E("CMEMK: cannot open registry key: %s!\n", tszRegKey);

  00d20	e28d105c	 add         r1, sp, #0x5C
  00d24	e59f0540	 ldr         r0, [pc, #0x540]
  00d28	eb000000	 bl          NKDbgPrintfW

; 999  :                 pool_num_buffers = 0;

  00d2c	e3a03000	 mov         r3, #0
  00d30	e58d3018	 str         r3, [sp, #0x18]
  00d34		 |$LN13@CMK_Init|

; 1000 :             }
; 1001 : 
; 1002 :             if (StringCchPrintf(tszRegKey, 256, TEXT("%s%d_%s%d"),
; 1003 :                         CMEMK_REG_KEY_BLOCK, bi, CMEMK_REG_KEY_POOL_SIZE, i)
; 1004 :                     != S_OK) {

  00d34	e59d3014	 ldr         r3, [sp, #0x14]
  00d38	e58d3008	 str         r3, [sp, #8]
  00d3c	e59f3538	 ldr         r3, [pc, #0x538]
  00d40	e58d3004	 str         r3, [sp, #4]
  00d44	e59d3048	 ldr         r3, [sp, #0x48]
  00d48	e58d3000	 str         r3, [sp]
  00d4c	e59f3524	 ldr         r3, [pc, #0x524]
  00d50	e59f251c	 ldr         r2, [pc, #0x51C]
  00d54	e3a01c01	 mov         r1, #1, 24
  00d58	e28d005c	 add         r0, sp, #0x5C
  00d5c	eb000000	 bl          StringCchPrintfW
  00d60	e58d030c	 str         r0, [sp, #0x30C]
  00d64	e59d330c	 ldr         r3, [sp, #0x30C]
  00d68	e3530000	 cmp         r3, #0
  00d6c	0a000001	 beq         |$LN12@CMK_Init|

; 1005 :                 RETAILMSG(1, (TEXT("ERROR: CMEMK init(): StringCchPrintf (POOL_SIZE) failed!!!\r\n")));

  00d70	e59f04f8	 ldr         r0, [pc, #0x4F8]
  00d74	eb000000	 bl          NKDbgPrintfW
  00d78		 |$LN12@CMK_Init|

; 1006 :             }
; 1007 :             dwDataSize = sizeof(pool_size);

  00d78	e3a03004	 mov         r3, #4
  00d7c	e58d304c	 str         r3, [sp, #0x4C]

; 1008 :             if (RegQueryValueEx(hKey, tszRegKey, NULL, NULL,
; 1009 :                         (LPBYTE)&pool_size, &dwDataSize) != ERROR_SUCCESS) {

  00d80	e28d304c	 add         r3, sp, #0x4C
  00d84	e58d3004	 str         r3, [sp, #4]
  00d88	e28d3040	 add         r3, sp, #0x40
  00d8c	e58d3000	 str         r3, [sp]
  00d90	e3a03000	 mov         r3, #0
  00d94	e3a02000	 mov         r2, #0
  00d98	e28d105c	 add         r1, sp, #0x5C
  00d9c	e59d0010	 ldr         r0, [sp, #0x10]
  00da0	eb000000	 bl          RegQueryValueExW
  00da4	e58d0310	 str         r0, [sp, #0x310]
  00da8	e59d3310	 ldr         r3, [sp, #0x310]
  00dac	e3530000	 cmp         r3, #0
  00db0	0a000004	 beq         |$LN11@CMK_Init|

; 1010 :                 __E("CMEMK: cannot open registry key: %s!\n", tszRegKey);

  00db4	e28d105c	 add         r1, sp, #0x5C
  00db8	e59f04ac	 ldr         r0, [pc, #0x4AC]
  00dbc	eb000000	 bl          NKDbgPrintfW

; 1011 :                 pool_size = 0;

  00dc0	e3a03000	 mov         r3, #0
  00dc4	e58d3040	 str         r3, [sp, #0x40]
  00dc8		 |$LN11@CMK_Init|

; 1012 :             }
; 1013 : 
; 1014 :             if (alloc_pool(bi, i, pool_num_buffers, pool_size, NULL) < 0) {

  00dc8	e3a03000	 mov         r3, #0
  00dcc	e58d3000	 str         r3, [sp]
  00dd0	e59d3040	 ldr         r3, [sp, #0x40]
  00dd4	e59d2018	 ldr         r2, [sp, #0x18]
  00dd8	e59d1014	 ldr         r1, [sp, #0x14]
  00ddc	e59d0048	 ldr         r0, [sp, #0x48]
  00de0	eb000000	 bl          alloc_pool
  00de4	e58d0314	 str         r0, [sp, #0x314]
  00de8	e59d3314	 ldr         r3, [sp, #0x314]
  00dec	e3530000	 cmp         r3, #0
  00df0	aa000006	 bge         |$LN10@CMK_Init|

; 1015 :                 __E("Failed to alloc pool of size %d and number of buffers %d\n",
; 1016 :                         pool_size, pool_num_buffers);

  00df4	e59d2018	 ldr         r2, [sp, #0x18]
  00df8	e59d1040	 ldr         r1, [sp, #0x40]
  00dfc	e59f0464	 ldr         r0, [pc, #0x464]
  00e00	eb000000	 bl          NKDbgPrintfW

; 1017 :                 err = 0;

  00e04	e3a03000	 mov         r3, #0
  00e08	e58d3044	 str         r3, [sp, #0x44]

; 1018 :                 goto fail_after_ioremap;

  00e0c	ea0000c9	 b           |$fail_after_ioremap$40540|
  00e10		 |$LN10@CMK_Init|

; 1019 :             }
; 1020 : 
; 1021 :             total_num_buffers[bi] += pool_num_buffers;

  00e10	e59d1048	 ldr         r1, [sp, #0x48]
  00e14	e3a03004	 mov         r3, #4
  00e18	e0020391	 mul         r2, r1, r3
  00e1c	e59f3440	 ldr         r3, [pc, #0x440]
  00e20	e0833002	 add         r3, r3, r2
  00e24	e5932000	 ldr         r2, [r3]
  00e28	e59d3018	 ldr         r3, [sp, #0x18]
  00e2c	e0820003	 add         r0, r2, r3
  00e30	e59d1048	 ldr         r1, [sp, #0x48]
  00e34	e3a03004	 mov         r3, #4
  00e38	e0020391	 mul         r2, r1, r3
  00e3c	e59f3420	 ldr         r3, [pc, #0x420]
  00e40	e0833002	 add         r3, r3, r2
  00e44	e5830000	 str         r0, [r3]

; 1022 :         }

  00e48	eaffff88	 b           |$LN16@CMK_Init|
  00e4c		 |$LN15@CMK_Init|

; 1023 : 
; 1024 :         /* use whatever is left for the heap */
; 1025 :         heap_size[bi] = block_avail_size[bi] & PAGE_MASK;

  00e4c	e59d1048	 ldr         r1, [sp, #0x48]
  00e50	e3a03004	 mov         r3, #4
  00e54	e0020391	 mul         r2, r1, r3
  00e58	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00e5c	e0831002	 add         r1, r3, r2
  00e60	e59f33f8	 ldr         r3, [pc, #0x3F8]
  00e64	e5933000	 ldr         r3, [r3]
  00e68	e2433001	 sub         r3, r3, #1
  00e6c	e1e02003	 mvn         r2, r3
  00e70	e5913000	 ldr         r3, [r1]
  00e74	e0030002	 and         r0, r3, r2
  00e78	e59d1048	 ldr         r1, [sp, #0x48]
  00e7c	e3a03004	 mov         r3, #4
  00e80	e0020391	 mul         r2, r1, r3
  00e84	e59f33c0	 ldr         r3, [pc, #0x3C0]
  00e88	e0833002	 add         r3, r3, r2
  00e8c	e5830000	 str         r0, [r3]

; 1026 :         heap_pool[bi] = npools[bi];

  00e90	e59d1048	 ldr         r1, [sp, #0x48]
  00e94	e3a03004	 mov         r3, #4
  00e98	e0020391	 mul         r2, r1, r3
  00e9c	e59f3394	 ldr         r3, [pc, #0x394]
  00ea0	e0830002	 add         r0, r3, r2
  00ea4	e59d1048	 ldr         r1, [sp, #0x48]
  00ea8	e3a03004	 mov         r3, #4
  00eac	e0020391	 mul         r2, r1, r3
  00eb0	e59f33a4	 ldr         r3, [pc, #0x3A4]
  00eb4	e0832002	 add         r2, r3, r2
  00eb8	e5903000	 ldr         r3, [r0]
  00ebc	e5823000	 str         r3, [r2]

; 1027 :         if (heap_size[bi] > 0) {

  00ec0	e59d1048	 ldr         r1, [sp, #0x48]
  00ec4	e3a03004	 mov         r3, #4
  00ec8	e0020391	 mul         r2, r1, r3
  00ecc	e59f3378	 ldr         r3, [pc, #0x378]
  00ed0	e0833002	 add         r3, r3, r2
  00ed4	e5933000	 ldr         r3, [r3]
  00ed8	e3530000	 cmp         r3, #0
  00edc	9a000059	 bls         |$LN9@CMK_Init|

; 1028 :             err = alloc_pool(bi, heap_pool[bi], 1, heap_size[bi],
; 1029 :                     &heap_virtp[bi]);

  00ee0	e59d1048	 ldr         r1, [sp, #0x48]
  00ee4	e3a03004	 mov         r3, #4
  00ee8	e0020391	 mul         r2, r1, r3
  00eec	e59f335c	 ldr         r3, [pc, #0x35C]
  00ef0	e0833002	 add         r3, r3, r2
  00ef4	e58d3000	 str         r3, [sp]
  00ef8	e59d1048	 ldr         r1, [sp, #0x48]
  00efc	e3a03004	 mov         r3, #4
  00f00	e0020391	 mul         r2, r1, r3
  00f04	e59f3340	 ldr         r3, [pc, #0x340]
  00f08	e0833002	 add         r3, r3, r2
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e3a02001	 mov         r2, #1
  00f14	e59de048	 ldr         lr, [sp, #0x48]
  00f18	e3a01004	 mov         r1, #4
  00f1c	e000019e	 mul         r0, lr, r1
  00f20	e59f1334	 ldr         r1, [pc, #0x334]
  00f24	e0811000	 add         r1, r1, r0
  00f28	e5911000	 ldr         r1, [r1]
  00f2c	e59d0048	 ldr         r0, [sp, #0x48]
  00f30	eb000000	 bl          alloc_pool
  00f34	e58d0318	 str         r0, [sp, #0x318]
  00f38	e59d3318	 ldr         r3, [sp, #0x318]
  00f3c	e58d3044	 str         r3, [sp, #0x44]

; 1030 :             if (err < 0) {

  00f40	e59d3044	 ldr         r3, [sp, #0x44]
  00f44	e3530000	 cmp         r3, #0
  00f48	aa000008	 bge         |$LN8@CMK_Init|

; 1031 :                 __E("Failed to alloc heap of size %#lx\n", heap_size[bi]);

  00f4c	e59d1048	 ldr         r1, [sp, #0x48]
  00f50	e3a03004	 mov         r3, #4
  00f54	e0020391	 mul         r2, r1, r3
  00f58	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00f5c	e0833002	 add         r3, r3, r2
  00f60	e5931000	 ldr         r1, [r3]
  00f64	e59f02ec	 ldr         r0, [pc, #0x2EC]
  00f68	eb000000	 bl          NKDbgPrintfW

; 1032 :                 goto fail_after_ioremap;

  00f6c	ea000071	 b           |$fail_after_ioremap$40540|
  00f70		 |$LN8@CMK_Init|

; 1033 :             }
; 1034 :             __D("allocated heap buffer %#lx of size %#lx\n", heap_virtp[bi],
; 1035 :                     heap_size[bi]);

  00f70	e59d1048	 ldr         r1, [sp, #0x48]
  00f74	e3a03004	 mov         r3, #4
  00f78	e0020391	 mul         r2, r1, r3
  00f7c	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00f80	e0833002	 add         r3, r3, r2
  00f84	e5932000	 ldr         r2, [r3]
  00f88	e59d0048	 ldr         r0, [sp, #0x48]
  00f8c	e3a03004	 mov         r3, #4
  00f90	e0010390	 mul         r1, r0, r3
  00f94	e59f32b4	 ldr         r3, [pc, #0x2B4]
  00f98	e0833001	 add         r3, r3, r1
  00f9c	e5931000	 ldr         r1, [r3]
  00fa0	e59f02ac	 ldr         r0, [pc, #0x2AC]
  00fa4	eb000000	 bl          NKDbgPrintfW

; 1036 :             header = (HeapMem_Header *)heap_virtp[bi];

  00fa8	e59d1048	 ldr         r1, [sp, #0x48]
  00fac	e3a03004	 mov         r3, #4
  00fb0	e0020391	 mul         r2, r1, r3
  00fb4	e59f3294	 ldr         r3, [pc, #0x294]
  00fb8	e0833002	 add         r3, r3, r2
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e58d3050	 str         r3, [sp, #0x50]

; 1037 :             heap_head[bi].next = header;

  00fc4	e59d1048	 ldr         r1, [sp, #0x48]
  00fc8	e3a03008	 mov         r3, #8
  00fcc	e0020391	 mul         r2, r1, r3
  00fd0	e59f326c	 ldr         r3, [pc, #0x26C]
  00fd4	e0832002	 add         r2, r3, r2
  00fd8	e59d3050	 ldr         r3, [sp, #0x50]
  00fdc	e5823000	 str         r3, [r2]

; 1038 :             heap_head[bi].size = heap_size[bi];

  00fe0	e59d1048	 ldr         r1, [sp, #0x48]
  00fe4	e3a03004	 mov         r3, #4
  00fe8	e0020391	 mul         r2, r1, r3
  00fec	e59f3258	 ldr         r3, [pc, #0x258]
  00ff0	e0830002	 add         r0, r3, r2
  00ff4	e59d1048	 ldr         r1, [sp, #0x48]
  00ff8	e3a03008	 mov         r3, #8
  00ffc	e0020391	 mul         r2, r1, r3
  01000	e59f323c	 ldr         r3, [pc, #0x23C]
  01004	e0833002	 add         r3, r3, r2
  01008	e2832004	 add         r2, r3, #4
  0100c	e5903000	 ldr         r3, [r0]
  01010	e5823000	 str         r3, [r2]

; 1039 :             header->next = NULL;

  01014	e59d2050	 ldr         r2, [sp, #0x50]
  01018	e3a03000	 mov         r3, #0
  0101c	e5823000	 str         r3, [r2]

; 1040 :             header->size = heap_size[bi];

  01020	e59d1048	 ldr         r1, [sp, #0x48]
  01024	e3a03004	 mov         r3, #4
  01028	e0020391	 mul         r2, r1, r3
  0102c	e59f3218	 ldr         r3, [pc, #0x218]
  01030	e0831002	 add         r1, r3, r2
  01034	e59d3050	 ldr         r3, [sp, #0x50]
  01038	e2832004	 add         r2, r3, #4
  0103c	e5913000	 ldr         r3, [r1]
  01040	e5823000	 str         r3, [r2]

; 1041 :         }
; 1042 :         else {

  01044	ea000010	 b           |$LN7@CMK_Init|
  01048		 |$LN9@CMK_Init|

; 1043 :             __D("no remaining memory for heap, no heap created for memory block %d\n", bi);

  01048	e59d1048	 ldr         r1, [sp, #0x48]
  0104c	e59f01f4	 ldr         r0, [pc, #0x1F4]
  01050	eb000000	 bl          NKDbgPrintfW

; 1044 :             heap_head[bi].next = NULL;

  01054	e59d1048	 ldr         r1, [sp, #0x48]
  01058	e3a03008	 mov         r3, #8
  0105c	e0020391	 mul         r2, r1, r3
  01060	e59f31dc	 ldr         r3, [pc, #0x1DC]
  01064	e0832002	 add         r2, r3, r2
  01068	e3a03000	 mov         r3, #0
  0106c	e5823000	 str         r3, [r2]

; 1045 :             heap_head[bi].next = 0;

  01070	e59d1048	 ldr         r1, [sp, #0x48]
  01074	e3a03008	 mov         r3, #8
  01078	e0020391	 mul         r2, r1, r3
  0107c	e59f31c0	 ldr         r3, [pc, #0x1C0]
  01080	e0832002	 add         r2, r3, r2
  01084	e3a03000	 mov         r3, #0
  01088	e5823000	 str         r3, [r2]
  0108c		 |$LN7@CMK_Init|

; 1046 :         }
; 1047 : 
; 1048 :         __D("cmem initialized %d pools between %#lx and %#lx\n", npools[bi],
; 1049 :                 block_start[bi], block_end[bi]);

  0108c	e59d1048	 ldr         r1, [sp, #0x48]
  01090	e3a03004	 mov         r3, #4
  01094	e0020391	 mul         r2, r1, r3
  01098	e59f31a0	 ldr         r3, [pc, #0x1A0]
  0109c	e0833002	 add         r3, r3, r2
  010a0	e5933000	 ldr         r3, [r3]
  010a4	e59d0048	 ldr         r0, [sp, #0x48]
  010a8	e3a02004	 mov         r2, #4
  010ac	e0010290	 mul         r1, r0, r2
  010b0	e59f2184	 ldr         r2, [pc, #0x184]
  010b4	e0822001	 add         r2, r2, r1
  010b8	e5922000	 ldr         r2, [r2]
  010bc	e59de048	 ldr         lr, [sp, #0x48]
  010c0	e3a01004	 mov         r1, #4
  010c4	e000019e	 mul         r0, lr, r1
  010c8	e59f1168	 ldr         r1, [pc, #0x168]
  010cc	e0811000	 add         r1, r1, r0
  010d0	e5911000	 ldr         r1, [r1]
  010d4	e59f0158	 ldr         r0, [pc, #0x158]
  010d8	eb000000	 bl          NKDbgPrintfW

; 1050 :     }

  010dc	eafffda2	 b           |$LN26@CMK_Init|
  010e0		 |$LN25@CMK_Init|

; 1051 : 
; 1052 :     /* Initialize list of mapped buffers */
; 1053 :     InitializeListHead(&mappedBufferList);

  010e0	e59f2148	 ldr         r2, [pc, #0x148]
  010e4	e59f3144	 ldr         r3, [pc, #0x144]
  010e8	e5832004	 str         r2, [r3, #4]
  010ec	e59f313c	 ldr         r3, [pc, #0x13C]
  010f0	e5932004	 ldr         r2, [r3, #4]
  010f4	e59f3134	 ldr         r3, [pc, #0x134]
  010f8	e5832000	 str         r2, [r3]

; 1054 : 
; 1055 :     __D("Successfully initialized module\n");

  010fc	e59f0128	 ldr         r0, [pc, #0x128]
  01100	eb000000	 bl          NKDbgPrintfW

; 1056 : 
; 1057 :     RegCloseKey(hKey);

  01104	e59d0010	 ldr         r0, [sp, #0x10]
  01108	eb000000	 bl          RegCloseKey

; 1058 :     CMKDevice.openCount = 0;

  0110c	e59f2114	 ldr         r2, [pc, #0x114]
  01110	e3a03000	 mov         r3, #0
  01114	e5823004	 str         r3, [r2, #4]

; 1059 :     CMKDevice.initialized = TRUE;

  01118	e59f2108	 ldr         r2, [pc, #0x108]
  0111c	e3a03001	 mov         r3, #1
  01120	e5823000	 str         r3, [r2]

; 1060 : 
; 1061 :     return (DWORD)&CMKDevice;

  01124	e59d025c	 ldr         r0, [sp, #0x25C]
  01128	eb000000	 bl          __security_check_cookie
  0112c	e59f30f4	 ldr         r3, [pc, #0xF4]
  01130	e58d3264	 str         r3, [sp, #0x264]
  01134	ea000034	 b           |$LN38@CMK_Init|
  01138		 |$fail_after_ioremap$40540|

; 1062 : 
; 1063 : 
; 1064 :   fail_after_ioremap:
; 1065 :     for (bi = 0; bi < NBLOCKS; bi++) {

  01138	e3a03000	 mov         r3, #0
  0113c	e58d3048	 str         r3, [sp, #0x48]
  01140	ea000002	 b           |$LN6@CMK_Init|
  01144		 |$LN5@CMK_Init|
  01144	e59d3048	 ldr         r3, [sp, #0x48]
  01148	e2833001	 add         r3, r3, #1
  0114c	e58d3048	 str         r3, [sp, #0x48]
  01150		 |$LN6@CMK_Init|
  01150	e59d3048	 ldr         r3, [sp, #0x48]
  01154	e3530002	 cmp         r3, #2
  01158	aa000025	 bge         |$LN4@CMK_Init|

; 1066 :         if (mem_alloc_type[bi] == MMMAPIOSPACE) {

  0115c	e59d1048	 ldr         r1, [sp, #0x48]
  01160	e3a03004	 mov         r3, #4
  01164	e0020391	 mul         r2, r1, r3
  01168	e59f30b0	 ldr         r3, [pc, #0xB0]
  0116c	e0833002	 add         r3, r3, r2
  01170	e5933000	 ldr         r3, [r3]
  01174	e3530000	 cmp         r3, #0
  01178	1a00000d	 bne         |$LN3@CMK_Init|

; 1067 :             MmUnmapIoSpace((PVOID)block_virtp[bi], block_avail_size[bi]);

  0117c	e59d1048	 ldr         r1, [sp, #0x48]
  01180	e3a03004	 mov         r3, #4
  01184	e0020391	 mul         r2, r1, r3
  01188	e59f3094	 ldr         r3, [pc, #0x94]
  0118c	e0833002	 add         r3, r3, r2
  01190	e5931000	 ldr         r1, [r3]
  01194	e59d0048	 ldr         r0, [sp, #0x48]
  01198	e3a03004	 mov         r3, #4
  0119c	e0020390	 mul         r2, r0, r3
  011a0	e59f3074	 ldr         r3, [pc, #0x74]
  011a4	e0833002	 add         r3, r3, r2
  011a8	e5930000	 ldr         r0, [r3]
  011ac	eb000000	 bl          MmUnmapIoSpace
  011b0	ea00000e	 b           |$LN2@CMK_Init|
  011b4		 |$LN3@CMK_Init|

; 1068 :         }
; 1069 :         else if (mem_alloc_type[bi] == ALLOCPHYSMEM) {

  011b4	e59d1048	 ldr         r1, [sp, #0x48]
  011b8	e3a03004	 mov         r3, #4
  011bc	e0020391	 mul         r2, r1, r3
  011c0	e59f3058	 ldr         r3, [pc, #0x58]
  011c4	e0833002	 add         r3, r3, r2
  011c8	e5933000	 ldr         r3, [r3]
  011cc	e3530001	 cmp         r3, #1
  011d0	1a000006	 bne         |$LN1@CMK_Init|

; 1070 :             FreePhysMem((LPVOID)block_virtp[bi]);

  011d4	e59d1048	 ldr         r1, [sp, #0x48]
  011d8	e3a03004	 mov         r3, #4
  011dc	e0020391	 mul         r2, r1, r3
  011e0	e59f3034	 ldr         r3, [pc, #0x34]
  011e4	e0833002	 add         r3, r3, r2
  011e8	e5930000	 ldr         r0, [r3]
  011ec	eb000000	 bl          FreePhysMem
  011f0		 |$LN1@CMK_Init|
  011f0		 |$LN2@CMK_Init|

; 1071 :         }
; 1072 :     }

  011f0	eaffffd3	 b           |$LN5@CMK_Init|
  011f4		 |$LN4@CMK_Init|
  011f4		 |$fail_after_create$40493|

; 1073 : 
; 1074 :   fail_after_create:
; 1075 : //fail_after_reg:
; 1076 :     RegCloseKey(hKey);

  011f4	e59d0010	 ldr         r0, [sp, #0x10]
  011f8	eb000000	 bl          RegCloseKey

; 1077 :     return 0;

  011fc	e59d025c	 ldr         r0, [sp, #0x25C]
  01200	eb000000	 bl          __security_check_cookie
  01204	e3a03000	 mov         r3, #0
  01208	e58d3264	 str         r3, [sp, #0x264]
  0120c		 |$LN38@CMK_Init|

; 1078 : }

  0120c	e59d0264	 ldr         r0, [sp, #0x264]
  01210	e28ddfc7	 add         sp, sp, #0xC7, 30
  01214	e89d6000	 ldmia       sp, {sp, lr}
  01218	e12fff1e	 bx          lr
  0121c		 |$LN45@CMK_Init|
  0121c		 |$LN46@CMK_Init|
  0121c	00000000	 DCD         |block_virtp|
  01220		 |$LN47@CMK_Init|
  01220	00000000	 DCD         |mem_alloc_type|
  01224		 |$LN48@CMK_Init|
  01224	00000000	 DCD         |block_avail_size|
  01228		 |$LN49@CMK_Init|
  01228	00000000	 DCD         |CMKDevice|
  0122c		 |$LN50@CMK_Init|
  0122c	00000000	 DCD         |??_C@_1FM@JFOFNLID@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@|
  01230		 |$LN51@CMK_Init|
  01230	00000000	 DCD         |mappedBufferList|
  01234		 |$LN52@CMK_Init|
  01234	00000000	 DCD         |??_C@_1HM@JGDEPHGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AA?$CF?$AAd@|
  01238		 |$LN53@CMK_Init|
  01238	00000000	 DCD         |npools|
  0123c		 |$LN54@CMK_Init|
  0123c	00000000	 DCD         |block_start|
  01240		 |$LN55@CMK_Init|
  01240	00000000	 DCD         |block_end|
  01244		 |$LN56@CMK_Init|
  01244	00000000	 DCD         |heap_head|
  01248		 |$LN57@CMK_Init|
  01248	00000000	 DCD         |??_C@_1KA@DANNKMFI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@|
  0124c		 |$LN58@CMK_Init|
  0124c	00000000	 DCD         |heap_size|
  01250		 |$LN59@CMK_Init|
  01250	00000000	 DCD         |heap_virtp|
  01254		 |$LN60@CMK_Init|
  01254	00000000	 DCD         |??_C@_1GM@EBCKMIOG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAb?$AAu?$AAf?$AAf@|
  01258		 |$LN61@CMK_Init|
  01258	00000000	 DCD         |??_C@_1GA@EHIEFMCN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAh?$AAe?$AAa@|
  0125c		 |$LN62@CMK_Init|
  0125c	00000000	 DCD         |heap_pool|
  01260		 |$LN63@CMK_Init|
  01260	00000000	 DCD         |gdwPageSize|
  01264		 |$LN64@CMK_Init|
  01264	00000000	 DCD         |total_num_buffers|
  01268		 |$LN65@CMK_Init|
  01268	00000000	 DCD         |??_C@_1IO@JOGLBBIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAp?$AAo?$AAo@|
  0126c		 |$LN66@CMK_Init|
  0126c	00000000	 DCD         |??_C@_1GG@BKOAGPDI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@|
  01270		 |$LN67@CMK_Init|
  01270	00000000	 DCD         |??_C@_1HK@PBGLKGFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@|
  01274		 |$LN68@CMK_Init|
  01274	00000000	 DCD         |??_C@_1BE@DMMEGEFO@?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA_?$AA?$CF?$AAs?$AA?$CF?$AAd?$AA?$AA@|
  01278		 |$LN69@CMK_Init|
  01278	00000000	 DCD         |??_C@_1M@PICFELOA@?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$AA@|
  0127c		 |$LN70@CMK_Init|
  0127c	00000000	 DCD         |??_C@_1BM@GDPAOOKP@?$AAP?$AAo?$AAo?$AAl?$AAS?$AAi?$AAz?$AAe?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@|
  01280		 |$LN71@CMK_Init|
  01280	00000000	 DCD         |??_C@_1HO@CDBIOCIL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AAC?$AAc?$AAh?$AAP?$AAr@|
  01284		 |$LN72@CMK_Init|
  01284	00000000	 DCD         |??_C@_1CA@JCJOGNFE@?$AAN?$AAu?$AAm?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAs?$AA_?$AAP?$AAo?$AAo?$AAl?$AA?$AA@|
  01288		 |$LN73@CMK_Init|
  01288	00000000	 DCD         |block_virtend|
  0128c		 |$LN74@CMK_Init|
  0128c	00000000	 DCD         |block_virtoff|
  01290		 |$LN75@CMK_Init|
  01290	00000000	 DCD         |??_C@_1IM@DKGFCODN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAi?$AAg?$AAu?$AAo?$AAu?$AAs@|
  01294		 |$LN76@CMK_Init|
  01294	00000000	 DCD         |??_C@_1JI@POFHIEIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@|
  01298		 |$LN77@CMK_Init|
  01298	00000000	 DCD         |real_block_start|
  0129c		 |$LN78@CMK_Init|
  0129c	00000000	 DCD         |real_block_virtp|
  012a0		 |$LN79@CMK_Init|
  012a0	00000000	 DCD         |numBlocks|
  012a4		 |$LN80@CMK_Init|
  012a4	00000000	 DCD         |??_C@_1GO@KJFDBIDO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAe?$AAg?$AAa?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AAo?$AAf?$AA?5@|
  012a8		 |$LN81@CMK_Init|
  012a8	00000000	 DCD         |cmem_mutex|
  012ac		 |$LN82@CMK_Init|
  012ac	00000000	 DCD         |??_C@_1BI@DJKHEDFH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA_?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@|
  012b0		 |$LN83@CMK_Init|
  012b0	00000000	 DCD         |??_C@_1JI@FJFCHAIK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@|
  012b4		 |$LN84@CMK_Init|
  012b4	00000000	 DCD         |??_C@_1JI@CGJLOLBJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAp?$AAo?$AAo?$AAl?$AAs?$AA?5?$AAs?$AAp?$AAe?$AAc@|
  012b8		 |$LN85@CMK_Init|
  012b8	00000000	 DCD         |useHeapIfPoolUnavailable|
  012bc		 |$LN86@CMK_Init|
  012bc	00000000	 DCD         |??_C@_1HG@INLBPEDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAC?$AAa?$AAn@|
  012c0		 |$LN87@CMK_Init|
  012c0	00000000	 DCD         |??_C@_1DC@KFACKDPH@?$AAU?$AAs?$AAe?$AAH?$AAe?$AAa?$AAp?$AAI?$AAf?$AAP?$AAo?$AAo?$AAl?$AAU?$AAn?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?$AA@|
  012c4		 |$LN88@CMK_Init|
  012c4	00000000	 DCD         |??_C@_1BE@NOPHIHDE@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA1?$AA?$AA@|
  012c8		 |$LN89@CMK_Init|
  012c8	00000000	 DCD         |??_C@_1BE@GGELOAFB@?$AAN?$AAu?$AAm?$AAP?$AAo?$AAo?$AAl?$AAs?$AA0?$AA?$AA@|
  012cc		 |$LN90@CMK_Init|
  012cc	00000000	 DCD         |??_C@_1BK@EEHBOAGL@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA1?$AA?$AA@|
  012d0		 |$LN91@CMK_Init|
  012d0	00000000	 DCD         |??_C@_1BK@PMMNIHAO@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AA0?$AA?$AA@|
  012d4		 |$LN92@CMK_Init|
  012d4	00000000	 DCD         |??_C@_1BO@ODBAMBIC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA1?$AA?$AA@|
  012d8		 |$LN93@CMK_Init|
  012d8	00000000	 DCD         |??_C@_1BO@FLKMKGOH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA0?$AA?$AA@|
  012dc		 |$LN94@CMK_Init|
  012dc	00000000	 DCD         |??_C@_1FO@GGDGBKHC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@|
  012e0		 |$LN95@CMK_Init|
  012e0	00000000	 DCD         |??_C@_1CM@BOKDKMGI@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAB?$AAu?$AAi?$AAl?$AAt?$AAI?$AAn?$AA?2?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?$AA@|
  012e4		 |$LN96@CMK_Init|
  012e4	00000000	 DCD         |__security_cookie|
  012e8		 |$M41180|

			 ENDP  ; |CMK_Init|

	EXPORT	|??_C@_1JM@CFPGCMJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@GIHALDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@PBFJDIDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@LKLPHBCP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe@| [ DATA ] ; `string'
	IMPORT	|malloc|

  00018			 AREA	 |.pdata|, PDATA
|$T41241| DCD	|$LN14@alloc_pool|
	DCD	0x4000c804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@CFPGCMJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAd@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@GIHALDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "i"
	DCB	0x0, "g", 0x0, "u", 0x0, "o", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@PBFJDIDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LKLPHBCP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "r", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  012e8			 AREA	 |.text|, CODE, ARM

  012e8		 |alloc_pool| PROC

; 693  : {

  012e8		 |$LN14@alloc_pool|
  012e8	e1a0c00d	 mov         r12, sp
  012ec	e92d000f	 stmdb       sp!, {r0 - r3}
  012f0	e92d5000	 stmdb       sp!, {r12, lr}
  012f4	e24dd038	 sub         sp, sp, #0x38
  012f8		 |$M41238|

; 694  :     struct pool_buffer *entry;
; 695  :     LIST_ENTRY *freelistp = &p_objs[bi][idx].freelist;

  012f8	e59d1040	 ldr         r1, [sp, #0x40]
  012fc	e3a03c0e	 mov         r3, #0xE, 24
  01300	e0020391	 mul         r2, r1, r3
  01304	e59f32f0	 ldr         r3, [pc, #0x2F0]
  01308	e0831002	 add         r1, r3, r2
  0130c	e59d2044	 ldr         r2, [sp, #0x44]
  01310	e3a0301c	 mov         r3, #0x1C
  01314	e0030392	 mul         r3, r2, r3
  01318	e0813003	 add         r3, r1, r3
  0131c	e58d3008	 str         r3, [sp, #8]

; 696  :     LIST_ENTRY *busylistp = &p_objs[bi][idx].busylist;

  01320	e59d1040	 ldr         r1, [sp, #0x40]
  01324	e3a03c0e	 mov         r3, #0xE, 24
  01328	e0020391	 mul         r2, r1, r3
  0132c	e59f32c8	 ldr         r3, [pc, #0x2C8]
  01330	e0831002	 add         r1, r3, r2
  01334	e59d2044	 ldr         r2, [sp, #0x44]
  01338	e3a0301c	 mov         r3, #0x1C
  0133c	e0030392	 mul         r3, r2, r3
  01340	e0813003	 add         r3, r1, r3
  01344	e2833008	 add         r3, r3, #8
  01348	e58d3004	 str         r3, [sp, #4]

; 697  :     int size = PAGE_ALIGN(reqsize);

  0134c	e59d204c	 ldr         r2, [sp, #0x4C]
  01350	e59f32ac	 ldr         r3, [pc, #0x2AC]
  01354	e5933000	 ldr         r3, [r3]
  01358	e0823003	 add         r3, r2, r3
  0135c	e2432001	 sub         r2, r3, #1
  01360	e59f329c	 ldr         r3, [pc, #0x29C]
  01364	e5933000	 ldr         r3, [r3]
  01368	e2433001	 sub         r3, r3, #1
  0136c	e1e03003	 mvn         r3, r3
  01370	e0023003	 and         r3, r2, r3
  01374	e58d3014	 str         r3, [sp, #0x14]

; 698  :     unsigned long virtp;
; 699  :     int i;
; 700  : 
; 701  :     __D("Allocating %d buffers of size %d (requested %d)\n",
; 702  :             num, size, reqsize);

  01378	e59d304c	 ldr         r3, [sp, #0x4C]
  0137c	e59d2014	 ldr         r2, [sp, #0x14]
  01380	e59d1048	 ldr         r1, [sp, #0x48]
  01384	e59f0274	 ldr         r0, [pc, #0x274]
  01388	eb000000	 bl          NKDbgPrintfW

; 703  : 
; 704  :     p_objs[bi][idx].reqsize = reqsize;

  0138c	e59d1040	 ldr         r1, [sp, #0x40]
  01390	e3a03c0e	 mov         r3, #0xE, 24
  01394	e0020391	 mul         r2, r1, r3
  01398	e59f325c	 ldr         r3, [pc, #0x25C]
  0139c	e0831002	 add         r1, r3, r2
  013a0	e59d2044	 ldr         r2, [sp, #0x44]
  013a4	e3a0301c	 mov         r3, #0x1C
  013a8	e0030392	 mul         r3, r2, r3
  013ac	e0813003	 add         r3, r1, r3
  013b0	e2832018	 add         r2, r3, #0x18
  013b4	e59d304c	 ldr         r3, [sp, #0x4C]
  013b8	e5823000	 str         r3, [r2]

; 705  :     p_objs[bi][idx].numbufs = num;

  013bc	e59d1040	 ldr         r1, [sp, #0x40]
  013c0	e3a03c0e	 mov         r3, #0xE, 24
  013c4	e0020391	 mul         r2, r1, r3
  013c8	e59f322c	 ldr         r3, [pc, #0x22C]
  013cc	e0831002	 add         r1, r3, r2
  013d0	e59d2044	 ldr         r2, [sp, #0x44]
  013d4	e3a0301c	 mov         r3, #0x1C
  013d8	e0030392	 mul         r3, r2, r3
  013dc	e0813003	 add         r3, r1, r3
  013e0	e2832010	 add         r2, r3, #0x10
  013e4	e59d3048	 ldr         r3, [sp, #0x48]
  013e8	e5823000	 str         r3, [r2]

; 706  :     p_objs[bi][idx].size = size;

  013ec	e59d1040	 ldr         r1, [sp, #0x40]
  013f0	e3a03c0e	 mov         r3, #0xE, 24
  013f4	e0020391	 mul         r2, r1, r3
  013f8	e59f31fc	 ldr         r3, [pc, #0x1FC]
  013fc	e0831002	 add         r1, r3, r2
  01400	e59d2044	 ldr         r2, [sp, #0x44]
  01404	e3a0301c	 mov         r3, #0x1C
  01408	e0030392	 mul         r3, r2, r3
  0140c	e0813003	 add         r3, r1, r3
  01410	e2832014	 add         r2, r3, #0x14
  01414	e59d3014	 ldr         r3, [sp, #0x14]
  01418	e5823000	 str         r3, [r2]

; 707  : 
; 708  :     InitializeListHead(freelistp);

  0141c	e59d3008	 ldr         r3, [sp, #8]
  01420	e2832004	 add         r2, r3, #4
  01424	e59d3008	 ldr         r3, [sp, #8]
  01428	e5823000	 str         r3, [r2]
  0142c	e59d2008	 ldr         r2, [sp, #8]
  01430	e59d3008	 ldr         r3, [sp, #8]
  01434	e5832000	 str         r2, [r3]

; 709  :     InitializeListHead(busylistp);

  01438	e59d3004	 ldr         r3, [sp, #4]
  0143c	e2832004	 add         r2, r3, #4
  01440	e59d3004	 ldr         r3, [sp, #4]
  01444	e5823000	 str         r3, [r2]
  01448	e59d2004	 ldr         r2, [sp, #4]
  0144c	e59d3004	 ldr         r3, [sp, #4]
  01450	e5832000	 str         r2, [r3]

; 710  : 
; 711  :     for (i=0; i < num; i++) {

  01454	e3a03000	 mov         r3, #0
  01458	e58d300c	 str         r3, [sp, #0xC]
  0145c	ea000002	 b           |$LN9@alloc_pool|
  01460		 |$LN8@alloc_pool|
  01460	e59d300c	 ldr         r3, [sp, #0xC]
  01464	e2833001	 add         r3, r3, #1
  01468	e58d300c	 str         r3, [sp, #0xC]
  0146c		 |$LN9@alloc_pool|
  0146c	e59d200c	 ldr         r2, [sp, #0xC]
  01470	e59d3048	 ldr         r3, [sp, #0x48]
  01474	e1520003	 cmp         r2, r3
  01478	aa000053	 bge         |$LN7@alloc_pool|

; 712  :         entry = (pool_buffer*)malloc(sizeof(struct pool_buffer));

  0147c	e3a00024	 mov         r0, #0x24
  01480	eb000000	 bl          malloc
  01484	e58d002c	 str         r0, [sp, #0x2C]
  01488	e59d302c	 ldr         r3, [sp, #0x2C]
  0148c	e58d3018	 str         r3, [sp, #0x18]

; 713  : 
; 714  :         if (!entry) {

  01490	e59d3018	 ldr         r3, [sp, #0x18]
  01494	e3530000	 cmp         r3, #0
  01498	1a000004	 bne         |$LN6@alloc_pool|

; 715  :             __E("alloc_pool failed to malloc pool_buffer struct");

  0149c	e59f0154	 ldr         r0, [pc, #0x154]
  014a0	eb000000	 bl          NKDbgPrintfW

; 716  :             //return -ENOMEM;
; 717  :             return -1;

  014a4	e3e03000	 mvn         r3, #0
  014a8	e58d3024	 str         r3, [sp, #0x24]
  014ac	ea00004b	 b           |$LN10@alloc_pool|
  014b0		 |$LN6@alloc_pool|

; 718  :         }
; 719  : 
; 720  :         virtp = alloc_pool_buffer(bi, size);

  014b0	e59d1014	 ldr         r1, [sp, #0x14]
  014b4	e59d0040	 ldr         r0, [sp, #0x40]
  014b8	eb000000	 bl          alloc_pool_buffer
  014bc	e58d0030	 str         r0, [sp, #0x30]
  014c0	e59d3030	 ldr         r3, [sp, #0x30]
  014c4	e58d3010	 str         r3, [sp, #0x10]

; 721  : 
; 722  :         if (virtp == 0) {

  014c8	e59d3010	 ldr         r3, [sp, #0x10]
  014cc	e3530000	 cmp         r3, #0
  014d0	1a000005	 bne         |$LN5@alloc_pool|

; 723  :             __E("alloc_pool failed to get contiguous area of size %d\n", size);

  014d4	e59d1014	 ldr         r1, [sp, #0x14]
  014d8	e59f0114	 ldr         r0, [pc, #0x114]
  014dc	eb000000	 bl          NKDbgPrintfW

; 724  :             //return -ENOMEM;
; 725  :             return -1;

  014e0	e3e03000	 mvn         r3, #0
  014e4	e58d3024	 str         r3, [sp, #0x24]
  014e8	ea00003c	 b           |$LN10@alloc_pool|
  014ec		 |$LN5@alloc_pool|

; 726  :         }
; 727  : 
; 728  :         entry->id = i;

  014ec	e59d3018	 ldr         r3, [sp, #0x18]
  014f0	e2832008	 add         r2, r3, #8
  014f4	e59d300c	 ldr         r3, [sp, #0xC]
  014f8	e5823000	 str         r3, [r2]

; 729  :         entry->physp = get_phys(virtp);

  014fc	e59d0010	 ldr         r0, [sp, #0x10]
  01500	eb000000	 bl          get_phys
  01504	e58d0034	 str         r0, [sp, #0x34]
  01508	e59d3018	 ldr         r3, [sp, #0x18]
  0150c	e283200c	 add         r2, r3, #0xC
  01510	e59d3034	 ldr         r3, [sp, #0x34]
  01514	e5823000	 str         r3, [r2]

; 730  :         entry->kvirtp = virtp;

  01518	e59d3018	 ldr         r3, [sp, #0x18]
  0151c	e2832014	 add         r2, r3, #0x14
  01520	e59d3010	 ldr         r3, [sp, #0x10]
  01524	e5823000	 str         r3, [r2]

; 731  : 
; 732  :         if (virtpRet) {

  01528	e59d3050	 ldr         r3, [sp, #0x50]
  0152c	e3530000	 cmp         r3, #0
  01530	0a000005	 beq         |$LN4@alloc_pool|

; 733  :             *virtpRet++ = virtp;

  01534	e59d2010	 ldr         r2, [sp, #0x10]
  01538	e59d3050	 ldr         r3, [sp, #0x50]
  0153c	e5832000	 str         r2, [r3]
  01540	e59d3050	 ldr         r3, [sp, #0x50]
  01544	e2833004	 add         r3, r3, #4
  01548	e58d3050	 str         r3, [sp, #0x50]
  0154c		 |$LN4@alloc_pool|

; 734  :         }
; 735  : 
; 736  :         __D("Allocated buffer %d, virtual %#lx and physical %#lx and size %d\n",
; 737  :                 entry->id, virtp, entry->physp, size);

  0154c	e59d3014	 ldr         r3, [sp, #0x14]
  01550	e58d3000	 str         r3, [sp]
  01554	e59d3018	 ldr         r3, [sp, #0x18]
  01558	e283300c	 add         r3, r3, #0xC
  0155c	e5933000	 ldr         r3, [r3]
  01560	e59d2010	 ldr         r2, [sp, #0x10]
  01564	e59d1018	 ldr         r1, [sp, #0x18]
  01568	e2811008	 add         r1, r1, #8
  0156c	e5911000	 ldr         r1, [r1]
  01570	e59f0078	 ldr         r0, [pc, #0x78]
  01574	eb000000	 bl          NKDbgPrintfW

; 738  : 
; 739  :         //list_add_tail(&entry->element, freelistp);
; 740  :         InsertTailList(freelistp, &entry->element);

  01578	e59d3008	 ldr         r3, [sp, #8]
  0157c	e58d3020	 str         r3, [sp, #0x20]
  01580	e59d3020	 ldr         r3, [sp, #0x20]
  01584	e2833004	 add         r3, r3, #4
  01588	e5933000	 ldr         r3, [r3]
  0158c	e58d301c	 str         r3, [sp, #0x1C]
  01590	e59d2020	 ldr         r2, [sp, #0x20]
  01594	e59d3018	 ldr         r3, [sp, #0x18]
  01598	e5832000	 str         r2, [r3]
  0159c	e59d3018	 ldr         r3, [sp, #0x18]
  015a0	e2832004	 add         r2, r3, #4
  015a4	e59d301c	 ldr         r3, [sp, #0x1C]
  015a8	e5823000	 str         r3, [r2]
  015ac	e59d2018	 ldr         r2, [sp, #0x18]
  015b0	e59d301c	 ldr         r3, [sp, #0x1C]
  015b4	e5832000	 str         r2, [r3]
  015b8	e59d3020	 ldr         r3, [sp, #0x20]
  015bc	e2832004	 add         r2, r3, #4
  015c0	e59d3018	 ldr         r3, [sp, #0x18]
  015c4	e5823000	 str         r3, [r2]

; 741  :     }

  015c8	eaffffa4	 b           |$LN8@alloc_pool|
  015cc		 |$LN7@alloc_pool|

; 742  : 
; 743  : #ifdef __DEBUG
; 744  :     dump_lists(bi, idx);

  015cc	e59d1044	 ldr         r1, [sp, #0x44]
  015d0	e59d0040	 ldr         r0, [sp, #0x40]
  015d4	eb000000	 bl          dump_lists

; 745  : #endif
; 746  : 
; 747  :     return 0;

  015d8	e3a03000	 mov         r3, #0
  015dc	e58d3024	 str         r3, [sp, #0x24]
  015e0		 |$LN10@alloc_pool|

; 748  : }

  015e0	e59d0024	 ldr         r0, [sp, #0x24]
  015e4	e28dd038	 add         sp, sp, #0x38
  015e8	e89d6000	 ldmia       sp, {sp, lr}
  015ec	e12fff1e	 bx          lr
  015f0		 |$LN15@alloc_pool|
  015f0		 |$LN16@alloc_pool|
  015f0	00000000	 DCD         |??_C@_1JM@CFPGCMJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAd@|
  015f4		 |$LN17@alloc_pool|
  015f4	00000000	 DCD         |??_C@_1IE@GIHALDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@|
  015f8		 |$LN18@alloc_pool|
  015f8	00000000	 DCD         |??_C@_1HI@PBFJDIDF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@|
  015fc		 |$LN19@alloc_pool|
  015fc	00000000	 DCD         |p_objs|
  01600		 |$LN20@alloc_pool|
  01600	00000000	 DCD         |??_C@_1HM@LKLPHBCP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe@|
  01604		 |$LN21@alloc_pool|
  01604	00000000	 DCD         |gdwPageSize|
  01608		 |$M41239|

			 ENDP  ; |alloc_pool|

	EXPORT	|??_C@_1GE@COLDEHO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HKOILLJD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AA?5?$AAP?$AAe?$AAr?$AAh?$AAa?$AAp?$AAs?$AA?5?$AAi?$AAt?$AA?8?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MG@IOKOPAFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@FDINJJIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?3?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA_?$AAv?$AAi?$AAr@| [ DATA ] ; `string'
	IMPORT	|LockPages|
	IMPORT	|__imp___rt_udiv|

  00020			 AREA	 |.pdata|, PDATA
|$T41256| DCD	|$LN11@get_phys|
	DCD	0x40006a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@COLDEHO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, "_", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, "s", 0x0, "(", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "P", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, "s", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HKOILLJD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AA?5?$AAP?$AAe?$AAr?$AAh?$AAa?$AAp?$AAs?$AA?5?$AAi?$AAt?$AA?8?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, " ", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "h", 0x0, "a"
	DCB	0x0, "p", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "t", 0x0, "'"
	DCB	0x0, "s", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "e", 0x0, "s", 0x0, "?"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MG@IOKOPAFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, "_", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, "s", 0x0, "(", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, " "
	DCB	0x0, "V", 0x0, "A", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "P", 0x0, "A", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, " "
	DCB	0x0, "d", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@FDINJJIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?3?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA_?$AAv?$AAi?$AAr@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, "_", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_", 0x0, "v", 0x0, "i"
	DCB	0x0, "r", 0x0, "t", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, " ", 0x0, "t", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "l", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01608			 AREA	 |.text|, CODE, ARM

  01608		 |get_phys| PROC

; 521  : {

  01608		 |$LN11@get_phys|
  01608	e1a0c00d	 mov         r12, sp
  0160c	e92d0001	 stmdb       sp!, {r0}
  01610	e92d5000	 stmdb       sp!, {r12, lr}
  01614	e24dd024	 sub         sp, sp, #0x24
  01618		 |$M41253|

; 522  :     unsigned long bufStart;
; 523  :     unsigned long offset;
; 524  :     unsigned long physp = 0;

  01618	e3a03000	 mov         r3, #0
  0161c	e58d300c	 str         r3, [sp, #0xC]

; 525  :     DWORD         dwPFN[2];
; 526  :     int           bi;
; 527  :     BOOL          fRet;
; 528  : 
; 529  :     /* For CMEM block kernel addresses */
; 530  :     for (bi = 0; bi < NBLOCKS; bi++) {

  01620	e3a03000	 mov         r3, #0
  01624	e58d3010	 str         r3, [sp, #0x10]
  01628	ea000002	 b           |$LN6@get_phys|
  0162c		 |$LN5@get_phys|
  0162c	e59d3010	 ldr         r3, [sp, #0x10]
  01630	e2833001	 add         r3, r3, #1
  01634	e58d3010	 str         r3, [sp, #0x10]
  01638		 |$LN6@get_phys|
  01638	e59d3010	 ldr         r3, [sp, #0x10]
  0163c	e3530002	 cmp         r3, #2
  01640	aa000023	 bge         |$LN4@get_phys|

; 531  :         if (virtp >= block_virtp[bi] && virtp < block_virtend[bi]) {

  01644	e59d1010	 ldr         r1, [sp, #0x10]
  01648	e3a03004	 mov         r3, #4
  0164c	e0020391	 mul         r2, r1, r3
  01650	e59f3154	 ldr         r3, [pc, #0x154]
  01654	e0833002	 add         r3, r3, r2
  01658	e59d202c	 ldr         r2, [sp, #0x2C]
  0165c	e5933000	 ldr         r3, [r3]
  01660	e1520003	 cmp         r2, r3
  01664	3a000019	 bcc         |$LN3@get_phys|
  01668	e59d1010	 ldr         r1, [sp, #0x10]
  0166c	e3a03004	 mov         r3, #4
  01670	e0020391	 mul         r2, r1, r3
  01674	e59f312c	 ldr         r3, [pc, #0x12C]
  01678	e0833002	 add         r3, r3, r2
  0167c	e59d202c	 ldr         r2, [sp, #0x2C]
  01680	e5933000	 ldr         r3, [r3]
  01684	e1520003	 cmp         r2, r3
  01688	2a000010	 bcs         |$LN3@get_phys|

; 532  :             physp = virtp - block_virtoff[bi];

  0168c	e59d1010	 ldr         r1, [sp, #0x10]
  01690	e3a03004	 mov         r3, #4
  01694	e0020391	 mul         r2, r1, r3
  01698	e59f3104	 ldr         r3, [pc, #0x104]
  0169c	e0833002	 add         r3, r3, r2
  016a0	e59d202c	 ldr         r2, [sp, #0x2C]
  016a4	e5933000	 ldr         r3, [r3]
  016a8	e0423003	 sub         r3, r2, r3
  016ac	e58d300c	 str         r3, [sp, #0xC]

; 533  :             __D("get_phys: block_virtoff[%d] translated kernel %#lx to %#lx\n",
; 534  :                     bi, virtp, physp);

  016b0	e59d300c	 ldr         r3, [sp, #0xC]
  016b4	e59d202c	 ldr         r2, [sp, #0x2C]
  016b8	e59d1010	 ldr         r1, [sp, #0x10]
  016bc	e59f00dc	 ldr         r0, [pc, #0xDC]
  016c0	eb000000	 bl          NKDbgPrintfW

; 535  :             return (physp);

  016c4	e59d300c	 ldr         r3, [sp, #0xC]
  016c8	e58d301c	 str         r3, [sp, #0x1C]
  016cc	ea00002b	 b           |$LN7@get_phys|
  016d0		 |$LN3@get_phys|

; 536  :         }
; 537  :     }

  016d0	eaffffd5	 b           |$LN5@get_phys|
  016d4		 |$LN4@get_phys|

; 538  : 
; 539  :     __D("get_phys(): Requested a VA to PA mapping for an address that CMEM did not allocate!\r\n");

  016d4	e59f00c0	 ldr         r0, [pc, #0xC0]
  016d8	eb000000	 bl          NKDbgPrintfW

; 540  :     __D(" Perhaps it's in the list of busy entries?\r\n");

  016dc	e59f00b4	 ldr         r0, [pc, #0xB4]
  016e0	eb000000	 bl          NKDbgPrintfW

; 541  : 
; 542  :     offset = virtp % PAGE_SIZE; /* Offset from the beginning of a page */

  016e4	e3e03b0d	 mvn         r3, #0xD, 22
  016e8	e22330fb	 eor         r3, r3, #0xFB
  016ec	e59d102c	 ldr         r1, [sp, #0x2C]
  016f0	e5930000	 ldr         r0, [r3]
  016f4	e59f3098	 ldr         r3, [pc, #0x98]
  016f8	e5933000	 ldr         r3, [r3]
  016fc	e1a0e00f	 mov         lr, pc
  01700	e12fff13	 bx          r3
  01704	e58d1004	 str         r1, [sp, #4]

; 543  :     bufStart = virtp - offset;

  01708	e59d202c	 ldr         r2, [sp, #0x2C]
  0170c	e59d3004	 ldr         r3, [sp, #4]
  01710	e0423003	 sub         r3, r2, r3
  01714	e58d3000	 str         r3, [sp]

; 544  : 
; 545  :     /*
; 546  :      *  We will only query for one page, since we don't know the size of the
; 547  :      *  buffer we're doing the get_phys() for.
; 548  :      */
; 549  :     fRet = LockPages((LPVOID)bufStart, PAGE_SIZE, dwPFN, LOCKFLAG_QUERY_ONLY);

  01718	e3a03002	 mov         r3, #2
  0171c	e28d2014	 add         r2, sp, #0x14
  01720	e3e01b0d	 mvn         r1, #0xD, 22
  01724	e22110fb	 eor         r1, r1, #0xFB
  01728	e5911000	 ldr         r1, [r1]
  0172c	e59d0000	 ldr         r0, [sp]
  01730	eb000000	 bl          LockPages
  01734	e58d0020	 str         r0, [sp, #0x20]
  01738	e59d3020	 ldr         r3, [sp, #0x20]
  0173c	e58d3008	 str         r3, [sp, #8]

; 550  :     if (fRet) {

  01740	e59d3008	 ldr         r3, [sp, #8]
  01744	e3530000	 cmp         r3, #0
  01748	0a000008	 beq         |$LN2@get_phys|

; 551  :         physp = (dwPFN[0] << UserKInfo[KINX_PFN_SHIFT]) + offset;

  0174c	e3e03b0d	 mvn         r3, #0xD, 22
  01750	e22330f7	 eor         r3, r3, #0xF7
  01754	e59d2014	 ldr         r2, [sp, #0x14]
  01758	e5933000	 ldr         r3, [r3]
  0175c	e1a02312	 mov         r2, r2, lsl r3
  01760	e59d3004	 ldr         r3, [sp, #4]
  01764	e0823003	 add         r3, r2, r3
  01768	e58d300c	 str         r3, [sp, #0xC]

; 552  : 
; 553  :         /* Don't call UnlockPages() since we only did a query */
; 554  :     }
; 555  :     else {

  0176c	ea000001	 b           |$LN1@get_phys|
  01770		 |$LN2@get_phys|

; 556  :         __E("get_phys(): LockPages(0x%x) failed!\n");

  01770	e59f0018	 ldr         r0, [pc, #0x18]
  01774	eb000000	 bl          NKDbgPrintfW
  01778		 |$LN1@get_phys|

; 557  :     }
; 558  : 
; 559  :     return (physp);

  01778	e59d300c	 ldr         r3, [sp, #0xC]
  0177c	e58d301c	 str         r3, [sp, #0x1C]
  01780		 |$LN7@get_phys|

; 560  : }

  01780	e59d001c	 ldr         r0, [sp, #0x1C]
  01784	e28dd024	 add         sp, sp, #0x24
  01788	e89d6000	 ldmia       sp, {sp, lr}
  0178c	e12fff1e	 bx          lr
  01790		 |$LN12@get_phys|
  01790		 |$LN13@get_phys|
  01790	00000000	 DCD         |??_C@_1GE@COLDEHO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg@|
  01794		 |$LN14@get_phys|
  01794	00000000	 DCD         |__imp___rt_udiv|
  01798		 |$LN15@get_phys|
  01798	00000000	 DCD         |??_C@_1HE@HKOILLJD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AA?5?$AAP?$AAe?$AAr?$AAh?$AAa?$AAp?$AAs?$AA?5?$AAi?$AAt?$AA?8?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh@|
  0179c		 |$LN16@get_phys|
  0179c	00000000	 DCD         |??_C@_1MG@IOKOPAFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@|
  017a0		 |$LN17@get_phys|
  017a0	00000000	 DCD         |??_C@_1JC@FDINJJIA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAg?$AAe?$AAt?$AA_?$AAp?$AAh?$AAy?$AAs?$AA?3?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA_?$AAv?$AAi?$AAr@|
  017a4		 |$LN18@get_phys|
  017a4	00000000	 DCD         |block_virtoff|
  017a8		 |$LN19@get_phys|
  017a8	00000000	 DCD         |block_virtend|
  017ac		 |$LN20@get_phys|
  017ac	00000000	 DCD         |block_virtp|
  017b0		 |$M41254|

			 ENDP  ; |get_phys|

	EXPORT	|??_C@_1GK@INLGMAOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@HFFAIEFN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@NAJHAEMN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@EFJIJMPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@EPCLDAFB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T41271| DCD	|$LN6@alloc_pool@2|
	DCD	0x40005204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@INLGMAOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "b"
	DCB	0x0, "i", 0x0, "g", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "o"
	DCB	0x0, "u", 0x0, "g", 0x0, "h", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "e", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@HFFAIEFN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@NAJHAEMN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "n", 0x0, "e", 0x0, "w", 0x0, " ", 0x0, "a"
	DCB	0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@EFJIJMPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "i", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, " ", 0x0, "<", 0x0, " ", 0x0, "a", 0x0, "v", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@EPCLDAFB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "_"
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  017b0			 AREA	 |.text|, CODE, ARM

  017b0		 |alloc_pool_buffer| PROC

; 564  : {

  017b0		 |$LN6@alloc_pool@2|
  017b0	e1a0c00d	 mov         r12, sp
  017b4	e92d0003	 stmdb       sp!, {r0, r1}
  017b8	e92d5000	 stmdb       sp!, {r12, lr}
  017bc	e24dd008	 sub         sp, sp, #8
  017c0		 |$M41268|

; 565  :     unsigned long virtp;
; 566  : 
; 567  :     __D("alloc_pool_buffer: Called for size %u\n", size);

  017c0	e59d1014	 ldr         r1, [sp, #0x14]
  017c4	e59f0128	 ldr         r0, [pc, #0x128]
  017c8	eb000000	 bl          NKDbgPrintfW

; 568  : 
; 569  :     if (size <= block_avail_size[bi]) {

  017cc	e59d1010	 ldr         r1, [sp, #0x10]
  017d0	e3a03004	 mov         r3, #4
  017d4	e0020391	 mul         r2, r1, r3
  017d8	e59f3108	 ldr         r3, [pc, #0x108]
  017dc	e0833002	 add         r3, r3, r2
  017e0	e59d2014	 ldr         r2, [sp, #0x14]
  017e4	e5933000	 ldr         r3, [r3]
  017e8	e1520003	 cmp         r2, r3
  017ec	8a000032	 bhi         |$LN1@alloc_pool@2|

; 570  :         __D("alloc_pool_buffer: Fits req %u < avail: %u\n",
; 571  :                 size, block_avail_size[bi]);

  017f0	e59d1010	 ldr         r1, [sp, #0x10]
  017f4	e3a03004	 mov         r3, #4
  017f8	e0020391	 mul         r2, r1, r3
  017fc	e59f30e4	 ldr         r3, [pc, #0xE4]
  01800	e0833002	 add         r3, r3, r2
  01804	e5932000	 ldr         r2, [r3]
  01808	e59d1014	 ldr         r1, [sp, #0x14]
  0180c	e59f00dc	 ldr         r0, [pc, #0xDC]
  01810	eb000000	 bl          NKDbgPrintfW

; 572  : 
; 573  :         block_avail_size[bi] -= size;

  01814	e59d1010	 ldr         r1, [sp, #0x10]
  01818	e3a03004	 mov         r3, #4
  0181c	e0020391	 mul         r2, r1, r3
  01820	e59f30c0	 ldr         r3, [pc, #0xC0]
  01824	e0833002	 add         r3, r3, r2
  01828	e5932000	 ldr         r2, [r3]
  0182c	e59d3014	 ldr         r3, [sp, #0x14]
  01830	e0420003	 sub         r0, r2, r3
  01834	e59d1010	 ldr         r1, [sp, #0x10]
  01838	e3a03004	 mov         r3, #4
  0183c	e0020391	 mul         r2, r1, r3
  01840	e59f30a0	 ldr         r3, [pc, #0xA0]
  01844	e0833002	 add         r3, r3, r2
  01848	e5830000	 str         r0, [r3]

; 574  :         virtp = block_virtp[bi] + block_avail_size[bi];

  0184c	e59d1010	 ldr         r1, [sp, #0x10]
  01850	e3a03004	 mov         r3, #4
  01854	e0020391	 mul         r2, r1, r3
  01858	e59f308c	 ldr         r3, [pc, #0x8C]
  0185c	e0830002	 add         r0, r3, r2
  01860	e59d1010	 ldr         r1, [sp, #0x10]
  01864	e3a03004	 mov         r3, #4
  01868	e0020391	 mul         r2, r1, r3
  0186c	e59f3074	 ldr         r3, [pc, #0x74]
  01870	e0833002	 add         r3, r3, r2
  01874	e5902000	 ldr         r2, [r0]
  01878	e5933000	 ldr         r3, [r3]
  0187c	e0823003	 add         r3, r2, r3
  01880	e58d3000	 str         r3, [sp]

; 575  : 
; 576  :         __D("alloc_pool_buffer: new available block size is %d\n",
; 577  :                 block_avail_size[bi]);

  01884	e59d1010	 ldr         r1, [sp, #0x10]
  01888	e3a03004	 mov         r3, #4
  0188c	e0020391	 mul         r2, r1, r3
  01890	e59f3050	 ldr         r3, [pc, #0x50]
  01894	e0833002	 add         r3, r3, r2
  01898	e5931000	 ldr         r1, [r3]
  0189c	e59f0040	 ldr         r0, [pc, #0x40]
  018a0	eb000000	 bl          NKDbgPrintfW

; 578  :         __D("alloc_pool_buffer: returning allocated buffer at %#lx\n", virtp);

  018a4	e59d1000	 ldr         r1, [sp]
  018a8	e59f0030	 ldr         r0, [pc, #0x30]
  018ac	eb000000	 bl          NKDbgPrintfW

; 579  : 
; 580  :         return virtp;

  018b0	e59d3000	 ldr         r3, [sp]
  018b4	e58d3004	 str         r3, [sp, #4]
  018b8	ea000003	 b           |$LN2@alloc_pool@2|
  018bc		 |$LN1@alloc_pool@2|

; 581  :     }
; 582  : 
; 583  :     __E("Failed to find a big enough free block\n");

  018bc	e59f0018	 ldr         r0, [pc, #0x18]
  018c0	eb000000	 bl          NKDbgPrintfW

; 584  : 
; 585  :     return 0;

  018c4	e3a03000	 mov         r3, #0
  018c8	e58d3004	 str         r3, [sp, #4]
  018cc		 |$LN2@alloc_pool@2|

; 586  : }

  018cc	e59d0004	 ldr         r0, [sp, #4]
  018d0	e28dd008	 add         sp, sp, #8
  018d4	e89d6000	 ldmia       sp, {sp, lr}
  018d8	e12fff1e	 bx          lr
  018dc		 |$LN7@alloc_pool@2|
  018dc		 |$LN8@alloc_pool@2|
  018dc	00000000	 DCD         |??_C@_1GK@INLGMAOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAi@|
  018e0		 |$LN9@alloc_pool@2|
  018e0	00000000	 DCD         |??_C@_1II@HFFAIEFN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@|
  018e4		 |$LN10@alloc_pool@2|
  018e4	00000000	 DCD         |??_C@_1IA@NAJHAEMN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@|
  018e8		 |$LN11@alloc_pool@2|
  018e8	00000000	 DCD         |block_avail_size|
  018ec		 |$LN12@alloc_pool@2|
  018ec	00000000	 DCD         |block_virtp|
  018f0		 |$LN13@alloc_pool@2|
  018f0	00000000	 DCD         |??_C@_1HC@EFJIJMPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@|
  018f4		 |$LN14@alloc_pool@2|
  018f4	00000000	 DCD         |??_C@_1GI@EPCLDAFB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA_?$AAp?$AAo?$AAo?$AAl?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5@|
  018f8		 |$M41269|

			 ENDP  ; |alloc_pool_buffer|

	EXPORT	|??_C@_1IA@PINDAFCE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KIBDDIBI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@HLDGFKLC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@GHMIEHGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|ReleaseMutex|
	IMPORT	|WaitForSingleObject|

  00030			 AREA	 |.pdata|, PDATA
|$T41284| DCD	|$LN12@dump_lists|
	DCD	0x40006004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@PINDAFCE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KIBDDIBI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "l", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@HLDGFKLC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GHMIEHGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "l", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  018f8			 AREA	 |.text|, CODE, ARM

  018f8		 |dump_lists| PROC

; 595  : {

  018f8		 |$LN12@dump_lists|
  018f8	e1a0c00d	 mov         r12, sp
  018fc	e92d0003	 stmdb       sp!, {r0, r1}
  01900	e92d5000	 stmdb       sp!, {r12, lr}
  01904	e24dd014	 sub         sp, sp, #0x14
  01908		 |$M41281|

; 596  :     LIST_ENTRY *freelistp = &p_objs[bi][idx].freelist;

  01908	e59d101c	 ldr         r1, [sp, #0x1C]
  0190c	e3a03c0e	 mov         r3, #0xE, 24
  01910	e0020391	 mul         r2, r1, r3
  01914	e59f3158	 ldr         r3, [pc, #0x158]
  01918	e0831002	 add         r1, r3, r2
  0191c	e59d2020	 ldr         r2, [sp, #0x20]
  01920	e3a0301c	 mov         r3, #0x1C
  01924	e0030392	 mul         r3, r2, r3
  01928	e0813003	 add         r3, r1, r3
  0192c	e58d3004	 str         r3, [sp, #4]

; 597  :     LIST_ENTRY *busylistp = &p_objs[bi][idx].busylist;

  01930	e59d101c	 ldr         r1, [sp, #0x1C]
  01934	e3a03c0e	 mov         r3, #0xE, 24
  01938	e0020391	 mul         r2, r1, r3
  0193c	e59f3130	 ldr         r3, [pc, #0x130]
  01940	e0831002	 add         r1, r3, r2
  01944	e59d2020	 ldr         r2, [sp, #0x20]
  01948	e3a0301c	 mov         r3, #0x1C
  0194c	e0030392	 mul         r3, r2, r3
  01950	e0813003	 add         r3, r1, r3
  01954	e2833008	 add         r3, r3, #8
  01958	e58d3000	 str         r3, [sp]

; 598  :     LIST_ENTRY *e;
; 599  :     struct pool_buffer *entry;
; 600  : 
; 601  :     if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  0195c	e3e01000	 mvn         r1, #0
  01960	e59f30f8	 ldr         r3, [pc, #0xF8]
  01964	e5930000	 ldr         r0, [r3]
  01968	eb000000	 bl          WaitForSingleObject
  0196c	e58d0010	 str         r0, [sp, #0x10]
  01970	e59d3010	 ldr         r3, [sp, #0x10]
  01974	e3530000	 cmp         r3, #0
  01978	0a000000	 beq         |$LN7@dump_lists|

; 602  :         return;

  0197c	ea000034	 b           |$LN8@dump_lists|
  01980		 |$LN7@dump_lists|

; 603  :     }
; 604  : 
; 605  :     __D("Busylist for pool %d:\n", idx);

  01980	e59d1020	 ldr         r1, [sp, #0x20]
  01984	e59f00e4	 ldr         r0, [pc, #0xE4]
  01988	eb000000	 bl          NKDbgPrintfW

; 606  :     for (e = busylistp->Flink; e != busylistp; e = e->Flink) {

  0198c	e59d3000	 ldr         r3, [sp]
  01990	e5933000	 ldr         r3, [r3]
  01994	e58d300c	 str         r3, [sp, #0xC]
  01998	ea000002	 b           |$LN6@dump_lists|
  0199c		 |$LN5@dump_lists|
  0199c	e59d300c	 ldr         r3, [sp, #0xC]
  019a0	e5933000	 ldr         r3, [r3]
  019a4	e58d300c	 str         r3, [sp, #0xC]
  019a8		 |$LN6@dump_lists|
  019a8	e59d200c	 ldr         r2, [sp, #0xC]
  019ac	e59d3000	 ldr         r3, [sp]
  019b0	e1520003	 cmp         r2, r3
  019b4	0a00000a	 beq         |$LN4@dump_lists|

; 607  : 
; 608  :         entry = list_entry(e, struct pool_buffer, element);

  019b8	e59d300c	 ldr         r3, [sp, #0xC]
  019bc	e58d3008	 str         r3, [sp, #8]

; 609  : 
; 610  :         __D("Busy: Buffer with id %d and physical address %#lx\n",
; 611  :                 entry->id, entry->physp);

  019c0	e59d3008	 ldr         r3, [sp, #8]
  019c4	e283300c	 add         r3, r3, #0xC
  019c8	e5932000	 ldr         r2, [r3]
  019cc	e59d3008	 ldr         r3, [sp, #8]
  019d0	e2833008	 add         r3, r3, #8
  019d4	e5931000	 ldr         r1, [r3]
  019d8	e59f008c	 ldr         r0, [pc, #0x8C]
  019dc	eb000000	 bl          NKDbgPrintfW

; 612  :     }

  019e0	eaffffed	 b           |$LN5@dump_lists|
  019e4		 |$LN4@dump_lists|

; 613  : 
; 614  :     __D("Freelist for pool %d:\n", idx);

  019e4	e59d1020	 ldr         r1, [sp, #0x20]
  019e8	e59f0078	 ldr         r0, [pc, #0x78]
  019ec	eb000000	 bl          NKDbgPrintfW

; 615  :     for (e = freelistp->Flink; e != freelistp; e = e->Flink) {

  019f0	e59d3004	 ldr         r3, [sp, #4]
  019f4	e5933000	 ldr         r3, [r3]
  019f8	e58d300c	 str         r3, [sp, #0xC]
  019fc	ea000002	 b           |$LN3@dump_lists|
  01a00		 |$LN2@dump_lists|
  01a00	e59d300c	 ldr         r3, [sp, #0xC]
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e58d300c	 str         r3, [sp, #0xC]
  01a0c		 |$LN3@dump_lists|
  01a0c	e59d200c	 ldr         r2, [sp, #0xC]
  01a10	e59d3004	 ldr         r3, [sp, #4]
  01a14	e1520003	 cmp         r2, r3
  01a18	0a00000a	 beq         |$LN1@dump_lists|

; 616  : 
; 617  :         entry = list_entry(e, struct pool_buffer, element);

  01a1c	e59d300c	 ldr         r3, [sp, #0xC]
  01a20	e58d3008	 str         r3, [sp, #8]

; 618  : 
; 619  :         __D("Free: Buffer with id %d and physical address %#lx\n",
; 620  :                 entry->id, entry->physp);

  01a24	e59d3008	 ldr         r3, [sp, #8]
  01a28	e283300c	 add         r3, r3, #0xC
  01a2c	e5932000	 ldr         r2, [r3]
  01a30	e59d3008	 ldr         r3, [sp, #8]
  01a34	e2833008	 add         r3, r3, #8
  01a38	e5931000	 ldr         r1, [r3]
  01a3c	e59f0020	 ldr         r0, [pc, #0x20]
  01a40	eb000000	 bl          NKDbgPrintfW

; 621  :     }

  01a44	eaffffed	 b           |$LN2@dump_lists|
  01a48		 |$LN1@dump_lists|

; 622  : 
; 623  :     ReleaseMutex(cmem_mutex);

  01a48	e59f3010	 ldr         r3, [pc, #0x10]
  01a4c	e5930000	 ldr         r0, [r3]
  01a50	eb000000	 bl          ReleaseMutex
  01a54		 |$LN8@dump_lists|

; 624  : }

  01a54	e28dd014	 add         sp, sp, #0x14
  01a58	e89d6000	 ldmia       sp, {sp, lr}
  01a5c	e12fff1e	 bx          lr
  01a60		 |$LN13@dump_lists|
  01a60		 |$LN14@dump_lists|
  01a60	00000000	 DCD         |cmem_mutex|
  01a64		 |$LN15@dump_lists|
  01a64	00000000	 DCD         |??_C@_1IA@PINDAFCE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@|
  01a68		 |$LN16@dump_lists|
  01a68	00000000	 DCD         |??_C@_1EI@KIBDDIBI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@|
  01a6c		 |$LN17@dump_lists|
  01a6c	00000000	 DCD         |??_C@_1IA@HLDGFKLC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AA?3?$AA?5?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAi@|
  01a70		 |$LN18@dump_lists|
  01a70	00000000	 DCD         |??_C@_1EI@GHMIEHGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?5?$AA?$CF@|
  01a74		 |$LN19@dump_lists|
  01a74	00000000	 DCD         |p_objs|
  01a78		 |$M41282|

			 ENDP  ; |dump_lists|

	EXPORT	|??_C@_1GE@MBPJBFA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAd?$AAe?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAw?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@CEPBDDGG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@NLHGLFNO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@CBPANNAJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa?$AAs?$AAs?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MPFCMFJO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA_?$AAe?$AAx?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|CMK_Deinit|
	IMPORT	|CloseHandle|
	IMPORT	|free|

  00038			 AREA	 |.pdata|, PDATA
|$T41297| DCD	|$LN21@CMK_Deinit|
	DCD	0x4000bd04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@MBPJBFA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAd?$AAe?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAw?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, ":", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "o", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "i"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@CEPBDDGG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, " ", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@NLHGLFNO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@CBPANNAJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa?$AAs?$AAs?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, "s"
	DCB	0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MPFCMFJO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA_?$AAe?$AAx?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, " ", 0x0, "c", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "_", 0x0, "e", 0x0, "x", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01a78			 AREA	 |.text|, CODE, ARM

  01a78		 |CMK_Deinit| PROC

; 1086 : {

  01a78		 |$LN21@CMK_Deinit|
  01a78	e1a0c00d	 mov         r12, sp
  01a7c	e92d0001	 stmdb       sp!, {r0}
  01a80	e92d5000	 stmdb       sp!, {r12, lr}
  01a84	e24dd024	 sub         sp, sp, #0x24
  01a88		 |$M41294|

; 1087 :     DEVICE_STATE *pCMKDevice = (DEVICE_STATE *)dwContext;

  01a88	e59d302c	 ldr         r3, [sp, #0x2C]
  01a8c	e58d301c	 str         r3, [sp, #0x1C]

; 1088 :     LIST_ENTRY *freelistp;
; 1089 :     LIST_ENTRY *busylistp;
; 1090 :     LIST_ENTRY *e;
; 1091 :     struct pool_buffer *entry;
; 1092 :     int num_pools;
; 1093 :     int bi;
; 1094 :     int i;
; 1095 : 
; 1096 :     __D("In cmem_exit()\n");

  01a90	e59f02d0	 ldr         r0, [pc, #0x2D0]
  01a94	eb000000	 bl          NKDbgPrintfW

; 1097 : 
; 1098 :     for (bi = 0; bi < NBLOCKS; bi++) {

  01a98	e3a03000	 mov         r3, #0
  01a9c	e58d3010	 str         r3, [sp, #0x10]
  01aa0	ea000002	 b           |$LN16@CMK_Deinit|
  01aa4		 |$LN15@CMK_Deinit|
  01aa4	e59d3010	 ldr         r3, [sp, #0x10]
  01aa8	e2833001	 add         r3, r3, #1
  01aac	e58d3010	 str         r3, [sp, #0x10]
  01ab0		 |$LN16@CMK_Deinit|
  01ab0	e59d3010	 ldr         r3, [sp, #0x10]
  01ab4	e3530002	 cmp         r3, #2
  01ab8	aa00008c	 bge         |$LN14@CMK_Deinit|

; 1099 :         num_pools = npools[bi];

  01abc	e59d1010	 ldr         r1, [sp, #0x10]
  01ac0	e3a03004	 mov         r3, #4
  01ac4	e0020391	 mul         r2, r1, r3
  01ac8	e59f3294	 ldr         r3, [pc, #0x294]
  01acc	e0833002	 add         r3, r3, r2
  01ad0	e5933000	 ldr         r3, [r3]
  01ad4	e58d300c	 str         r3, [sp, #0xC]

; 1100 :         if (!num_pools) {

  01ad8	e59d300c	 ldr         r3, [sp, #0xC]
  01adc	e3530000	 cmp         r3, #0
  01ae0	1a000000	 bne         |$LN13@CMK_Deinit|

; 1101 :             continue;

  01ae4	eaffffee	 b           |$LN15@CMK_Deinit|
  01ae8		 |$LN13@CMK_Deinit|

; 1102 :         }
; 1103 : 
; 1104 :         if (heap_pool[bi] != -1) {

  01ae8	e59d1010	 ldr         r1, [sp, #0x10]
  01aec	e3a03004	 mov         r3, #4
  01af0	e0020391	 mul         r2, r1, r3
  01af4	e59f3264	 ldr         r3, [pc, #0x264]
  01af8	e0833002	 add         r3, r3, r2
  01afc	e5933000	 ldr         r3, [r3]
  01b00	e3730001	 cmn         r3, #1
  01b04	0a000002	 beq         |$LN12@CMK_Deinit|

; 1105 :             num_pools++;

  01b08	e59d300c	 ldr         r3, [sp, #0xC]
  01b0c	e2833001	 add         r3, r3, #1
  01b10	e58d300c	 str         r3, [sp, #0xC]
  01b14		 |$LN12@CMK_Deinit|

; 1106 :         }
; 1107 : 
; 1108 :         /* Free the pool structures and empty the lists. */
; 1109 :         for (i=0; i<num_pools; i++) {

  01b14	e3a03000	 mov         r3, #0
  01b18	e58d3008	 str         r3, [sp, #8]
  01b1c	ea000002	 b           |$LN11@CMK_Deinit|
  01b20		 |$LN10@CMK_Deinit|
  01b20	e59d3008	 ldr         r3, [sp, #8]
  01b24	e2833001	 add         r3, r3, #1
  01b28	e58d3008	 str         r3, [sp, #8]
  01b2c		 |$LN11@CMK_Deinit|
  01b2c	e59d2008	 ldr         r2, [sp, #8]
  01b30	e59d300c	 ldr         r3, [sp, #0xC]
  01b34	e1520003	 cmp         r2, r3
  01b38	aa000046	 bge         |$LN9@CMK_Deinit|

; 1110 :             __D("Freeing memory associated with pool %d\n", i);

  01b3c	e59d1008	 ldr         r1, [sp, #8]
  01b40	e59f0214	 ldr         r0, [pc, #0x214]
  01b44	eb000000	 bl          NKDbgPrintfW

; 1111 : 
; 1112 :             freelistp = &p_objs[bi][i].freelist;

  01b48	e59d1010	 ldr         r1, [sp, #0x10]
  01b4c	e3a03c0e	 mov         r3, #0xE, 24
  01b50	e0020391	 mul         r2, r1, r3
  01b54	e59f31fc	 ldr         r3, [pc, #0x1FC]
  01b58	e0831002	 add         r1, r3, r2
  01b5c	e59d2008	 ldr         r2, [sp, #8]
  01b60	e3a0301c	 mov         r3, #0x1C
  01b64	e0030392	 mul         r3, r2, r3
  01b68	e0813003	 add         r3, r1, r3
  01b6c	e58d3004	 str         r3, [sp, #4]

; 1113 :             busylistp = &p_objs[bi][i].busylist;

  01b70	e59d1010	 ldr         r1, [sp, #0x10]
  01b74	e3a03c0e	 mov         r3, #0xE, 24
  01b78	e0020391	 mul         r2, r1, r3
  01b7c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  01b80	e0831002	 add         r1, r3, r2
  01b84	e59d2008	 ldr         r2, [sp, #8]
  01b88	e3a0301c	 mov         r3, #0x1C
  01b8c	e0030392	 mul         r3, r2, r3
  01b90	e0813003	 add         r3, r1, r3
  01b94	e2833008	 add         r3, r3, #8
  01b98	e58d3000	 str         r3, [sp]

; 1114 : 
; 1115 :             e = busylistp->Flink;

  01b9c	e59d3000	 ldr         r3, [sp]
  01ba0	e5933000	 ldr         r3, [r3]
  01ba4	e58d3018	 str         r3, [sp, #0x18]
  01ba8		 |$LN8@CMK_Deinit|

; 1116 :             while (e != busylistp) {

  01ba8	e59d2018	 ldr         r2, [sp, #0x18]
  01bac	e59d3000	 ldr         r3, [sp]
  01bb0	e1520003	 cmp         r2, r3
  01bb4	0a00000f	 beq         |$LN7@CMK_Deinit|

; 1117 :                 entry = CONTAINING_RECORD(e, struct pool_buffer, element);

  01bb8	e59d3018	 ldr         r3, [sp, #0x18]
  01bbc	e58d3014	 str         r3, [sp, #0x14]

; 1118 :                 __D("Warning: Freeing busy entry %d at %#lx\n",
; 1119 :                         entry->id, entry->physp);

  01bc0	e59d3014	 ldr         r3, [sp, #0x14]
  01bc4	e283300c	 add         r3, r3, #0xC
  01bc8	e5932000	 ldr         r2, [r3]
  01bcc	e59d3014	 ldr         r3, [sp, #0x14]
  01bd0	e2833008	 add         r3, r3, #8
  01bd4	e5931000	 ldr         r1, [r3]
  01bd8	e59f0174	 ldr         r0, [pc, #0x174]
  01bdc	eb000000	 bl          NKDbgPrintfW

; 1120 :                 e = e->Flink;

  01be0	e59d3018	 ldr         r3, [sp, #0x18]
  01be4	e5933000	 ldr         r3, [r3]
  01be8	e58d3018	 str         r3, [sp, #0x18]

; 1121 :                 free(entry);

  01bec	e59d0014	 ldr         r0, [sp, #0x14]
  01bf0	eb000000	 bl          free

; 1122 :             }

  01bf4	eaffffeb	 b           |$LN8@CMK_Deinit|
  01bf8		 |$LN7@CMK_Deinit|

; 1123 : 
; 1124 :             e = freelistp->Flink;

  01bf8	e59d3004	 ldr         r3, [sp, #4]
  01bfc	e5933000	 ldr         r3, [r3]
  01c00	e58d3018	 str         r3, [sp, #0x18]
  01c04		 |$LN6@CMK_Deinit|

; 1125 :             while (e != freelistp) {

  01c04	e59d2018	 ldr         r2, [sp, #0x18]
  01c08	e59d3004	 ldr         r3, [sp, #4]
  01c0c	e1520003	 cmp         r2, r3
  01c10	0a00000f	 beq         |$LN5@CMK_Deinit|

; 1126 :                 entry = CONTAINING_RECORD(e, struct pool_buffer, element);

  01c14	e59d3018	 ldr         r3, [sp, #0x18]
  01c18	e58d3014	 str         r3, [sp, #0x14]

; 1127 :                 __D("Freeing free entry %d at %#lx\n", entry->id, entry->physp);

  01c1c	e59d3014	 ldr         r3, [sp, #0x14]
  01c20	e283300c	 add         r3, r3, #0xC
  01c24	e5932000	 ldr         r2, [r3]
  01c28	e59d3014	 ldr         r3, [sp, #0x14]
  01c2c	e2833008	 add         r3, r3, #8
  01c30	e5931000	 ldr         r1, [r3]
  01c34	e59f0114	 ldr         r0, [pc, #0x114]
  01c38	eb000000	 bl          NKDbgPrintfW

; 1128 :                 e = e->Flink;

  01c3c	e59d3018	 ldr         r3, [sp, #0x18]
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e58d3018	 str         r3, [sp, #0x18]

; 1129 :                 free(entry);

  01c48	e59d0014	 ldr         r0, [sp, #0x14]
  01c4c	eb000000	 bl          free

; 1130 :             }

  01c50	eaffffeb	 b           |$LN6@CMK_Deinit|
  01c54		 |$LN5@CMK_Deinit|

; 1131 :         }

  01c54	eaffffb1	 b           |$LN10@CMK_Deinit|
  01c58		 |$LN9@CMK_Deinit|

; 1132 : 
; 1133 :         //iounmap((void *) block_virtp[bi]);
; 1134 :         if (mem_alloc_type[bi] == MMMAPIOSPACE) {

  01c58	e59d1010	 ldr         r1, [sp, #0x10]
  01c5c	e3a03004	 mov         r3, #4
  01c60	e0020391	 mul         r2, r1, r3
  01c64	e59f30dc	 ldr         r3, [pc, #0xDC]
  01c68	e0833002	 add         r3, r3, r2
  01c6c	e5933000	 ldr         r3, [r3]
  01c70	e3530000	 cmp         r3, #0
  01c74	1a00000d	 bne         |$LN4@CMK_Deinit|

; 1135 :             MmUnmapIoSpace((PVOID)block_virtp[bi], block_avail_size[bi]);

  01c78	e59d1010	 ldr         r1, [sp, #0x10]
  01c7c	e3a03004	 mov         r3, #4
  01c80	e0020391	 mul         r2, r1, r3
  01c84	e59f30c0	 ldr         r3, [pc, #0xC0]
  01c88	e0833002	 add         r3, r3, r2
  01c8c	e5931000	 ldr         r1, [r3]
  01c90	e59d0010	 ldr         r0, [sp, #0x10]
  01c94	e3a03004	 mov         r3, #4
  01c98	e0020390	 mul         r2, r0, r3
  01c9c	e59f30a0	 ldr         r3, [pc, #0xA0]
  01ca0	e0833002	 add         r3, r3, r2
  01ca4	e5930000	 ldr         r0, [r3]
  01ca8	eb000000	 bl          MmUnmapIoSpace
  01cac	ea00000e	 b           |$LN3@CMK_Deinit|
  01cb0		 |$LN4@CMK_Deinit|

; 1136 :         }
; 1137 :         else if (mem_alloc_type[bi] == ALLOCPHYSMEM) {

  01cb0	e59d1010	 ldr         r1, [sp, #0x10]
  01cb4	e3a03004	 mov         r3, #4
  01cb8	e0020391	 mul         r2, r1, r3
  01cbc	e59f3084	 ldr         r3, [pc, #0x84]
  01cc0	e0833002	 add         r3, r3, r2
  01cc4	e5933000	 ldr         r3, [r3]
  01cc8	e3530001	 cmp         r3, #1
  01ccc	1a000006	 bne         |$LN2@CMK_Deinit|

; 1138 :             FreePhysMem((LPVOID)block_virtp[bi]);

  01cd0	e59d1010	 ldr         r1, [sp, #0x10]
  01cd4	e3a03004	 mov         r3, #4
  01cd8	e0020391	 mul         r2, r1, r3
  01cdc	e59f3060	 ldr         r3, [pc, #0x60]
  01ce0	e0833002	 add         r3, r3, r2
  01ce4	e5930000	 ldr         r0, [r3]
  01ce8	eb000000	 bl          FreePhysMem
  01cec		 |$LN2@CMK_Deinit|
  01cec		 |$LN3@CMK_Deinit|

; 1139 :         }
; 1140 :     }

  01cec	eaffff6c	 b           |$LN15@CMK_Deinit|
  01cf0		 |$LN14@CMK_Deinit|

; 1141 :     CloseHandle(cmem_mutex);

  01cf0	e59f3048	 ldr         r3, [pc, #0x48]
  01cf4	e5930000	 ldr         r0, [r3]
  01cf8	eb000000	 bl          CloseHandle

; 1142 : 
; 1143 :     pCMKDevice->initialized = FALSE;

  01cfc	e59d201c	 ldr         r2, [sp, #0x1C]
  01d00	e3a03000	 mov         r3, #0
  01d04	e5823000	 str         r3, [r2]

; 1144 :     if (pCMKDevice->openCount != 0) {

  01d08	e59d301c	 ldr         r3, [sp, #0x1C]
  01d0c	e2833004	 add         r3, r3, #4
  01d10	e5933000	 ldr         r3, [r3]
  01d14	e3530000	 cmp         r3, #0
  01d18	0a000001	 beq         |$LN1@CMK_Deinit|

; 1145 :         RETAILMSG(1, (L"CMEMK: warning, deinitialized with open clients\r\n"));

  01d1c	e59f0018	 ldr         r0, [pc, #0x18]
  01d20	eb000000	 bl          NKDbgPrintfW
  01d24		 |$LN1@CMK_Deinit|

; 1146 :     }
; 1147 : 
; 1148 :     return TRUE;

  01d24	e3a03001	 mov         r3, #1
  01d28	e58d3020	 str         r3, [sp, #0x20]

; 1149 : }

  01d2c	e59d0020	 ldr         r0, [sp, #0x20]
  01d30	e28dd024	 add         sp, sp, #0x24
  01d34	e89d6000	 ldmia       sp, {sp, lr}
  01d38	e12fff1e	 bx          lr
  01d3c		 |$LN22@CMK_Deinit|
  01d3c		 |$LN23@CMK_Deinit|
  01d3c	00000000	 DCD         |??_C@_1GE@MBPJBFA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAd?$AAe?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAw?$AAi@|
  01d40		 |$LN24@CMK_Deinit|
  01d40	00000000	 DCD         |cmem_mutex|
  01d44		 |$LN25@CMK_Deinit|
  01d44	00000000	 DCD         |block_virtp|
  01d48		 |$LN26@CMK_Deinit|
  01d48	00000000	 DCD         |mem_alloc_type|
  01d4c		 |$LN27@CMK_Deinit|
  01d4c	00000000	 DCD         |block_avail_size|
  01d50		 |$LN28@CMK_Deinit|
  01d50	00000000	 DCD         |??_C@_1FI@CEPBDDGG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5@|
  01d54		 |$LN29@CMK_Deinit|
  01d54	00000000	 DCD         |??_C@_1GK@NLHGLFNO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu@|
  01d58		 |$LN30@CMK_Deinit|
  01d58	00000000	 DCD         |p_objs|
  01d5c		 |$LN31@CMK_Deinit|
  01d5c	00000000	 DCD         |??_C@_1GK@CBPANNAJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAr?$AAe?$AAe?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa?$AAs?$AAs?$AAo@|
  01d60		 |$LN32@CMK_Deinit|
  01d60	00000000	 DCD         |heap_pool|
  01d64		 |$LN33@CMK_Deinit|
  01d64	00000000	 DCD         |npools|
  01d68		 |$LN34@CMK_Deinit|
  01d68	00000000	 DCD         |??_C@_1DK@MPFCMFJO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AA?5?$AAc?$AAm?$AAe?$AAm?$AA_?$AAe?$AAx?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?6?$AA?$AA@|
  01d6c		 |$M41295|

			 ENDP  ; |CMK_Deinit|

	EXPORT	|CMK_Open|
	IMPORT	|InterlockedIncrement|

  00040			 AREA	 |.pdata|, PDATA
|$T41316| DCD	|$LN5@CMK_Open|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01d6c			 AREA	 |.text|, CODE, ARM

  01d6c		 |CMK_Open| PROC

; 1157 : {

  01d6c		 |$LN5@CMK_Open|
  01d6c	e1a0c00d	 mov         r12, sp
  01d70	e92d0007	 stmdb       sp!, {r0 - r2}
  01d74	e92d5000	 stmdb       sp!, {r12, lr}
  01d78	e24dd008	 sub         sp, sp, #8
  01d7c		 |$M41313|

; 1158 :     DEVICE_STATE *pCMKDevice = (DEVICE_STATE *)Context;

  01d7c	e59d3010	 ldr         r3, [sp, #0x10]
  01d80	e58d3000	 str         r3, [sp]

; 1159 : 
; 1160 :     InterlockedIncrement(&pCMKDevice->openCount);

  01d84	e59d3000	 ldr         r3, [sp]
  01d88	e2830004	 add         r0, r3, #4
  01d8c	eb000000	 bl          InterlockedIncrement

; 1161 : 
; 1162 :     return (Context);

  01d90	e59d3010	 ldr         r3, [sp, #0x10]
  01d94	e58d3004	 str         r3, [sp, #4]

; 1163 : }

  01d98	e59d0004	 ldr         r0, [sp, #4]
  01d9c	e28dd008	 add         sp, sp, #8
  01da0	e89d6000	 ldmia       sp, {sp, lr}
  01da4	e12fff1e	 bx          lr
  01da8		 |$M41314|

			 ENDP  ; |CMK_Open|

	EXPORT	|??_C@_1EM@DJHCFEOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM@| [ DATA ] ; `string'
	EXPORT	|CMK_Close|
	IMPORT	|InterlockedDecrement|

  00048			 AREA	 |.pdata|, PDATA
|$T41322| DCD	|$LN6@CMK_Close|
	DCD	0x40001a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DJHCFEOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "K", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "<", 0x0, " ", 0x0, "1", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01da8			 AREA	 |.text|, CODE, ARM

  01da8		 |CMK_Close| PROC

; 1172 : {

  01da8		 |$LN6@CMK_Close|
  01da8	e1a0c00d	 mov         r12, sp
  01dac	e92d0001	 stmdb       sp!, {r0}
  01db0	e92d5000	 stmdb       sp!, {r12, lr}
  01db4	e24dd008	 sub         sp, sp, #8
  01db8		 |$M41319|

; 1173 :     DEVICE_STATE *pCMKDevice = (DEVICE_STATE *)dwContext;

  01db8	e59d3010	 ldr         r3, [sp, #0x10]
  01dbc	e58d3000	 str         r3, [sp]

; 1174 : 
; 1175 :     if (pCMKDevice->openCount < 1) {

  01dc0	e59d3000	 ldr         r3, [sp]
  01dc4	e2833004	 add         r3, r3, #4
  01dc8	e5933000	 ldr         r3, [r3]
  01dcc	e3530001	 cmp         r3, #1
  01dd0	2a000004	 bcs         |$LN1@CMK_Close|

; 1176 :         RETAILMSG(1, (TEXT("CMEMK: CMK_Close() - openCount < 1!\r\n")));

  01dd4	e59f0030	 ldr         r0, [pc, #0x30]
  01dd8	eb000000	 bl          NKDbgPrintfW

; 1177 :         return FALSE;

  01ddc	e3a03000	 mov         r3, #0
  01de0	e58d3004	 str         r3, [sp, #4]
  01de4	ea000004	 b           |$LN2@CMK_Close|
  01de8		 |$LN1@CMK_Close|

; 1178 :     }
; 1179 : 
; 1180 :     InterlockedDecrement(&pCMKDevice->openCount);

  01de8	e59d3000	 ldr         r3, [sp]
  01dec	e2830004	 add         r0, r3, #4
  01df0	eb000000	 bl          InterlockedDecrement

; 1181 : 
; 1182 :     return (TRUE);

  01df4	e3a03001	 mov         r3, #1
  01df8	e58d3004	 str         r3, [sp, #4]
  01dfc		 |$LN2@CMK_Close|

; 1183 : }

  01dfc	e59d0004	 ldr         r0, [sp, #4]
  01e00	e28dd008	 add         sp, sp, #8
  01e04	e89d6000	 ldmia       sp, {sp, lr}
  01e08	e12fff1e	 bx          lr
  01e0c		 |$LN7@CMK_Close|
  01e0c		 |$LN8@CMK_Close|
  01e0c	00000000	 DCD         |??_C@_1EM@DJHCFEOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM@|
  01e10		 |$M41320|

			 ENDP  ; |CMK_Close|

	EXPORT	|CMK_Read|

  00050			 AREA	 |.pdata|, PDATA
|$T41330| DCD	|$LN5@CMK_Read|
	DCD	0x40000a04
; Function compile flags: /Odtp

  01e10			 AREA	 |.text|, CODE, ARM

  01e10		 |CMK_Read| PROC

; 1193 : {

  01e10		 |$LN5@CMK_Read|
  01e10	e1a0c00d	 mov         r12, sp
  01e14	e92d0007	 stmdb       sp!, {r0 - r2}
  01e18	e92d5000	 stmdb       sp!, {r12, lr}
  01e1c	e24dd004	 sub         sp, sp, #4
  01e20		 |$M41327|

; 1194 :     return  0;

  01e20	e3a03000	 mov         r3, #0
  01e24	e58d3000	 str         r3, [sp]

; 1195 : }

  01e28	e59d0000	 ldr         r0, [sp]
  01e2c	e28dd004	 add         sp, sp, #4
  01e30	e89d6000	 ldmia       sp, {sp, lr}
  01e34	e12fff1e	 bx          lr
  01e38		 |$M41328|

			 ENDP  ; |CMK_Read|

	EXPORT	|CMK_Write|

  00058			 AREA	 |.pdata|, PDATA
|$T41336| DCD	|$LN5@CMK_Write|
	DCD	0x40000a04
; Function compile flags: /Odtp

  01e38			 AREA	 |.text|, CODE, ARM

  01e38		 |CMK_Write| PROC

; 1204 : {

  01e38		 |$LN5@CMK_Write|
  01e38	e1a0c00d	 mov         r12, sp
  01e3c	e92d0007	 stmdb       sp!, {r0 - r2}
  01e40	e92d5000	 stmdb       sp!, {r12, lr}
  01e44	e24dd004	 sub         sp, sp, #4
  01e48		 |$M41333|

; 1205 :     return  0;

  01e48	e3a03000	 mov         r3, #0
  01e4c	e58d3000	 str         r3, [sp]

; 1206 : }

  01e50	e59d0000	 ldr         r0, [sp]
  01e54	e28dd004	 add         sp, sp, #4
  01e58	e89d6000	 ldmia       sp, {sp, lr}
  01e5c	e12fff1e	 bx          lr
  01e60		 |$M41334|

			 ENDP  ; |CMK_Write|

	EXPORT	|CMK_Seek|

  00060			 AREA	 |.pdata|, PDATA
|$T41342| DCD	|$LN5@CMK_Seek|
	DCD	0x40000a04
; Function compile flags: /Odtp

  01e60			 AREA	 |.text|, CODE, ARM

  01e60		 |CMK_Seek| PROC

; 1215 : {

  01e60		 |$LN5@CMK_Seek|
  01e60	e1a0c00d	 mov         r12, sp
  01e64	e92d0007	 stmdb       sp!, {r0 - r2}
  01e68	e92d5000	 stmdb       sp!, {r12, lr}
  01e6c	e24dd004	 sub         sp, sp, #4
  01e70		 |$M41339|

; 1216 :     return 0;

  01e70	e3a03000	 mov         r3, #0
  01e74	e58d3000	 str         r3, [sp]

; 1217 : }

  01e78	e59d0000	 ldr         r0, [sp]
  01e7c	e28dd004	 add         sp, sp, #4
  01e80	e89d6000	 ldmia       sp, {sp, lr}
  01e84	e12fff1e	 bx          lr
  01e88		 |$M41340|

			 ENDP  ; |CMK_Seek|

	EXPORT	|??_C@_1EM@MJEFGDHI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@BMAEIIKN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IJJFEPMD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GPGJMNM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@ICHJJAGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KGMCGFLP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@PINJBPBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@ONIPBDBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KLDPFPB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAp?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@DBILBIOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@LJHCIMLD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@GOLBGKGH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAN?$AAU?$AAM?$AAB?$AAL?$AAO?$AAC?$AAK?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@ONBDBAJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HCOGAHNB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAf?$AAl?$AAu?$AAs?$AAh?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@HIEOILNF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@NDPACKBE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AA?3?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@OCOOAJKP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_02KLACDDFP@WB?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_03KOECGNEM@INV?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1EI@BJJPPGGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@ODKFOIGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1NM@MJDFBKNP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AAb?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@EGDDBBFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@BEIADIOI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@LPLINNOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@IIFIHIPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@CHGMNOLN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@KFEHIKGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@JHLICFOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@MKLGDKGI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@NEHOKHNA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@EKDDKMDK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@PMKIHOPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAs?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@EDDHNKIM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@IGEFKKAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@PDOJBEOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@KFMGGDNN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@KNEBIOIE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LLFGGNAM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_04DGHHAJMG@HEAP?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_04KNJFKMFD@PHYS?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1IC@NCAFIKLL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@ECHHIHNI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAC?$AAo?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@NMPGNINP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NHBEENPF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@HMLBPOKD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@CAAHNLGC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@IKJLIPKE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|
	EXPORT	|??_C@_1IA@DGANCHDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@HIHOKAPN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@GKJGLDOM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_00CNPNBAHC@?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_06HAMDABMN@CACHED?$AA@| [ DATA ]	; `string'
	EXPORT	|CMK_IOControl|
	IMPORT	|CacheRangeFlush|
	IMPORT	|GetLastError|
	IMPORT	|VirtualFreeEx|
	IMPORT	|VirtualCopyEx|
	IMPORT	|VirtualAllocEx|
	IMPORT	|memcpy|

  00068			 AREA	 |.pdata|, PDATA
|$T41417| DCD	|$LN170@CMK_IOCont|
	DCD	0x40063e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@MJEFGDHI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@BMAEIIKN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "N", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IJJFEPMD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "N", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, ":", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GPGJMNM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAp@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "N", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, ":", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t"
	DCB	0x0, "p", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@ICHJJAGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "N", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KGMCGFLP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "D", 0x0, "D"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S", 0x0, ":", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PINJBPBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "D", 0x0, "D"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@ONIPBDBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "D", 0x0, "D"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S", 0x0, ":", 0x0, " "
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "l"
	DCB	0x0, "e", 0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KLDPFPB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAp?$AA?5?$AA?$DN@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "D", 0x0, "D"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "p", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "x", 0x0, "."
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@DBILBIOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "D", 0x0, "D"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S", 0x0, " ", 0x0, "i"
	DCB	0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@LJHCIMLD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "B", 0x0, "L", 0x0, "O"
	DCB	0x0, "C", 0x0, "K", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c"
	DCB	0x0, "t", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "l", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@GOLBGKGH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAN?$AAU?$AAM?$AAB?$AAL?$AAO?$AAC?$AAK?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "N", 0x0, "U", 0x0, "M"
	DCB	0x0, "B", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "K", 0x0, "S"
	DCB	0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "x"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@ONBDBAJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "V", 0x0, "E", 0x0, "R"
	DCB	0x0, "S", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, " ", 0x0, "i"
	DCB	0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "x", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HCOGAHNB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAf?$AAl?$AAu?$AAs?$AAh?$AAe?$AAd@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "A", 0x0, "C", 0x0, "H", 0x0, "E", 0x0, "W"
	DCB	0x0, "B", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, ":", 0x0, " "
	DCB	0x0, "f", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "#", 0x0, "l"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@HIEOILNF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "A", 0x0, "C", 0x0, "H", 0x0, "E", 0x0, "I"
	DCB	0x0, "N", 0x0, "V", 0x0, ":", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NDPACKBE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AA?3?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "A", 0x0, "C", 0x0, "H", 0x0, "E", 0x0, "W"
	DCB	0x0, "B", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "u"
	DCB	0x0, "s", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "v", 0x0, "i"
	DCB	0x0, "r", 0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, "-", 0x0, ">"
	DCB	0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@OCOOAJKP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "A", 0x0, "C", 0x0, "H", 0x0, "E", 0x0, "%"
	DCB	0x0, "s", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02KLACDDFP@WB?$AA@| DCB "WB", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03KOECGNEM@INV?$AA@| DCB "INV", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BJJPPGGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@ODKFOIGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAp?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "w", 0x0, "h"
	DCB	0x0, "i", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1NM@MJDFBKNP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AAb?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "-", 0x0, "b"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, """", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, """", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "d", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i"
	DCB	0x0, "g", 0x0, " ", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@EGDDBBFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "l", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@BEIADIOI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "l"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "<", 0x0, " ", 0x0, "o", 0x0, "l"
	DCB	0x0, "d", 0x0, "d", 0x0, "e", 0x0, "l", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "?"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LPLINNOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, ">", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, "?", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@IIFIHIPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "y"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "a", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@CHGMNOLN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "O", 0x0, "O"
	DCB	0x0, "L", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@KFEHIKGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "S", 0x0, "I", 0x0, "Z"
	DCB	0x0, "E", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@JHLICFOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "S", 0x0, "I", 0x0, "Z"
	DCB	0x0, "E", 0x0, ":", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@MKLGDKGI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "S", 0x0, "I", 0x0, "Z"
	DCB	0x0, "E", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@NEHOKHNA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "H", 0x0, "Y"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@EKDDKMDK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "H", 0x0, "Y"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "l", 0x0, "x", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, ".", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@PMKIHOPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAs?$AAe?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "M", 0x0, "K", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "C", 0x0, "M", 0x0, "E", 0x0, "M", 0x0, "_"
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, "P", 0x0, "H", 0x0, "Y", 0x0, "S", 0x0, ":", 0x0, " "
	DCB	0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "p", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@EDDHNKIM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "G", 0x0, "E", 0x0, "T", 0x0, "P", 0x0, "H", 0x0, "Y"
	DCB	0x0, "S", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@IGEFKKAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "%", 0x0, "s"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@PDOJBEOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "e", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@KFMGGDNN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "%", 0x0, "s"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "u"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "f"
	DCB	0x0, "u", 0x0, "l", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o"
	DCB	0x0, "m", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@KNEBIOIE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "%", 0x0, "s"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LLFGGNAM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "%", 0x0, "s"
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c"
	DCB	0x0, "t", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04DGHHAJMG@HEAP?$AA@| DCB "HEAP", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04KNJFKMFD@PHYS?$AA@| DCB "PHYS", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@NCAFIKLL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, " "
	DCB	0x0, "(", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@ECHHIHNI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAC?$AAo?$AAp@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "r"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, "C", 0x0, "o"
	DCB	0x0, "p", 0x0, "y", 0x0, "E", 0x0, "x", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@NMPGNINP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAb?$AAu@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NHBEENPF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@HMLBPOKD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@CAAHNLGC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "H"
	DCB	0x0, "E", 0x0, "A", 0x0, "P", 0x0, "%", 0x0, "s", 0x0, ":"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "#", 0x0, "x", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@IKJLIPKE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, ":"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "_", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "p", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@DGANCHDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, ":"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a", 0x0, "p"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "#"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@HIHOKAPN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, ":"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "m", 0x0, "u"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " "
	DCB	0x0, "<", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@GKJGLDOM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "H"
	DCB	0x0, "E", 0x0, "A", 0x0, "P", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "h", 0x0, "e", 0x0, "a", 0x0, "p", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_00CNPNBAHC@?$AA@| DCB 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06HAMDABMN@CACHED?$AA@| DCB "CACHED", 0x0	; `string'
; Function compile flags: /Odtp

  01e88			 AREA	 |.text|, CODE, ARM

  01e88		 |CMK_IOControl| PROC

; 1231 : {

  01e88		 |$LN170@CMK_IOCont|
  01e88	e1a0c00d	 mov         r12, sp
  01e8c	e92d000f	 stmdb       sp!, {r0 - r3}
  01e90	e92d5000	 stmdb       sp!, {r12, lr}
  01e94	e24ddf61	 sub         sp, sp, #0x61, 30
  01e98		 |$M41414|

; 1232 : 
; 1233 :     LIST_ENTRY *freelistp = NULL;

  01e98	e3a03000	 mov         r3, #0
  01e9c	e58d3010	 str         r3, [sp, #0x10]

; 1234 :     LIST_ENTRY *busylistp = NULL;

  01ea0	e3a03000	 mov         r3, #0
  01ea4	e58d300c	 str         r3, [sp, #0xC]

; 1235 :     LIST_ENTRY *e = NULL;

  01ea8	e3a03000	 mov         r3, #0
  01eac	e58d3058	 str         r3, [sp, #0x58]

; 1236 :     struct pool_buffer *entry;
; 1237 :     unsigned long physp;
; 1238 :     unsigned long virtp, virtp_end;
; 1239 :     size_t reqsize, size, align;
; 1240 :     int delta = MAXTYPE(int);

  01eb0	e3e03102	 mvn         r3, #2, 2
  01eb4	e58d3050	 str         r3, [sp, #0x50]

; 1241 :     int pool = -1;

  01eb8	e3e03000	 mvn         r3, #0
  01ebc	e58d3064	 str         r3, [sp, #0x64]

; 1242 :     int i;
; 1243 :     int bi;
; 1244 :     struct block_struct block;
; 1245 :     struct block_struct *pBlock;
; 1246 :     union CMEM_AllocUnion allocDesc;
; 1247 :     //PUCHAR pInBufSafe = NULL;
; 1248 :     union CMEM_AllocUnion *pAllocDesc;
; 1249 :     PVOID pUsrVA;
; 1250 :     DWORD dwCallerProcId;
; 1251 :     DWORD cacheFlag;
; 1252 : 
; 1253 :     switch (Ioctl & CMEM_IOCCMDMASK) {

  01ec0	e59d3190	 ldr         r3, [sp, #0x190]
  01ec4	e20330ff	 and         r3, r3, #0xFF
  01ec8	e58d30c8	 str         r3, [sp, #0xC8]
  01ecc	e59d30c8	 ldr         r3, [sp, #0xC8]
  01ed0	e2433001	 sub         r3, r3, #1
  01ed4	e58d30c8	 str         r3, [sp, #0xC8]
  01ed8	e59d30c8	 ldr         r3, [sp, #0xC8]
  01edc	e353000c	 cmp         r3, #0xC
  01ee0	8a0005e4	 bhi         |$LN1@CMK_IOCont|
  01ee4	e59d20c8	 ldr         r2, [sp, #0xC8]
  01ee8	e1a03102	 mov         r3, r2, lsl #2
  01eec	e083300f	 add         r3, r3, pc
  01ef0	e5933004	 ldr         r3, [r3, #4]
  01ef4	e08ff003	 add         pc, pc, r3
  01ef8		 |$LN154@CMK_IOCont|
  01ef8		 |$LN153@CMK_IOCont|
  01ef8		 |$LN155@CMK_IOCont|
  01ef8	000003f8	 DCD         0x3f8
  01efc		 |$LN156@CMK_IOCont|
  01efc	00000030	 DCD         0x30
  01f00		 |$LN157@CMK_IOCont|
  01f00	0000090c	 DCD         0x90c
  01f04		 |$LN158@CMK_IOCont|
  01f04	00000d88	 DCD         0xd88
  01f08		 |$LN159@CMK_IOCont|
  01f08	00000eac	 DCD         0xeac
  01f0c		 |$LN160@CMK_IOCont|
  01f0c	00000ff0	 DCD         0xff0
  01f10		 |$LN161@CMK_IOCont|
  01f10	000012c0	 DCD         0x12c0
  01f14		 |$LN162@CMK_IOCont|
  01f14	0000142c	 DCD         0x142c
  01f18		 |$LN163@CMK_IOCont|
  01f18	000014bc	 DCD         0x14bc
  01f1c		 |$LN164@CMK_IOCont|
  01f1c	0000177c	 DCD         0x177c
  01f20		 |$LN165@CMK_IOCont|
  01f20	00001474	 DCD         0x1474
  01f24		 |$LN166@CMK_IOCont|
  01f24	00001574	 DCD         0x1574
  01f28		 |$LN167@CMK_IOCont|
  01f28	0000167c	 DCD         0x167c
  01f2c		 |$LN108@CMK_IOCont|

; 1254 :         case CMEM_IOCALLOCHEAP:
; 1255 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  01f2c	e59d3194	 ldr         r3, [sp, #0x194]
  01f30	e3530000	 cmp         r3, #0
  01f34	0a000002	 beq         |$LN106@CMK_IOCont|
  01f38	e59d3198	 ldr         r3, [sp, #0x198]
  01f3c	e3530010	 cmp         r3, #0x10
  01f40	2a000002	 bcs         |$LN107@CMK_IOCont|
  01f44		 |$LN106@CMK_IOCont|

; 1256 :                 return FALSE;

  01f44	e3a03000	 mov         r3, #0
  01f48	e58d3090	 str         r3, [sp, #0x90]
  01f4c	ea0005d0	 b           |$LN111@CMK_IOCont|
  01f50		 |$LN107@CMK_IOCont|

; 1257 :             }
; 1258 :             pAllocDesc = (union CMEM_AllocUnion*)pInBuf;

  01f50	e59d3194	 ldr         r3, [sp, #0x194]
  01f54	e58d3008	 str         r3, [sp, #8]

; 1259 : 
; 1260 :             size = pAllocDesc->alloc_heap_inparams.size;

  01f58	e59d3008	 ldr         r3, [sp, #8]
  01f5c	e5933000	 ldr         r3, [r3]
  01f60	e58d3024	 str         r3, [sp, #0x24]

; 1261 :             align = pAllocDesc->alloc_heap_inparams.align;

  01f64	e59d3008	 ldr         r3, [sp, #8]
  01f68	e2833004	 add         r3, r3, #4
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e58d3020	 str         r3, [sp, #0x20]

; 1262 :             bi = pAllocDesc->alloc_heap_inparams.blockid;

  01f74	e59d3008	 ldr         r3, [sp, #8]
  01f78	e2833008	 add         r3, r3, #8
  01f7c	e5933000	 ldr         r3, [r3]
  01f80	e58d304c	 str         r3, [sp, #0x4C]

; 1263 :             dwCallerProcId = pAllocDesc->alloc_heap_inparams.dwProcId;

  01f84	e59d3008	 ldr         r3, [sp, #8]
  01f88	e283300c	 add         r3, r3, #0xC
  01f8c	e5933000	 ldr         r3, [r3]
  01f90	e58d3038	 str         r3, [sp, #0x38]

; 1264 : 
; 1265 :             __D("ALLOCHEAP%s ioctl received on heap pool for block %d\n",
; 1266 :                     Ioctl & CMEM_CACHED ? "CACHED" : "", bi);

  01f94	e59d3190	 ldr         r3, [sp, #0x190]
  01f98	e3130b02	 tst         r3, #2, 22
  01f9c	0a000002	 beq         |$LN113@CMK_IOCont|
  01fa0	e59f36f0	 ldr         r3, [pc, #0x6F0]
  01fa4	e58d30cc	 str         r3, [sp, #0xCC]
  01fa8	ea000001	 b           |$LN114@CMK_IOCont|
  01fac		 |$LN113@CMK_IOCont|
  01fac	e59f36e0	 ldr         r3, [pc, #0x6E0]
  01fb0	e58d30cc	 str         r3, [sp, #0xCC]
  01fb4		 |$LN114@CMK_IOCont|
  01fb4	e59d204c	 ldr         r2, [sp, #0x4C]
  01fb8	e59d10cc	 ldr         r1, [sp, #0xCC]
  01fbc	e59f0700	 ldr         r0, [pc, #0x700]
  01fc0	eb000000	 bl          NKDbgPrintfW

; 1267 : 
; 1268 :             if (bi >= NBLOCKS) {

  01fc4	e59d304c	 ldr         r3, [sp, #0x4C]
  01fc8	e3530002	 cmp         r3, #2
  01fcc	ba000006	 blt         |$LN105@CMK_IOCont|

; 1269 :                 __E("ioctl: invalid block id %d, must be < %d\n",
; 1270 :                         bi, NBLOCKS);

  01fd0	e3a02002	 mov         r2, #2
  01fd4	e59d104c	 ldr         r1, [sp, #0x4C]
  01fd8	e59f06cc	 ldr         r0, [pc, #0x6CC]
  01fdc	eb000000	 bl          NKDbgPrintfW

; 1271 :                 return FALSE;

  01fe0	e3a03000	 mov         r3, #0
  01fe4	e58d3090	 str         r3, [sp, #0x90]
  01fe8	ea0005a9	 b           |$LN111@CMK_IOCont|
  01fec		 |$LN105@CMK_IOCont|

; 1272 :             }
; 1273 : 
; 1274 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  01fec	e3e01000	 mvn         r1, #0
  01ff0	e59f3694	 ldr         r3, [pc, #0x694]
  01ff4	e5930000	 ldr         r0, [r3]
  01ff8	eb000000	 bl          WaitForSingleObject
  01ffc	e58d00d0	 str         r0, [sp, #0xD0]
  02000	e59d30d0	 ldr         r3, [sp, #0xD0]
  02004	e3530000	 cmp         r3, #0
  02008	0a000002	 beq         |$LN104@CMK_IOCont|

; 1275 :                 return FALSE;

  0200c	e3a03000	 mov         r3, #0
  02010	e58d3090	 str         r3, [sp, #0x90]
  02014	ea00059e	 b           |$LN111@CMK_IOCont|
  02018		 |$LN104@CMK_IOCont|

; 1276 :             }
; 1277 : 
; 1278 :             virtp = (unsigned long)HeapMem_alloc(bi, size, align, ALLOCRUN);

  02018	e3a03000	 mov         r3, #0
  0201c	e59d2020	 ldr         r2, [sp, #0x20]
  02020	e59d1024	 ldr         r1, [sp, #0x24]
  02024	e59d004c	 ldr         r0, [sp, #0x4C]
  02028	eb000000	 bl          HeapMem_alloc
  0202c	e58d00d4	 str         r0, [sp, #0xD4]
  02030	e59d30d4	 ldr         r3, [sp, #0xD4]
  02034	e58d301c	 str         r3, [sp, #0x1C]

; 1279 :             if (virtp == (unsigned long)NULL) {

  02038	e59d301c	 ldr         r3, [sp, #0x1C]
  0203c	e3530000	 cmp         r3, #0
  02040	1a000008	 bne         |$LN103@CMK_IOCont|

; 1280 :                 __E("ioctl: failed to allocate heap buffer of size %#x\n",
; 1281 :                         size);

  02044	e59d1024	 ldr         r1, [sp, #0x24]
  02048	e59f0670	 ldr         r0, [pc, #0x670]
  0204c	eb000000	 bl          NKDbgPrintfW

; 1282 :                 ReleaseMutex(cmem_mutex);

  02050	e59f3634	 ldr         r3, [pc, #0x634]
  02054	e5930000	 ldr         r0, [r3]
  02058	eb000000	 bl          ReleaseMutex

; 1283 :                 return FALSE;

  0205c	e3a03000	 mov         r3, #0
  02060	e58d3090	 str         r3, [sp, #0x90]
  02064	ea00058a	 b           |$LN111@CMK_IOCont|
  02068		 |$LN103@CMK_IOCont|

; 1284 :             }
; 1285 : 
; 1286 :             entry = (pool_buffer*)malloc(sizeof(struct pool_buffer));

  02068	e3a00024	 mov         r0, #0x24
  0206c	eb000000	 bl          malloc
  02070	e58d00d8	 str         r0, [sp, #0xD8]
  02074	e59d30d8	 ldr         r3, [sp, #0xD8]
  02078	e58d3054	 str         r3, [sp, #0x54]

; 1287 : 
; 1288 :             cacheFlag = (Ioctl & CMEM_CACHED) ? 0 : PAGE_NOCACHE;

  0207c	e59d3190	 ldr         r3, [sp, #0x190]
  02080	e3130b02	 tst         r3, #2, 22
  02084	0a000002	 beq         |$LN115@CMK_IOCont|
  02088	e3a03000	 mov         r3, #0
  0208c	e58d30dc	 str         r3, [sp, #0xDC]
  02090	ea000001	 b           |$LN116@CMK_IOCont|
  02094		 |$LN115@CMK_IOCont|
  02094	e3a03c02	 mov         r3, #2, 24
  02098	e58d30dc	 str         r3, [sp, #0xDC]
  0209c		 |$LN116@CMK_IOCont|
  0209c	e59d30dc	 ldr         r3, [sp, #0xDC]
  020a0	e58d3018	 str         r3, [sp, #0x18]

; 1289 : 
; 1290 :             pUsrVA = VirtualAllocEx((HANDLE)dwCallerProcId, NULL, size,
; 1291 :                     MEM_RESERVE, PAGE_READWRITE | cacheFlag);

  020a4	e59d3018	 ldr         r3, [sp, #0x18]
  020a8	e3833004	 orr         r3, r3, #4
  020ac	e58d3000	 str         r3, [sp]
  020b0	e3a03a02	 mov         r3, #2, 20
  020b4	e59d2024	 ldr         r2, [sp, #0x24]
  020b8	e3a01000	 mov         r1, #0
  020bc	e59d0038	 ldr         r0, [sp, #0x38]
  020c0	eb000000	 bl          VirtualAllocEx
  020c4	e58d00e0	 str         r0, [sp, #0xE0]
  020c8	e59d30e0	 ldr         r3, [sp, #0xE0]
  020cc	e58d3028	 str         r3, [sp, #0x28]

; 1292 : 
; 1293 :             if (!entry || !pUsrVA ||
; 1294 :                     !VirtualCopyEx((HANDLE)dwCallerProcId, pUsrVA,
; 1295 :                             (HANDLE)GetCurrentProcessId(), (PVOID)virtp, size,
; 1296 :                             PAGE_READWRITE | cacheFlag)) {

  020d0	e59d3054	 ldr         r3, [sp, #0x54]
  020d4	e3530000	 cmp         r3, #0
  020d8	0a000012	 beq         |$LN101@CMK_IOCont|
  020dc	e59d3028	 ldr         r3, [sp, #0x28]
  020e0	e3530000	 cmp         r3, #0
  020e4	0a00000f	 beq         |$LN101@CMK_IOCont|
  020e8	eb000000	 bl          GetCurrentProcessId
  020ec	e58d00e4	 str         r0, [sp, #0xE4]
  020f0	e59d3018	 ldr         r3, [sp, #0x18]
  020f4	e3833004	 orr         r3, r3, #4
  020f8	e58d3004	 str         r3, [sp, #4]
  020fc	e59d3024	 ldr         r3, [sp, #0x24]
  02100	e58d3000	 str         r3, [sp]
  02104	e59d301c	 ldr         r3, [sp, #0x1C]
  02108	e59d20e4	 ldr         r2, [sp, #0xE4]
  0210c	e59d1028	 ldr         r1, [sp, #0x28]
  02110	e59d0038	 ldr         r0, [sp, #0x38]
  02114	eb000000	 bl          VirtualCopyEx
  02118	e58d00e8	 str         r0, [sp, #0xE8]
  0211c	e59d30e8	 ldr         r3, [sp, #0xE8]
  02120	e3530000	 cmp         r3, #0
  02124	1a00000b	 bne         |$LN102@CMK_IOCont|
  02128		 |$LN101@CMK_IOCont|

; 1297 :                 __E("ioctl: failed to malloc pool_buffer struct for heap");

  02128	e59f058c	 ldr         r0, [pc, #0x58C]
  0212c	eb000000	 bl          NKDbgPrintfW

; 1298 :                 HeapMem_free(bi, (void *)virtp, size);

  02130	e59d2024	 ldr         r2, [sp, #0x24]
  02134	e59d101c	 ldr         r1, [sp, #0x1C]
  02138	e59d004c	 ldr         r0, [sp, #0x4C]
  0213c	eb000000	 bl          HeapMem_free

; 1299 :                 ReleaseMutex(cmem_mutex);

  02140	e59f3544	 ldr         r3, [pc, #0x544]
  02144	e5930000	 ldr         r0, [r3]
  02148	eb000000	 bl          ReleaseMutex

; 1300 :                 return FALSE;

  0214c	e3a03000	 mov         r3, #0
  02150	e58d3090	 str         r3, [sp, #0x90]
  02154	ea00054e	 b           |$LN111@CMK_IOCont|
  02158		 |$LN102@CMK_IOCont|

; 1301 :             }
; 1302 : 
; 1303 :             physp = get_phys(virtp);

  02158	e59d001c	 ldr         r0, [sp, #0x1C]
  0215c	eb000000	 bl          get_phys
  02160	e58d00ec	 str         r0, [sp, #0xEC]
  02164	e59d30ec	 ldr         r3, [sp, #0xEC]
  02168	e58d302c	 str         r3, [sp, #0x2C]

; 1304 : 
; 1305 :             entry->id = heap_pool[bi];

  0216c	e59d104c	 ldr         r1, [sp, #0x4C]
  02170	e3a03004	 mov         r3, #4
  02174	e0020391	 mul         r2, r1, r3
  02178	e59f3538	 ldr         r3, [pc, #0x538]
  0217c	e0831002	 add         r1, r3, r2
  02180	e59d3054	 ldr         r3, [sp, #0x54]
  02184	e2832008	 add         r2, r3, #8
  02188	e5913000	 ldr         r3, [r1]
  0218c	e5823000	 str         r3, [r2]

; 1306 :             entry->physp = physp;

  02190	e59d3054	 ldr         r3, [sp, #0x54]
  02194	e283200c	 add         r2, r3, #0xC
  02198	e59d302c	 ldr         r3, [sp, #0x2C]
  0219c	e5823000	 str         r3, [r2]

; 1307 :             entry->kvirtp = virtp;

  021a0	e59d3054	 ldr         r3, [sp, #0x54]
  021a4	e2832014	 add         r2, r3, #0x14
  021a8	e59d301c	 ldr         r3, [sp, #0x1C]
  021ac	e5823000	 str         r3, [r2]

; 1308 :             entry->size = size;

  021b0	e59d3054	 ldr         r3, [sp, #0x54]
  021b4	e2832018	 add         r2, r3, #0x18
  021b8	e59d3024	 ldr         r3, [sp, #0x24]
  021bc	e5823000	 str         r3, [r2]

; 1309 :             entry->flags = Ioctl & ~CMEM_IOCCMDMASK;

  021c0	e59d2190	 ldr         r2, [sp, #0x190]
  021c4	e3e030ff	 mvn         r3, #0xFF
  021c8	e0022003	 and         r2, r2, r3
  021cc	e59d3054	 ldr         r3, [sp, #0x54]
  021d0	e2833010	 add         r3, r3, #0x10
  021d4	e5832000	 str         r2, [r3]

; 1310 :             entry->pUsrVA = pUsrVA;

  021d8	e59d3054	 ldr         r3, [sp, #0x54]
  021dc	e283201c	 add         r2, r3, #0x1C
  021e0	e59d3028	 ldr         r3, [sp, #0x28]
  021e4	e5823000	 str         r3, [r2]

; 1311 :             entry->dwUsrProcId = dwCallerProcId;

  021e8	e59d3054	 ldr         r3, [sp, #0x54]
  021ec	e2832020	 add         r2, r3, #0x20
  021f0	e59d3038	 ldr         r3, [sp, #0x38]
  021f4	e5823000	 str         r3, [r2]

; 1312 : 
; 1313 :             busylistp = &p_objs[bi][heap_pool[bi]].busylist;

  021f8	e59d104c	 ldr         r1, [sp, #0x4C]
  021fc	e3a03c0e	 mov         r3, #0xE, 24
  02200	e0020391	 mul         r2, r1, r3
  02204	e59f3490	 ldr         r3, [pc, #0x490]
  02208	e0830002	 add         r0, r3, r2
  0220c	e59d104c	 ldr         r1, [sp, #0x4C]
  02210	e3a03004	 mov         r3, #4
  02214	e0020391	 mul         r2, r1, r3
  02218	e59f3498	 ldr         r3, [pc, #0x498]
  0221c	e0833002	 add         r3, r3, r2
  02220	e5932000	 ldr         r2, [r3]
  02224	e3a0301c	 mov         r3, #0x1C
  02228	e0030392	 mul         r3, r2, r3
  0222c	e0803003	 add         r3, r0, r3
  02230	e2833008	 add         r3, r3, #8
  02234	e58d300c	 str         r3, [sp, #0xC]

; 1314 :             //list_add_tail(&entry->element, busylistp);
; 1315 :             InsertTailList(busylistp, &entry->element);

  02238	e59d300c	 ldr         r3, [sp, #0xC]
  0223c	e58d3070	 str         r3, [sp, #0x70]
  02240	e59d3070	 ldr         r3, [sp, #0x70]
  02244	e2833004	 add         r3, r3, #4
  02248	e5933000	 ldr         r3, [r3]
  0224c	e58d306c	 str         r3, [sp, #0x6C]
  02250	e59d2070	 ldr         r2, [sp, #0x70]
  02254	e59d3054	 ldr         r3, [sp, #0x54]
  02258	e5832000	 str         r2, [r3]
  0225c	e59d3054	 ldr         r3, [sp, #0x54]
  02260	e2832004	 add         r2, r3, #4
  02264	e59d306c	 ldr         r3, [sp, #0x6C]
  02268	e5823000	 str         r3, [r2]
  0226c	e59d2054	 ldr         r2, [sp, #0x54]
  02270	e59d306c	 ldr         r3, [sp, #0x6C]
  02274	e5832000	 str         r2, [r3]
  02278	e59d3070	 ldr         r3, [sp, #0x70]
  0227c	e2832004	 add         r2, r3, #4
  02280	e59d3054	 ldr         r3, [sp, #0x54]
  02284	e5823000	 str         r3, [r2]

; 1316 : 
; 1317 :             ReleaseMutex(cmem_mutex);

  02288	e59f33fc	 ldr         r3, [pc, #0x3FC]
  0228c	e5930000	 ldr         r0, [r3]
  02290	eb000000	 bl          ReleaseMutex

; 1318 : 
; 1319 :             pAllocDesc->physp = physp;

  02294	e59d202c	 ldr         r2, [sp, #0x2C]
  02298	e59d3008	 ldr         r3, [sp, #8]
  0229c	e5832000	 str         r2, [r3]

; 1320 :             pAllocDesc->virtp = (unsigned long)pUsrVA;

  022a0	e59d2028	 ldr         r2, [sp, #0x28]
  022a4	e59d3008	 ldr         r3, [sp, #8]
  022a8	e5832000	 str         r2, [r3]

; 1321 : 
; 1322 :             __D("ALLOCHEAP%s: allocated %#x size buffer at %#lx (phys address)\n",
; 1323 :                     Ioctl & CMEM_CACHED ? "CACHED" : "", entry->size,
; 1324 :                     entry->physp);

  022ac	e59d3190	 ldr         r3, [sp, #0x190]
  022b0	e3130b02	 tst         r3, #2, 22
  022b4	0a000002	 beq         |$LN117@CMK_IOCont|
  022b8	e59f33d8	 ldr         r3, [pc, #0x3D8]
  022bc	e58d30f0	 str         r3, [sp, #0xF0]
  022c0	ea000001	 b           |$LN118@CMK_IOCont|
  022c4		 |$LN117@CMK_IOCont|
  022c4	e59f33c8	 ldr         r3, [pc, #0x3C8]
  022c8	e58d30f0	 str         r3, [sp, #0xF0]
  022cc		 |$LN118@CMK_IOCont|
  022cc	e59d3054	 ldr         r3, [sp, #0x54]
  022d0	e283300c	 add         r3, r3, #0xC
  022d4	e5933000	 ldr         r3, [r3]
  022d8	e59d2054	 ldr         r2, [sp, #0x54]
  022dc	e2822018	 add         r2, r2, #0x18
  022e0	e5922000	 ldr         r2, [r2]
  022e4	e59d10f0	 ldr         r1, [sp, #0xF0]
  022e8	e59f03c4	 ldr         r0, [pc, #0x3C4]
  022ec	eb000000	 bl          NKDbgPrintfW

; 1325 : 
; 1326 :             break;

  022f0	ea0004e5	 b           |$LN109@CMK_IOCont|
  022f4		 |$LN97@CMK_IOCont|

; 1327 : 
; 1328 :             /*
; 1329 :              * argp contains a pointer to an alloc descriptor coming in, and the
; 1330 :              * physical address and size of the allocated buffer when returning.
; 1331 :              */
; 1332 :         case CMEM_IOCALLOC:
; 1333 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  022f4	e59d3194	 ldr         r3, [sp, #0x194]
  022f8	e3530000	 cmp         r3, #0
  022fc	0a000002	 beq         |$LN95@CMK_IOCont|
  02300	e59d3198	 ldr         r3, [sp, #0x198]
  02304	e3530010	 cmp         r3, #0x10
  02308	2a000002	 bcs         |$LN96@CMK_IOCont|
  0230c		 |$LN95@CMK_IOCont|

; 1334 :                 return FALSE;

  0230c	e3a03000	 mov         r3, #0
  02310	e58d3090	 str         r3, [sp, #0x90]
  02314	ea0004de	 b           |$LN111@CMK_IOCont|
  02318		 |$LN96@CMK_IOCont|

; 1335 :             }
; 1336 :             pAllocDesc = (union CMEM_AllocUnion*)pInBuf;

  02318	e59d3194	 ldr         r3, [sp, #0x194]
  0231c	e58d3008	 str         r3, [sp, #8]

; 1337 : 
; 1338 :             pool = pAllocDesc->alloc_pool_inparams.poolid;

  02320	e59d3008	 ldr         r3, [sp, #8]
  02324	e5933000	 ldr         r3, [r3]
  02328	e58d3064	 str         r3, [sp, #0x64]

; 1339 :             bi = pAllocDesc->alloc_pool_inparams.blockid;

  0232c	e59d3008	 ldr         r3, [sp, #8]
  02330	e2833004	 add         r3, r3, #4
  02334	e5933000	 ldr         r3, [r3]
  02338	e58d304c	 str         r3, [sp, #0x4C]

; 1340 :             dwCallerProcId = pAllocDesc->alloc_pool_inparams.dwProcId;

  0233c	e59d3008	 ldr         r3, [sp, #8]
  02340	e2833008	 add         r3, r3, #8
  02344	e5933000	 ldr         r3, [r3]
  02348	e58d3038	 str         r3, [sp, #0x38]

; 1341 : 
; 1342 :             __D("ALLOC%s ioctl received on pool %d for memory block %d\n",
; 1343 :                     Ioctl & CMEM_CACHED ? "CACHED" : "", pool, bi);

  0234c	e59d3190	 ldr         r3, [sp, #0x190]
  02350	e3130b02	 tst         r3, #2, 22
  02354	0a000002	 beq         |$LN119@CMK_IOCont|
  02358	e59f3338	 ldr         r3, [pc, #0x338]
  0235c	e58d30f4	 str         r3, [sp, #0xF4]
  02360	ea000001	 b           |$LN120@CMK_IOCont|
  02364		 |$LN119@CMK_IOCont|
  02364	e59f3328	 ldr         r3, [pc, #0x328]
  02368	e58d30f4	 str         r3, [sp, #0xF4]
  0236c		 |$LN120@CMK_IOCont|
  0236c	e59d304c	 ldr         r3, [sp, #0x4C]
  02370	e59d2064	 ldr         r2, [sp, #0x64]
  02374	e59d10f4	 ldr         r1, [sp, #0xF4]
  02378	e59f0330	 ldr         r0, [pc, #0x330]
  0237c	eb000000	 bl          NKDbgPrintfW

; 1344 : 
; 1345 :             if (bi >= NBLOCKS) {

  02380	e59d304c	 ldr         r3, [sp, #0x4C]
  02384	e3530002	 cmp         r3, #2
  02388	ba000006	 blt         |$LN94@CMK_IOCont|

; 1346 :                 __E("ioctl: invalid block id %d, must be < %d\n",
; 1347 :                         bi, NBLOCKS);

  0238c	e3a02002	 mov         r2, #2
  02390	e59d104c	 ldr         r1, [sp, #0x4C]
  02394	e59f0310	 ldr         r0, [pc, #0x310]
  02398	eb000000	 bl          NKDbgPrintfW

; 1348 :                 return FALSE;

  0239c	e3a03000	 mov         r3, #0
  023a0	e58d3090	 str         r3, [sp, #0x90]
  023a4	ea0004ba	 b           |$LN111@CMK_IOCont|
  023a8		 |$LN94@CMK_IOCont|

; 1349 :             }
; 1350 : 
; 1351 :             if (pool >= npools[bi] || pool < 0) {

  023a8	e59d104c	 ldr         r1, [sp, #0x4C]
  023ac	e3a03004	 mov         r3, #4
  023b0	e0020391	 mul         r2, r1, r3
  023b4	e59f32ec	 ldr         r3, [pc, #0x2EC]
  023b8	e0833002	 add         r3, r3, r2
  023bc	e59d2064	 ldr         r2, [sp, #0x64]
  023c0	e5933000	 ldr         r3, [r3]
  023c4	e1520003	 cmp         r2, r3
  023c8	aa000002	 bge         |$LN92@CMK_IOCont|
  023cc	e59d3064	 ldr         r3, [sp, #0x64]
  023d0	e3530000	 cmp         r3, #0
  023d4	aa00000e	 bge         |$LN93@CMK_IOCont|
  023d8		 |$LN92@CMK_IOCont|

; 1352 :                 __E("ALLOC%s: invalid pool (%d) passed.\n",
; 1353 :                         Ioctl & CMEM_CACHED ? "CACHED" : "", pool);

  023d8	e59d3190	 ldr         r3, [sp, #0x190]
  023dc	e3130b02	 tst         r3, #2, 22
  023e0	0a000002	 beq         |$LN121@CMK_IOCont|
  023e4	e59f32ac	 ldr         r3, [pc, #0x2AC]
  023e8	e58d30f8	 str         r3, [sp, #0xF8]
  023ec	ea000001	 b           |$LN122@CMK_IOCont|
  023f0		 |$LN121@CMK_IOCont|
  023f0	e59f329c	 ldr         r3, [pc, #0x29C]
  023f4	e58d30f8	 str         r3, [sp, #0xF8]
  023f8		 |$LN122@CMK_IOCont|
  023f8	e59d2064	 ldr         r2, [sp, #0x64]
  023fc	e59d10f8	 ldr         r1, [sp, #0xF8]
  02400	e59f029c	 ldr         r0, [pc, #0x29C]
  02404	eb000000	 bl          NKDbgPrintfW

; 1354 :                 return FALSE;

  02408	e3a03000	 mov         r3, #0
  0240c	e58d3090	 str         r3, [sp, #0x90]
  02410	ea00049f	 b           |$LN111@CMK_IOCont|
  02414		 |$LN93@CMK_IOCont|

; 1355 :             }
; 1356 : 
; 1357 :             freelistp = &p_objs[bi][pool].freelist;

  02414	e59d104c	 ldr         r1, [sp, #0x4C]
  02418	e3a03c0e	 mov         r3, #0xE, 24
  0241c	e0020391	 mul         r2, r1, r3
  02420	e59f3274	 ldr         r3, [pc, #0x274]
  02424	e0831002	 add         r1, r3, r2
  02428	e59d2064	 ldr         r2, [sp, #0x64]
  0242c	e3a0301c	 mov         r3, #0x1C
  02430	e0030392	 mul         r3, r2, r3
  02434	e0813003	 add         r3, r1, r3
  02438	e58d3010	 str         r3, [sp, #0x10]

; 1358 :             busylistp = &p_objs[bi][pool].busylist;

  0243c	e59d104c	 ldr         r1, [sp, #0x4C]
  02440	e3a03c0e	 mov         r3, #0xE, 24
  02444	e0020391	 mul         r2, r1, r3
  02448	e59f324c	 ldr         r3, [pc, #0x24C]
  0244c	e0831002	 add         r1, r3, r2
  02450	e59d2064	 ldr         r2, [sp, #0x64]
  02454	e3a0301c	 mov         r3, #0x1C
  02458	e0030392	 mul         r3, r2, r3
  0245c	e0813003	 add         r3, r1, r3
  02460	e2833008	 add         r3, r3, #8
  02464	e58d300c	 str         r3, [sp, #0xC]

; 1359 : 
; 1360 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  02468	e3e01000	 mvn         r1, #0
  0246c	e59f3218	 ldr         r3, [pc, #0x218]
  02470	e5930000	 ldr         r0, [r3]
  02474	eb000000	 bl          WaitForSingleObject
  02478	e58d00fc	 str         r0, [sp, #0xFC]
  0247c	e59d30fc	 ldr         r3, [sp, #0xFC]
  02480	e3530000	 cmp         r3, #0
  02484	0a000002	 beq         |$LN91@CMK_IOCont|

; 1361 :                 return FALSE;

  02488	e3a03000	 mov         r3, #0
  0248c	e58d3090	 str         r3, [sp, #0x90]
  02490	ea00047f	 b           |$LN111@CMK_IOCont|
  02494		 |$LN91@CMK_IOCont|

; 1362 :             }
; 1363 : 
; 1364 :             e = freelistp->Flink;

  02494	e59d3010	 ldr         r3, [sp, #0x10]
  02498	e5933000	 ldr         r3, [r3]
  0249c	e58d3058	 str         r3, [sp, #0x58]

; 1365 :             if (e == freelistp) {

  024a0	e59d2058	 ldr         r2, [sp, #0x58]
  024a4	e59d3010	 ldr         r3, [sp, #0x10]
  024a8	e1520003	 cmp         r2, r3
  024ac	1a000011	 bne         |$LN90@CMK_IOCont|

; 1366 :                 __E("ALLOC%s: No free buffers available for pool %d\n",
; 1367 :                         Ioctl & CMEM_CACHED ? "CACHED" : "", pool);

  024b0	e59d3190	 ldr         r3, [sp, #0x190]
  024b4	e3130b02	 tst         r3, #2, 22
  024b8	0a000002	 beq         |$LN123@CMK_IOCont|
  024bc	e59f31d4	 ldr         r3, [pc, #0x1D4]
  024c0	e58d3100	 str         r3, [sp, #0x100]
  024c4	ea000001	 b           |$LN124@CMK_IOCont|
  024c8		 |$LN123@CMK_IOCont|
  024c8	e59f31c4	 ldr         r3, [pc, #0x1C4]
  024cc	e58d3100	 str         r3, [sp, #0x100]
  024d0		 |$LN124@CMK_IOCont|
  024d0	e59d2064	 ldr         r2, [sp, #0x64]
  024d4	e59d1100	 ldr         r1, [sp, #0x100]
  024d8	e59f01c0	 ldr         r0, [pc, #0x1C0]
  024dc	eb000000	 bl          NKDbgPrintfW

; 1368 :                 ReleaseMutex(cmem_mutex);

  024e0	e59f31a4	 ldr         r3, [pc, #0x1A4]
  024e4	e5930000	 ldr         r0, [r3]
  024e8	eb000000	 bl          ReleaseMutex

; 1369 :                 return FALSE;

  024ec	e3a03000	 mov         r3, #0
  024f0	e58d3090	 str         r3, [sp, #0x90]
  024f4	ea000466	 b           |$LN111@CMK_IOCont|
  024f8		 |$LN90@CMK_IOCont|

; 1370 :             }
; 1371 :             entry = CONTAINING_RECORD(e, struct pool_buffer, element);

  024f8	e59d3058	 ldr         r3, [sp, #0x58]
  024fc	e58d3054	 str         r3, [sp, #0x54]

; 1372 : 
; 1373 :             cacheFlag = (Ioctl & CMEM_CACHED) ? 0 : PAGE_NOCACHE;

  02500	e59d3190	 ldr         r3, [sp, #0x190]
  02504	e3130b02	 tst         r3, #2, 22
  02508	0a000002	 beq         |$LN125@CMK_IOCont|
  0250c	e3a03000	 mov         r3, #0
  02510	e58d3104	 str         r3, [sp, #0x104]
  02514	ea000001	 b           |$LN126@CMK_IOCont|
  02518		 |$LN125@CMK_IOCont|
  02518	e3a03c02	 mov         r3, #2, 24
  0251c	e58d3104	 str         r3, [sp, #0x104]
  02520		 |$LN126@CMK_IOCont|
  02520	e59d3104	 ldr         r3, [sp, #0x104]
  02524	e58d3018	 str         r3, [sp, #0x18]

; 1374 : 
; 1375 :             pAllocDesc->alloc_pool_outparams.physp = entry->physp;

  02528	e59d3054	 ldr         r3, [sp, #0x54]
  0252c	e283300c	 add         r3, r3, #0xC
  02530	e5932000	 ldr         r2, [r3]
  02534	e59d3008	 ldr         r3, [sp, #8]
  02538	e5832000	 str         r2, [r3]

; 1376 :             pAllocDesc->alloc_pool_outparams.size = p_objs[bi][pool].size;

  0253c	e59d104c	 ldr         r1, [sp, #0x4C]
  02540	e3a03c0e	 mov         r3, #0xE, 24
  02544	e0020391	 mul         r2, r1, r3
  02548	e59f314c	 ldr         r3, [pc, #0x14C]
  0254c	e0831002	 add         r1, r3, r2
  02550	e59d2064	 ldr         r2, [sp, #0x64]
  02554	e3a0301c	 mov         r3, #0x1C
  02558	e0030392	 mul         r3, r2, r3
  0255c	e0813003	 add         r3, r1, r3
  02560	e2831014	 add         r1, r3, #0x14
  02564	e59d3008	 ldr         r3, [sp, #8]
  02568	e2832008	 add         r2, r3, #8
  0256c	e5913000	 ldr         r3, [r1]
  02570	e5823000	 str         r3, [r2]

; 1377 : 
; 1378 :             pUsrVA = VirtualAllocEx((HANDLE)dwCallerProcId, NULL,
; 1379 :                     p_objs[bi][pool].size, MEM_RESERVE,
; 1380 :                     PAGE_READWRITE | cacheFlag);

  02574	e59d3018	 ldr         r3, [sp, #0x18]
  02578	e3833004	 orr         r3, r3, #4
  0257c	e58d3000	 str         r3, [sp]
  02580	e3a03a02	 mov         r3, #2, 20
  02584	e59d004c	 ldr         r0, [sp, #0x4C]
  02588	e3a02c0e	 mov         r2, #0xE, 24
  0258c	e0010290	 mul         r1, r0, r2
  02590	e59f2104	 ldr         r2, [pc, #0x104]
  02594	e0820001	 add         r0, r2, r1
  02598	e59d1064	 ldr         r1, [sp, #0x64]
  0259c	e3a0201c	 mov         r2, #0x1C
  025a0	e0020291	 mul         r2, r1, r2
  025a4	e0802002	 add         r2, r0, r2
  025a8	e2822014	 add         r2, r2, #0x14
  025ac	e5922000	 ldr         r2, [r2]
  025b0	e3a01000	 mov         r1, #0
  025b4	e59d0038	 ldr         r0, [sp, #0x38]
  025b8	eb000000	 bl          VirtualAllocEx
  025bc	e58d0108	 str         r0, [sp, #0x108]
  025c0	e59d3108	 ldr         r3, [sp, #0x108]
  025c4	e58d3028	 str         r3, [sp, #0x28]

; 1381 : 
; 1382 :             if (!pUsrVA || !VirtualCopyEx((HANDLE)dwCallerProcId, pUsrVA,
; 1383 :                         (HANDLE)GetCurrentProcessId(), (PVOID)entry->kvirtp,
; 1384 :                         p_objs[bi][pool].size,
; 1385 :                         PAGE_READWRITE | cacheFlag)) {

  025c8	e59d3028	 ldr         r3, [sp, #0x28]
  025cc	e3530000	 cmp         r3, #0
  025d0	0a00001b	 beq         |$LN88@CMK_IOCont|
  025d4	eb000000	 bl          GetCurrentProcessId
  025d8	e58d010c	 str         r0, [sp, #0x10C]
  025dc	e59d3018	 ldr         r3, [sp, #0x18]
  025e0	e3833004	 orr         r3, r3, #4
  025e4	e58d3004	 str         r3, [sp, #4]
  025e8	e59d104c	 ldr         r1, [sp, #0x4C]
  025ec	e3a03c0e	 mov         r3, #0xE, 24
  025f0	e0020391	 mul         r2, r1, r3
  025f4	e59f30a0	 ldr         r3, [pc, #0xA0]
  025f8	e0831002	 add         r1, r3, r2
  025fc	e59d2064	 ldr         r2, [sp, #0x64]
  02600	e3a0301c	 mov         r3, #0x1C
  02604	e0030392	 mul         r3, r2, r3
  02608	e0813003	 add         r3, r1, r3
  0260c	e2833014	 add         r3, r3, #0x14
  02610	e5933000	 ldr         r3, [r3]
  02614	e58d3000	 str         r3, [sp]
  02618	e59d3054	 ldr         r3, [sp, #0x54]
  0261c	e2833014	 add         r3, r3, #0x14
  02620	e5933000	 ldr         r3, [r3]
  02624	e59d210c	 ldr         r2, [sp, #0x10C]
  02628	e59d1028	 ldr         r1, [sp, #0x28]
  0262c	e59d0038	 ldr         r0, [sp, #0x38]
  02630	eb000000	 bl          VirtualCopyEx
  02634	e58d0110	 str         r0, [sp, #0x110]
  02638	e59d3110	 ldr         r3, [sp, #0x110]
  0263c	e3530000	 cmp         r3, #0
  02640	1a000020	 bne         |$LN89@CMK_IOCont|
  02644		 |$LN88@CMK_IOCont|

; 1386 :                 __E("ALLOC%s: VirtualCopyEx() failed for pool %d\n",
; 1387 :                         Ioctl & CMEM_CACHED ? "CACHED" : "", pool);

  02644	e59d3190	 ldr         r3, [sp, #0x190]
  02648	e3130b02	 tst         r3, #2, 22
  0264c	0a000002	 beq         |$LN127@CMK_IOCont|
  02650	e59f3040	 ldr         r3, [pc, #0x40]
  02654	e58d3114	 str         r3, [sp, #0x114]
  02658	ea000001	 b           |$LN128@CMK_IOCont|
  0265c		 |$LN127@CMK_IOCont|
  0265c	e59f3030	 ldr         r3, [pc, #0x30]
  02660	e58d3114	 str         r3, [sp, #0x114]
  02664		 |$LN128@CMK_IOCont|
  02664	e59d2064	 ldr         r2, [sp, #0x64]
  02668	e59d1114	 ldr         r1, [sp, #0x114]
  0266c	e59f001c	 ldr         r0, [pc, #0x1C]
  02670	eb000000	 bl          NKDbgPrintfW

; 1388 :                 ReleaseMutex(cmem_mutex);

  02674	e59f3010	 ldr         r3, [pc, #0x10]
  02678	e5930000	 ldr         r0, [r3]
  0267c	eb000000	 bl          ReleaseMutex

; 1389 :                 return FALSE;

  02680	e3a03000	 mov         r3, #0
  02684	e58d3090	 str         r3, [sp, #0x90]
  02688	ea000401	 b           |$LN111@CMK_IOCont|
  0268c		 |$LN227@CMK_IOCont|
  0268c		 |$LN228@CMK_IOCont|
  0268c	00000000	 DCD         |cmem_mutex|
  02690		 |$LN229@CMK_IOCont|
  02690	00000000	 DCD         |??_C@_1HE@ECHHIHNI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAC?$AAo?$AAp@|
  02694		 |$LN230@CMK_IOCont|
  02694	00000000	 DCD         |??_C@_00CNPNBAHC@?$AA@|
  02698		 |$LN231@CMK_IOCont|
  02698	00000000	 DCD         |??_C@_06HAMDABMN@CACHED?$AA@|
  0269c		 |$LN232@CMK_IOCont|
  0269c	00000000	 DCD         |p_objs|
  026a0		 |$LN233@CMK_IOCont|
  026a0	00000000	 DCD         |??_C@_1HK@NMPGNINP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAb?$AAu@|
  026a4		 |$LN234@CMK_IOCont|
  026a4	00000000	 DCD         |??_C@_1GC@NHBEENPF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@|
  026a8		 |$LN235@CMK_IOCont|
  026a8	00000000	 DCD         |npools|
  026ac		 |$LN236@CMK_IOCont|
  026ac	00000000	 DCD         |??_C@_1GO@HIHOKAPN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc@|
  026b0		 |$LN237@CMK_IOCont|
  026b0	00000000	 DCD         |??_C@_1II@HMLBPOKD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@|
  026b4		 |$LN238@CMK_IOCont|
  026b4	00000000	 DCD         |??_C@_1JI@CAAHNLGC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@|
  026b8		 |$LN239@CMK_IOCont|
  026b8	00000000	 DCD         |heap_pool|
  026bc		 |$LN240@CMK_IOCont|
  026bc	00000000	 DCD         |??_C@_1IC@IKJLIPKE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa@|
  026c0		 |$LN241@CMK_IOCont|
  026c0	00000000	 DCD         |??_C@_1IA@DGANCHDM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl@|
  026c4		 |$LN242@CMK_IOCont|
  026c4	00000000	 DCD         |??_C@_1IG@GKJGLDOM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AAH?$AAE?$AAA?$AAP?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr@|
  026c8		 |$LN89@CMK_IOCont|

; 1390 :             }
; 1391 :             pAllocDesc->alloc_pool_outparams.virtp = (unsigned long)pUsrVA;

  026c8	e59d3008	 ldr         r3, [sp, #8]
  026cc	e2832004	 add         r2, r3, #4
  026d0	e59d3028	 ldr         r3, [sp, #0x28]
  026d4	e5823000	 str         r3, [r2]

; 1392 :             entry->pUsrVA = pUsrVA;

  026d8	e59d3054	 ldr         r3, [sp, #0x54]
  026dc	e283201c	 add         r2, r3, #0x1C
  026e0	e59d3028	 ldr         r3, [sp, #0x28]
  026e4	e5823000	 str         r3, [r2]

; 1393 :             entry->dwUsrProcId = dwCallerProcId;

  026e8	e59d3054	 ldr         r3, [sp, #0x54]
  026ec	e2832020	 add         r2, r3, #0x20
  026f0	e59d3038	 ldr         r3, [sp, #0x38]
  026f4	e5823000	 str         r3, [r2]

; 1394 :             entry->flags = Ioctl & ~CMEM_IOCCMDMASK;

  026f8	e59d2190	 ldr         r2, [sp, #0x190]
  026fc	e3e030ff	 mvn         r3, #0xFF
  02700	e0022003	 and         r2, r2, r3
  02704	e59d3054	 ldr         r3, [sp, #0x54]
  02708	e2833010	 add         r3, r3, #0x10
  0270c	e5832000	 str         r2, [r3]

; 1395 : 
; 1396 :             RemoveEntryList(e);

  02710	e59d3058	 ldr         r3, [sp, #0x58]
  02714	e58d3074	 str         r3, [sp, #0x74]
  02718	e59d3074	 ldr         r3, [sp, #0x74]
  0271c	e2833004	 add         r3, r3, #4
  02720	e5932000	 ldr         r2, [r3]
  02724	e59d3074	 ldr         r3, [sp, #0x74]
  02728	e5933000	 ldr         r3, [r3]
  0272c	e5823000	 str         r3, [r2]
  02730	e59d3074	 ldr         r3, [sp, #0x74]
  02734	e2831004	 add         r1, r3, #4
  02738	e59d3074	 ldr         r3, [sp, #0x74]
  0273c	e5933000	 ldr         r3, [r3]
  02740	e2832004	 add         r2, r3, #4
  02744	e5913000	 ldr         r3, [r1]
  02748	e5823000	 str         r3, [r2]

; 1397 :             InitializeListHead(e);

  0274c	e59d3058	 ldr         r3, [sp, #0x58]
  02750	e2832004	 add         r2, r3, #4
  02754	e59d3058	 ldr         r3, [sp, #0x58]
  02758	e5823000	 str         r3, [r2]
  0275c	e59d2058	 ldr         r2, [sp, #0x58]
  02760	e59d3058	 ldr         r3, [sp, #0x58]
  02764	e5832000	 str         r2, [r3]

; 1398 : 
; 1399 :             InsertHeadList(busylistp, e);

  02768	e59d300c	 ldr         r3, [sp, #0xC]
  0276c	e58d307c	 str         r3, [sp, #0x7C]
  02770	e59d307c	 ldr         r3, [sp, #0x7C]
  02774	e5933000	 ldr         r3, [r3]
  02778	e58d3078	 str         r3, [sp, #0x78]
  0277c	e59d2078	 ldr         r2, [sp, #0x78]
  02780	e59d3058	 ldr         r3, [sp, #0x58]
  02784	e5832000	 str         r2, [r3]
  02788	e59d3058	 ldr         r3, [sp, #0x58]
  0278c	e2832004	 add         r2, r3, #4
  02790	e59d307c	 ldr         r3, [sp, #0x7C]
  02794	e5823000	 str         r3, [r2]
  02798	e59d3078	 ldr         r3, [sp, #0x78]
  0279c	e2832004	 add         r2, r3, #4
  027a0	e59d3058	 ldr         r3, [sp, #0x58]
  027a4	e5823000	 str         r3, [r2]
  027a8	e59d2058	 ldr         r2, [sp, #0x58]
  027ac	e59d307c	 ldr         r3, [sp, #0x7C]
  027b0	e5832000	 str         r2, [r3]

; 1400 : 
; 1401 :             ReleaseMutex(cmem_mutex);

  027b4	e59f3eec	 ldr         r3, [pc, #0xEEC]
  027b8	e5930000	 ldr         r0, [r3]
  027bc	eb000000	 bl          ReleaseMutex

; 1402 : 
; 1403 :             __D("ALLOC%s: allocated a buffer at %#lx (phys address)\n",
; 1404 :                     Ioctl & CMEM_CACHED ? "CACHED" : "", entry->physp);

  027c0	e59d3190	 ldr         r3, [sp, #0x190]
  027c4	e3130b02	 tst         r3, #2, 22
  027c8	0a000002	 beq         |$LN129@CMK_IOCont|
  027cc	e59f3fa8	 ldr         r3, [pc, #0xFA8]
  027d0	e58d3118	 str         r3, [sp, #0x118]
  027d4	ea000001	 b           |$LN130@CMK_IOCont|
  027d8		 |$LN129@CMK_IOCont|
  027d8	e59f3f1c	 ldr         r3, [pc, #0xF1C]
  027dc	e58d3118	 str         r3, [sp, #0x118]
  027e0		 |$LN130@CMK_IOCont|
  027e0	e59d3054	 ldr         r3, [sp, #0x54]
  027e4	e283300c	 add         r3, r3, #0xC
  027e8	e5932000	 ldr         r2, [r3]
  027ec	e59d1118	 ldr         r1, [sp, #0x118]
  027f0	e59f0f80	 ldr         r0, [pc, #0xF80]
  027f4	eb000000	 bl          NKDbgPrintfW

; 1405 : 
; 1406 : #ifdef __DEBUG
; 1407 :             dump_lists(bi, pool);

  027f8	e59d1064	 ldr         r1, [sp, #0x64]
  027fc	e59d004c	 ldr         r0, [sp, #0x4C]
  02800	eb000000	 bl          dump_lists

; 1408 : #endif
; 1409 :             break;

  02804	ea0003a0	 b           |$LN109@CMK_IOCont|
  02808		 |$LN81@CMK_IOCont|

; 1410 : 
; 1411 :             /*
; 1412 :              * argp contains either the user virtual address or the physical
; 1413 :              * address of the buffer to free coming in, and contains the pool
; 1414 :              * where it was freed from and the size of the block on return.
; 1415 :              */
; 1416 :         case CMEM_IOCFREE:
; 1417 :             __D("FREE%s%s ioctl received.\n",
; 1418 :                     Ioctl & CMEM_HEAP ? "HEAP" : "",
; 1419 :                     Ioctl & CMEM_PHYS ? "PHYS" : "");

  02808	e59d3190	 ldr         r3, [sp, #0x190]
  0280c	e3130a01	 tst         r3, #1, 20
  02810	0a000002	 beq         |$LN131@CMK_IOCont|
  02814	e59f3f48	 ldr         r3, [pc, #0xF48]
  02818	e58d311c	 str         r3, [sp, #0x11C]
  0281c	ea000001	 b           |$LN132@CMK_IOCont|
  02820		 |$LN131@CMK_IOCont|
  02820	e59f3ed4	 ldr         r3, [pc, #0xED4]
  02824	e58d311c	 str         r3, [sp, #0x11C]
  02828		 |$LN132@CMK_IOCont|
  02828	e59d3190	 ldr         r3, [sp, #0x190]
  0282c	e3130b01	 tst         r3, #1, 22
  02830	0a000002	 beq         |$LN133@CMK_IOCont|
  02834	e59f3f24	 ldr         r3, [pc, #0xF24]
  02838	e58d3120	 str         r3, [sp, #0x120]
  0283c	ea000001	 b           |$LN134@CMK_IOCont|
  02840		 |$LN133@CMK_IOCont|
  02840	e59f3eb4	 ldr         r3, [pc, #0xEB4]
  02844	e58d3120	 str         r3, [sp, #0x120]
  02848		 |$LN134@CMK_IOCont|
  02848	e59d211c	 ldr         r2, [sp, #0x11C]
  0284c	e59d1120	 ldr         r1, [sp, #0x120]
  02850	e59f0f1c	 ldr         r0, [pc, #0xF1C]
  02854	eb000000	 bl          NKDbgPrintfW

; 1420 : 
; 1421 :             if (InBufLen < sizeof(union CMEM_AllocUnion)) {

  02858	e59d3198	 ldr         r3, [sp, #0x198]
  0285c	e3530010	 cmp         r3, #0x10
  02860	2a000002	 bcs         |$LN80@CMK_IOCont|

; 1422 :                 return FALSE;

  02864	e3a03000	 mov         r3, #0
  02868	e58d3090	 str         r3, [sp, #0x90]
  0286c	ea000388	 b           |$LN111@CMK_IOCont|
  02870		 |$LN80@CMK_IOCont|

; 1423 :             }
; 1424 : 
; 1425 :             allocDesc = *(union CMEM_AllocUnion*)pInBuf;

  02870	e59d1194	 ldr         r1, [sp, #0x194]
  02874	e28d003c	 add         r0, sp, #0x3C
  02878	e3a02010	 mov         r2, #0x10
  0287c	eb000000	 bl          memcpy

; 1426 : 
; 1427 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  02880	e3e01000	 mvn         r1, #0
  02884	e59f3e1c	 ldr         r3, [pc, #0xE1C]
  02888	e5930000	 ldr         r0, [r3]
  0288c	eb000000	 bl          WaitForSingleObject
  02890	e58d0124	 str         r0, [sp, #0x124]
  02894	e59d3124	 ldr         r3, [sp, #0x124]
  02898	e3530000	 cmp         r3, #0
  0289c	0a000002	 beq         |$LN79@CMK_IOCont|

; 1428 :                 return FALSE;

  028a0	e3a03000	 mov         r3, #0
  028a4	e58d3090	 str         r3, [sp, #0x90]
  028a8	ea000379	 b           |$LN111@CMK_IOCont|
  028ac		 |$LN79@CMK_IOCont|

; 1429 :             }
; 1430 : 
; 1431 :             if (Ioctl & CMEM_PHYS) {

  028ac	e59d3190	 ldr         r3, [sp, #0x190]
  028b0	e3130a01	 tst         r3, #1, 20
  028b4	0a00000a	 beq         |$LN78@CMK_IOCont|

; 1432 :                 // user passed in a physical address
; 1433 :                 entry = find_busy_entry(allocDesc.virtp, &pool, &e, &bi, FALSE);

  028b8	e3a03000	 mov         r3, #0
  028bc	e58d3000	 str         r3, [sp]
  028c0	e28d304c	 add         r3, sp, #0x4C
  028c4	e28d2058	 add         r2, sp, #0x58
  028c8	e28d1064	 add         r1, sp, #0x64
  028cc	e59d003c	 ldr         r0, [sp, #0x3C]
  028d0	eb000000	 bl          find_busy_entry
  028d4	e58d0128	 str         r0, [sp, #0x128]
  028d8	e59d3128	 ldr         r3, [sp, #0x128]
  028dc	e58d3054	 str         r3, [sp, #0x54]

; 1434 :             }
; 1435 :             else {

  028e0	ea000009	 b           |$LN77@CMK_IOCont|
  028e4		 |$LN78@CMK_IOCont|

; 1436 :                 // user passed in a virtual address
; 1437 :                 entry = find_busy_entry(allocDesc.virtp, &pool, &e, &bi, TRUE);

  028e4	e3a03001	 mov         r3, #1
  028e8	e58d3000	 str         r3, [sp]
  028ec	e28d304c	 add         r3, sp, #0x4C
  028f0	e28d2058	 add         r2, sp, #0x58
  028f4	e28d1064	 add         r1, sp, #0x64
  028f8	e59d003c	 ldr         r0, [sp, #0x3C]
  028fc	eb000000	 bl          find_busy_entry
  02900	e58d012c	 str         r0, [sp, #0x12C]
  02904	e59d312c	 ldr         r3, [sp, #0x12C]
  02908	e58d3054	 str         r3, [sp, #0x54]
  0290c		 |$LN77@CMK_IOCont|

; 1438 :             }
; 1439 : 
; 1440 :             if (entry) {

  0290c	e59d3054	 ldr         r3, [sp, #0x54]
  02910	e3530000	 cmp         r3, #0
  02914	0a000090	 beq         |$LN76@CMK_IOCont|

; 1441 :                 if (!VirtualFreeEx((HANDLE)entry->dwUsrProcId, entry->pUsrVA,
; 1442 :                             0, MEM_RELEASE)) {

  02918	e3a03902	 mov         r3, #2, 18
  0291c	e3a02000	 mov         r2, #0
  02920	e59d1054	 ldr         r1, [sp, #0x54]
  02924	e281101c	 add         r1, r1, #0x1C
  02928	e5911000	 ldr         r1, [r1]
  0292c	e59d0054	 ldr         r0, [sp, #0x54]
  02930	e2800020	 add         r0, r0, #0x20
  02934	e5900000	 ldr         r0, [r0]
  02938	eb000000	 bl          VirtualFreeEx
  0293c	e58d0130	 str         r0, [sp, #0x130]
  02940	e59d3130	 ldr         r3, [sp, #0x130]
  02944	e3530000	 cmp         r3, #0
  02948	1a00001c	 bne         |$LN75@CMK_IOCont|

; 1443 :                     __E("FREE%s%s: Failed to free buffer %d from pool %d - error:%d\n",
; 1444 :                             Ioctl & CMEM_HEAP ? "HEAP" : "",
; 1445 :                             Ioctl & CMEM_PHYS ? "PHYS" : "",
; 1446 :                             entry->id, pool, GetLastError());

  0294c	eb000000	 bl          GetLastError
  02950	e58d0134	 str         r0, [sp, #0x134]
  02954	e59d3190	 ldr         r3, [sp, #0x190]
  02958	e3130a01	 tst         r3, #1, 20
  0295c	0a000002	 beq         |$LN135@CMK_IOCont|
  02960	e59f3dfc	 ldr         r3, [pc, #0xDFC]
  02964	e58d3138	 str         r3, [sp, #0x138]
  02968	ea000001	 b           |$LN136@CMK_IOCont|
  0296c		 |$LN135@CMK_IOCont|
  0296c	e59f3d88	 ldr         r3, [pc, #0xD88]
  02970	e58d3138	 str         r3, [sp, #0x138]
  02974		 |$LN136@CMK_IOCont|
  02974	e59d3190	 ldr         r3, [sp, #0x190]
  02978	e3130b01	 tst         r3, #1, 22
  0297c	0a000002	 beq         |$LN137@CMK_IOCont|
  02980	e59f3dd8	 ldr         r3, [pc, #0xDD8]
  02984	e58d313c	 str         r3, [sp, #0x13C]
  02988	ea000001	 b           |$LN138@CMK_IOCont|
  0298c		 |$LN137@CMK_IOCont|
  0298c	e59f3d68	 ldr         r3, [pc, #0xD68]
  02990	e58d313c	 str         r3, [sp, #0x13C]
  02994		 |$LN138@CMK_IOCont|
  02994	e59d3134	 ldr         r3, [sp, #0x134]
  02998	e58d3004	 str         r3, [sp, #4]
  0299c	e59d3064	 ldr         r3, [sp, #0x64]
  029a0	e58d3000	 str         r3, [sp]
  029a4	e59d3054	 ldr         r3, [sp, #0x54]
  029a8	e2833008	 add         r3, r3, #8
  029ac	e5933000	 ldr         r3, [r3]
  029b0	e59d2138	 ldr         r2, [sp, #0x138]
  029b4	e59d113c	 ldr         r1, [sp, #0x13C]
  029b8	e59f0db0	 ldr         r0, [pc, #0xDB0]
  029bc	eb000000	 bl          NKDbgPrintfW
  029c0		 |$LN75@CMK_IOCont|

; 1447 :                 }
; 1448 : 
; 1449 :                 if (Ioctl & CMEM_HEAP) {

  029c0	e59d3190	 ldr         r3, [sp, #0x190]
  029c4	e3130b01	 tst         r3, #1, 22
  029c8	0a000019	 beq         |$LN74@CMK_IOCont|

; 1450 :                     HeapMem_free(bi, (void *)entry->kvirtp, entry->size);

  029cc	e59d3054	 ldr         r3, [sp, #0x54]
  029d0	e2833018	 add         r3, r3, #0x18
  029d4	e5932000	 ldr         r2, [r3]
  029d8	e59d3054	 ldr         r3, [sp, #0x54]
  029dc	e2833014	 add         r3, r3, #0x14
  029e0	e5931000	 ldr         r1, [r3]
  029e4	e59d004c	 ldr         r0, [sp, #0x4C]
  029e8	eb000000	 bl          HeapMem_free

; 1451 :                     RemoveEntryList(e);

  029ec	e59d3058	 ldr         r3, [sp, #0x58]
  029f0	e58d3080	 str         r3, [sp, #0x80]
  029f4	e59d3080	 ldr         r3, [sp, #0x80]
  029f8	e2833004	 add         r3, r3, #4
  029fc	e5932000	 ldr         r2, [r3]
  02a00	e59d3080	 ldr         r3, [sp, #0x80]
  02a04	e5933000	 ldr         r3, [r3]
  02a08	e5823000	 str         r3, [r2]
  02a0c	e59d3080	 ldr         r3, [sp, #0x80]
  02a10	e2831004	 add         r1, r3, #4
  02a14	e59d3080	 ldr         r3, [sp, #0x80]
  02a18	e5933000	 ldr         r3, [r3]
  02a1c	e2832004	 add         r2, r3, #4
  02a20	e5913000	 ldr         r3, [r1]
  02a24	e5823000	 str         r3, [r2]

; 1452 :                     free(entry);

  02a28	e59d0054	 ldr         r0, [sp, #0x54]
  02a2c	eb000000	 bl          free

; 1453 :                 }
; 1454 :                 else {

  02a30	ea000030	 b           |$LN70@CMK_IOCont|
  02a34		 |$LN74@CMK_IOCont|

; 1455 :                     RemoveEntryList(e);

  02a34	e59d3058	 ldr         r3, [sp, #0x58]
  02a38	e58d3084	 str         r3, [sp, #0x84]
  02a3c	e59d3084	 ldr         r3, [sp, #0x84]
  02a40	e2833004	 add         r3, r3, #4
  02a44	e5932000	 ldr         r2, [r3]
  02a48	e59d3084	 ldr         r3, [sp, #0x84]
  02a4c	e5933000	 ldr         r3, [r3]
  02a50	e5823000	 str         r3, [r2]
  02a54	e59d3084	 ldr         r3, [sp, #0x84]
  02a58	e2831004	 add         r1, r3, #4
  02a5c	e59d3084	 ldr         r3, [sp, #0x84]
  02a60	e5933000	 ldr         r3, [r3]
  02a64	e2832004	 add         r2, r3, #4
  02a68	e5913000	 ldr         r3, [r1]
  02a6c	e5823000	 str         r3, [r2]

; 1456 :                     InitializeListHead(e);

  02a70	e59d3058	 ldr         r3, [sp, #0x58]
  02a74	e2832004	 add         r2, r3, #4
  02a78	e59d3058	 ldr         r3, [sp, #0x58]
  02a7c	e5823000	 str         r3, [r2]
  02a80	e59d2058	 ldr         r2, [sp, #0x58]
  02a84	e59d3058	 ldr         r3, [sp, #0x58]
  02a88	e5832000	 str         r2, [r3]

; 1457 :                     InsertHeadList(&p_objs[bi][pool].freelist, e);

  02a8c	e59d104c	 ldr         r1, [sp, #0x4C]
  02a90	e3a03c0e	 mov         r3, #0xE, 24
  02a94	e0020391	 mul         r2, r1, r3
  02a98	e59f3c8c	 ldr         r3, [pc, #0xC8C]
  02a9c	e0831002	 add         r1, r3, r2
  02aa0	e59d2064	 ldr         r2, [sp, #0x64]
  02aa4	e3a0301c	 mov         r3, #0x1C
  02aa8	e0030392	 mul         r3, r2, r3
  02aac	e0813003	 add         r3, r1, r3
  02ab0	e58d308c	 str         r3, [sp, #0x8C]
  02ab4	e59d308c	 ldr         r3, [sp, #0x8C]
  02ab8	e5933000	 ldr         r3, [r3]
  02abc	e58d3088	 str         r3, [sp, #0x88]
  02ac0	e59d2088	 ldr         r2, [sp, #0x88]
  02ac4	e59d3058	 ldr         r3, [sp, #0x58]
  02ac8	e5832000	 str         r2, [r3]
  02acc	e59d3058	 ldr         r3, [sp, #0x58]
  02ad0	e2832004	 add         r2, r3, #4
  02ad4	e59d308c	 ldr         r3, [sp, #0x8C]
  02ad8	e5823000	 str         r3, [r2]
  02adc	e59d3088	 ldr         r3, [sp, #0x88]
  02ae0	e2832004	 add         r2, r3, #4
  02ae4	e59d3058	 ldr         r3, [sp, #0x58]
  02ae8	e5823000	 str         r3, [r2]
  02aec	e59d2058	 ldr         r2, [sp, #0x58]
  02af0	e59d308c	 ldr         r3, [sp, #0x8C]
  02af4	e5832000	 str         r2, [r3]
  02af8		 |$LN70@CMK_IOCont|

; 1458 :                 }
; 1459 : 
; 1460 :                 __D("FREE%s%s: Successfully freed buffer %d from pool %d\n",
; 1461 :                         Ioctl & CMEM_HEAP ? "HEAP" : "",
; 1462 :                         Ioctl & CMEM_PHYS ? "PHYS" : "", entry->id, pool);

  02af8	e59d3190	 ldr         r3, [sp, #0x190]
  02afc	e3130a01	 tst         r3, #1, 20
  02b00	0a000002	 beq         |$LN139@CMK_IOCont|
  02b04	e59f3c58	 ldr         r3, [pc, #0xC58]
  02b08	e58d3140	 str         r3, [sp, #0x140]
  02b0c	ea000001	 b           |$LN140@CMK_IOCont|
  02b10		 |$LN139@CMK_IOCont|
  02b10	e59f3be4	 ldr         r3, [pc, #0xBE4]
  02b14	e58d3140	 str         r3, [sp, #0x140]
  02b18		 |$LN140@CMK_IOCont|
  02b18	e59d3190	 ldr         r3, [sp, #0x190]
  02b1c	e3130b01	 tst         r3, #1, 22
  02b20	0a000002	 beq         |$LN141@CMK_IOCont|
  02b24	e59f3c34	 ldr         r3, [pc, #0xC34]
  02b28	e58d3144	 str         r3, [sp, #0x144]
  02b2c	ea000001	 b           |$LN142@CMK_IOCont|
  02b30		 |$LN141@CMK_IOCont|
  02b30	e59f3bc4	 ldr         r3, [pc, #0xBC4]
  02b34	e58d3144	 str         r3, [sp, #0x144]
  02b38		 |$LN142@CMK_IOCont|
  02b38	e59d3064	 ldr         r3, [sp, #0x64]
  02b3c	e58d3000	 str         r3, [sp]
  02b40	e59d3054	 ldr         r3, [sp, #0x54]
  02b44	e2833008	 add         r3, r3, #8
  02b48	e5933000	 ldr         r3, [r3]
  02b4c	e59d2140	 ldr         r2, [sp, #0x140]
  02b50	e59d1144	 ldr         r1, [sp, #0x144]
  02b54	e59f0c10	 ldr         r0, [pc, #0xC10]
  02b58	eb000000	 bl          NKDbgPrintfW
  02b5c		 |$LN76@CMK_IOCont|

; 1463 :             }
; 1464 : 
; 1465 :             ReleaseMutex(cmem_mutex);

  02b5c	e59f3b44	 ldr         r3, [pc, #0xB44]
  02b60	e5930000	 ldr         r0, [r3]
  02b64	eb000000	 bl          ReleaseMutex

; 1466 : 
; 1467 :             if (!entry) {

  02b68	e59d3054	 ldr         r3, [sp, #0x54]
  02b6c	e3530000	 cmp         r3, #0
  02b70	1a000005	 bne         |$LN63@CMK_IOCont|

; 1468 :                 __E("Failed to free memory at %#lx\n", allocDesc.virtp);

  02b74	e59d103c	 ldr         r1, [sp, #0x3C]
  02b78	e59f0be8	 ldr         r0, [pc, #0xBE8]
  02b7c	eb000000	 bl          NKDbgPrintfW

; 1469 :                 return FALSE;

  02b80	e3a03000	 mov         r3, #0
  02b84	e58d3090	 str         r3, [sp, #0x90]
  02b88	ea0002c1	 b           |$LN111@CMK_IOCont|
  02b8c		 |$LN63@CMK_IOCont|

; 1470 :             }
; 1471 : 
; 1472 : #ifdef __DEBUG
; 1473 :             dump_lists(bi, pool);

  02b8c	e59d1064	 ldr         r1, [sp, #0x64]
  02b90	e59d004c	 ldr         r0, [sp, #0x4C]
  02b94	eb000000	 bl          dump_lists

; 1474 : #endif
; 1475 :             if (Ioctl & CMEM_HEAP) {

  02b98	e59d3190	 ldr         r3, [sp, #0x190]
  02b9c	e3130b01	 tst         r3, #1, 22
  02ba0	0a000004	 beq         |$LN62@CMK_IOCont|

; 1476 :                 allocDesc.free_outparams.size = entry->size;

  02ba4	e59d3054	 ldr         r3, [sp, #0x54]
  02ba8	e2833018	 add         r3, r3, #0x18
  02bac	e5933000	 ldr         r3, [r3]
  02bb0	e58d3040	 str         r3, [sp, #0x40]

; 1477 :             }
; 1478 :             else {

  02bb4	ea00000b	 b           |$LN61@CMK_IOCont|
  02bb8		 |$LN62@CMK_IOCont|

; 1479 :                 allocDesc.free_outparams.size = p_objs[bi][pool].size;

  02bb8	e59d104c	 ldr         r1, [sp, #0x4C]
  02bbc	e3a03c0e	 mov         r3, #0xE, 24
  02bc0	e0020391	 mul         r2, r1, r3
  02bc4	e59f3b60	 ldr         r3, [pc, #0xB60]
  02bc8	e0831002	 add         r1, r3, r2
  02bcc	e59d2064	 ldr         r2, [sp, #0x64]
  02bd0	e3a0301c	 mov         r3, #0x1C
  02bd4	e0030392	 mul         r3, r2, r3
  02bd8	e0813003	 add         r3, r1, r3
  02bdc	e2833014	 add         r3, r3, #0x14
  02be0	e5933000	 ldr         r3, [r3]
  02be4	e58d3040	 str         r3, [sp, #0x40]
  02be8		 |$LN61@CMK_IOCont|

; 1480 :             }
; 1481 :             allocDesc.free_outparams.poolid = pool;

  02be8	e59d3064	 ldr         r3, [sp, #0x64]
  02bec	e58d303c	 str         r3, [sp, #0x3C]

; 1482 :             if (!pInBuf || InBufLen < sizeof(allocDesc)) {

  02bf0	e59d3194	 ldr         r3, [sp, #0x194]
  02bf4	e3530000	 cmp         r3, #0
  02bf8	0a000002	 beq         |$LN59@CMK_IOCont|
  02bfc	e59d3198	 ldr         r3, [sp, #0x198]
  02c00	e3530010	 cmp         r3, #0x10
  02c04	2a000002	 bcs         |$LN60@CMK_IOCont|
  02c08		 |$LN59@CMK_IOCont|

; 1483 :                 return FALSE;

  02c08	e3a03000	 mov         r3, #0
  02c0c	e58d3090	 str         r3, [sp, #0x90]
  02c10	ea00029f	 b           |$LN111@CMK_IOCont|
  02c14		 |$LN60@CMK_IOCont|

; 1484 :             }
; 1485 :             *(union CMEM_AllocUnion*)pInBuf = allocDesc;

  02c14	e59d0194	 ldr         r0, [sp, #0x194]
  02c18	e28d103c	 add         r1, sp, #0x3C
  02c1c	e3a02010	 mov         r2, #0x10
  02c20	eb000000	 bl          memcpy

; 1486 : 
; 1487 :             __D("FREE%s%s: returning size %d, poolid %d\n",
; 1488 :                     Ioctl & CMEM_HEAP ? "HEAP" : "",
; 1489 :                     Ioctl & CMEM_PHYS ? "PHYS" : "",
; 1490 :                     allocDesc.free_outparams.size,
; 1491 :                     allocDesc.free_outparams.poolid);

  02c24	e59d3190	 ldr         r3, [sp, #0x190]
  02c28	e3130a01	 tst         r3, #1, 20
  02c2c	0a000002	 beq         |$LN143@CMK_IOCont|
  02c30	e59f3b2c	 ldr         r3, [pc, #0xB2C]
  02c34	e58d3148	 str         r3, [sp, #0x148]
  02c38	ea000001	 b           |$LN144@CMK_IOCont|
  02c3c		 |$LN143@CMK_IOCont|
  02c3c	e59f3ab8	 ldr         r3, [pc, #0xAB8]
  02c40	e58d3148	 str         r3, [sp, #0x148]
  02c44		 |$LN144@CMK_IOCont|
  02c44	e59d3190	 ldr         r3, [sp, #0x190]
  02c48	e3130b01	 tst         r3, #1, 22
  02c4c	0a000002	 beq         |$LN145@CMK_IOCont|
  02c50	e59f3b08	 ldr         r3, [pc, #0xB08]
  02c54	e58d314c	 str         r3, [sp, #0x14C]
  02c58	ea000001	 b           |$LN146@CMK_IOCont|
  02c5c		 |$LN145@CMK_IOCont|
  02c5c	e59f3a98	 ldr         r3, [pc, #0xA98]
  02c60	e58d314c	 str         r3, [sp, #0x14C]
  02c64		 |$LN146@CMK_IOCont|
  02c64	e59d303c	 ldr         r3, [sp, #0x3C]
  02c68	e58d3000	 str         r3, [sp]
  02c6c	e59d3040	 ldr         r3, [sp, #0x40]
  02c70	e59d2148	 ldr         r2, [sp, #0x148]
  02c74	e59d114c	 ldr         r1, [sp, #0x14C]
  02c78	e59f0adc	 ldr         r0, [pc, #0xADC]
  02c7c	eb000000	 bl          NKDbgPrintfW

; 1492 : 
; 1493 :             break;

  02c80	ea000281	 b           |$LN109@CMK_IOCont|
  02c84		 |$LN58@CMK_IOCont|

; 1494 : 
; 1495 :        /*
; 1496 :         * argp contains the user virtual address of the buffer to translate
; 1497 :         * coming in, and the translated physical address on return.
; 1498 :         */
; 1499 :         case CMEM_IOCGETPHYS:
; 1500 :             __D("GETPHYS ioctl received.\n");

  02c84	e59f0acc	 ldr         r0, [pc, #0xACC]
  02c88	eb000000	 bl          NKDbgPrintfW

; 1501 :             //if (get_user(virtp, argp))
; 1502 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  02c8c	e59d3194	 ldr         r3, [sp, #0x194]
  02c90	e3530000	 cmp         r3, #0
  02c94	0a000002	 beq         |$LN56@CMK_IOCont|
  02c98	e59d3198	 ldr         r3, [sp, #0x198]
  02c9c	e3530010	 cmp         r3, #0x10
  02ca0	2a000002	 bcs         |$LN57@CMK_IOCont|
  02ca4		 |$LN56@CMK_IOCont|

; 1503 :                 return FALSE;

  02ca4	e3a03000	 mov         r3, #0
  02ca8	e58d3090	 str         r3, [sp, #0x90]
  02cac	ea000278	 b           |$LN111@CMK_IOCont|
  02cb0		 |$LN57@CMK_IOCont|

; 1504 :             }
; 1505 :             virtp = ((union CMEM_AllocUnion*)pInBuf)->virtp;

  02cb0	e59d3194	 ldr         r3, [sp, #0x194]
  02cb4	e5933000	 ldr         r3, [r3]
  02cb8	e58d301c	 str         r3, [sp, #0x1C]

; 1506 :             __D("CMK_IOControl case CMEM_IOCGETPHYS: virtp = %#lx.\n", virtp);

  02cbc	e59d101c	 ldr         r1, [sp, #0x1C]
  02cc0	e59f0a8c	 ldr         r0, [pc, #0xA8C]
  02cc4	eb000000	 bl          NKDbgPrintfW

; 1507 : 
; 1508 :             physp = get_phys(virtp);

  02cc8	e59d001c	 ldr         r0, [sp, #0x1C]
  02ccc	eb000000	 bl          get_phys
  02cd0	e58d0150	 str         r0, [sp, #0x150]
  02cd4	e59d3150	 ldr         r3, [sp, #0x150]
  02cd8	e58d302c	 str         r3, [sp, #0x2C]

; 1509 : 
; 1510 :             if (physp == 0) {

  02cdc	e59d302c	 ldr         r3, [sp, #0x2C]
  02ce0	e3530000	 cmp         r3, #0
  02ce4	1a000028	 bne         |$LN55@CMK_IOCont|

; 1511 :                 // user passed in a user space virtual address, maybe?
; 1512 :                 if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  02ce8	e3e01000	 mvn         r1, #0
  02cec	e59f39b4	 ldr         r3, [pc, #0x9B4]
  02cf0	e5930000	 ldr         r0, [r3]
  02cf4	eb000000	 bl          WaitForSingleObject
  02cf8	e58d0154	 str         r0, [sp, #0x154]
  02cfc	e59d3154	 ldr         r3, [sp, #0x154]
  02d00	e3530000	 cmp         r3, #0
  02d04	0a000002	 beq         |$LN54@CMK_IOCont|

; 1513 :                     return FALSE;

  02d08	e3a03000	 mov         r3, #0
  02d0c	e58d3090	 str         r3, [sp, #0x90]
  02d10	ea00025f	 b           |$LN111@CMK_IOCont|
  02d14		 |$LN54@CMK_IOCont|

; 1514 :                 }
; 1515 :                 entry = find_busy_entry(virtp, &pool, &e, &bi, TRUE);

  02d14	e3a03001	 mov         r3, #1
  02d18	e58d3000	 str         r3, [sp]
  02d1c	e28d304c	 add         r3, sp, #0x4C
  02d20	e28d2058	 add         r2, sp, #0x58
  02d24	e28d1064	 add         r1, sp, #0x64
  02d28	e59d001c	 ldr         r0, [sp, #0x1C]
  02d2c	eb000000	 bl          find_busy_entry
  02d30	e58d0158	 str         r0, [sp, #0x158]
  02d34	e59d3158	 ldr         r3, [sp, #0x158]
  02d38	e58d3054	 str         r3, [sp, #0x54]

; 1516 : 
; 1517 :                 if (entry) {

  02d3c	e59d3054	 ldr         r3, [sp, #0x54]
  02d40	e3530000	 cmp         r3, #0
  02d44	0a000004	 beq         |$LN53@CMK_IOCont|

; 1518 :                     physp = entry->physp;

  02d48	e59d3054	 ldr         r3, [sp, #0x54]
  02d4c	e283300c	 add         r3, r3, #0xC
  02d50	e5933000	 ldr         r3, [r3]
  02d54	e58d302c	 str         r3, [sp, #0x2C]

; 1519 :                 }
; 1520 :                 else {

  02d58	ea000008	 b           |$LN52@CMK_IOCont|
  02d5c		 |$LN53@CMK_IOCont|

; 1521 :                     ReleaseMutex(cmem_mutex);

  02d5c	e59f3944	 ldr         r3, [pc, #0x944]
  02d60	e5930000	 ldr         r0, [r3]
  02d64	eb000000	 bl          ReleaseMutex

; 1522 :                     __E("GETPHYS: Failed to convert virtual %#lx to physical.\n",
; 1523 :                             virtp);

  02d68	e59d101c	 ldr         r1, [sp, #0x1C]
  02d6c	e59f09dc	 ldr         r0, [pc, #0x9DC]
  02d70	eb000000	 bl          NKDbgPrintfW

; 1524 :                     return FALSE;

  02d74	e3a03000	 mov         r3, #0
  02d78	e58d3090	 str         r3, [sp, #0x90]
  02d7c	ea000244	 b           |$LN111@CMK_IOCont|
  02d80		 |$LN52@CMK_IOCont|

; 1525 :                 }
; 1526 :                 ReleaseMutex(cmem_mutex);

  02d80	e59f3920	 ldr         r3, [pc, #0x920]
  02d84	e5930000	 ldr         r0, [r3]
  02d88	eb000000	 bl          ReleaseMutex
  02d8c		 |$LN55@CMK_IOCont|

; 1527 :             }
; 1528 : 
; 1529 :             ((union CMEM_AllocUnion*)pInBuf)->physp = physp;

  02d8c	e59d202c	 ldr         r2, [sp, #0x2C]
  02d90	e59d3194	 ldr         r3, [sp, #0x194]
  02d94	e5832000	 str         r2, [r3]

; 1530 : 
; 1531 :             __D("GETPHYS: returning %#lx\n", physp);

  02d98	e59d102c	 ldr         r1, [sp, #0x2C]
  02d9c	e59f09a8	 ldr         r0, [pc, #0x9A8]
  02da0	eb000000	 bl          NKDbgPrintfW

; 1532 :             break;

  02da4	ea000238	 b           |$LN109@CMK_IOCont|
  02da8		 |$LN51@CMK_IOCont|

; 1533 : 
; 1534 :             /*
; 1535 :              * argp contains the pool to query for size coming in, and the size
; 1536 :              * of the pool on return.
; 1537 :              */
; 1538 :         case CMEM_IOCGETSIZE:
; 1539 :             __D("GETSIZE ioctl received\n");

  02da8	e59f0998	 ldr         r0, [pc, #0x998]
  02dac	eb000000	 bl          NKDbgPrintfW

; 1540 : 
; 1541 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  02db0	e59d3194	 ldr         r3, [sp, #0x194]
  02db4	e3530000	 cmp         r3, #0
  02db8	0a000002	 beq         |$LN49@CMK_IOCont|
  02dbc	e59d3198	 ldr         r3, [sp, #0x198]
  02dc0	e3530010	 cmp         r3, #0x10
  02dc4	2a000002	 bcs         |$LN50@CMK_IOCont|
  02dc8		 |$LN49@CMK_IOCont|

; 1542 :                 return FALSE;

  02dc8	e3a03000	 mov         r3, #0
  02dcc	e58d3090	 str         r3, [sp, #0x90]
  02dd0	ea00022f	 b           |$LN111@CMK_IOCont|
  02dd4		 |$LN50@CMK_IOCont|

; 1543 :             }
; 1544 :             pAllocDesc = (union CMEM_AllocUnion*)pInBuf;

  02dd4	e59d3194	 ldr         r3, [sp, #0x194]
  02dd8	e58d3008	 str         r3, [sp, #8]

; 1545 : 
; 1546 :             pool = pAllocDesc->get_size_inparams.poolid;

  02ddc	e59d3008	 ldr         r3, [sp, #8]
  02de0	e5933000	 ldr         r3, [r3]
  02de4	e58d3064	 str         r3, [sp, #0x64]

; 1547 :             bi = pAllocDesc->get_size_inparams.blockid;

  02de8	e59d3008	 ldr         r3, [sp, #8]
  02dec	e2833004	 add         r3, r3, #4
  02df0	e5933000	 ldr         r3, [r3]
  02df4	e58d304c	 str         r3, [sp, #0x4C]

; 1548 : 
; 1549 :             if (bi >= NBLOCKS) {

  02df8	e59d304c	 ldr         r3, [sp, #0x4C]
  02dfc	e3530002	 cmp         r3, #2
  02e00	ba000006	 blt         |$LN48@CMK_IOCont|

; 1550 :                 __E("ioctl: invalid block id %d, must be < %d\n",
; 1551 :                         bi, NBLOCKS);

  02e04	e3a02002	 mov         r2, #2
  02e08	e59d104c	 ldr         r1, [sp, #0x4C]
  02e0c	e59f0924	 ldr         r0, [pc, #0x924]
  02e10	eb000000	 bl          NKDbgPrintfW

; 1552 :                 return FALSE;

  02e14	e3a03000	 mov         r3, #0
  02e18	e58d3090	 str         r3, [sp, #0x90]
  02e1c	ea00021c	 b           |$LN111@CMK_IOCont|
  02e20		 |$LN48@CMK_IOCont|

; 1553 :             }
; 1554 : 
; 1555 :             if (pool >= npools[bi] || pool < 0) {

  02e20	e59d104c	 ldr         r1, [sp, #0x4C]
  02e24	e3a03004	 mov         r3, #4
  02e28	e0020391	 mul         r2, r1, r3
  02e2c	e59f38fc	 ldr         r3, [pc, #0x8FC]
  02e30	e0833002	 add         r3, r3, r2
  02e34	e59d2064	 ldr         r2, [sp, #0x64]
  02e38	e5933000	 ldr         r3, [r3]
  02e3c	e1520003	 cmp         r2, r3
  02e40	aa000002	 bge         |$LN46@CMK_IOCont|
  02e44	e59d3064	 ldr         r3, [sp, #0x64]
  02e48	e3530000	 cmp         r3, #0
  02e4c	aa000005	 bge         |$LN47@CMK_IOCont|
  02e50		 |$LN46@CMK_IOCont|

; 1556 :                 __E("GETSIZE: invalid pool (%d) passed.\n", pool);

  02e50	e59d1064	 ldr         r1, [sp, #0x64]
  02e54	e59f08e8	 ldr         r0, [pc, #0x8E8]
  02e58	eb000000	 bl          NKDbgPrintfW

; 1557 :                 return FALSE;

  02e5c	e3a03000	 mov         r3, #0
  02e60	e58d3090	 str         r3, [sp, #0x90]
  02e64	ea00020a	 b           |$LN111@CMK_IOCont|
  02e68		 |$LN47@CMK_IOCont|

; 1558 :             }
; 1559 : 
; 1560 :             if (InBufLen < sizeof(p_objs[bi][pool].size)) {

  02e68	e59d3198	 ldr         r3, [sp, #0x198]
  02e6c	e3530004	 cmp         r3, #4
  02e70	2a000002	 bcs         |$LN45@CMK_IOCont|

; 1561 :                 return FALSE;

  02e74	e3a03000	 mov         r3, #0
  02e78	e58d3090	 str         r3, [sp, #0x90]
  02e7c	ea000204	 b           |$LN111@CMK_IOCont|
  02e80		 |$LN45@CMK_IOCont|

; 1562 :             }
; 1563 :             *(unsigned long *)pInBuf = p_objs[bi][pool].size;

  02e80	e59d104c	 ldr         r1, [sp, #0x4C]
  02e84	e3a03c0e	 mov         r3, #0xE, 24
  02e88	e0020391	 mul         r2, r1, r3
  02e8c	e59f3898	 ldr         r3, [pc, #0x898]
  02e90	e0831002	 add         r1, r3, r2
  02e94	e59d2064	 ldr         r2, [sp, #0x64]
  02e98	e3a0301c	 mov         r3, #0x1C
  02e9c	e0030392	 mul         r3, r2, r3
  02ea0	e0813003	 add         r3, r1, r3
  02ea4	e2833014	 add         r3, r3, #0x14
  02ea8	e5932000	 ldr         r2, [r3]
  02eac	e59d3194	 ldr         r3, [sp, #0x194]
  02eb0	e5832000	 str         r2, [r3]

; 1564 : 
; 1565 :             __D("GETSIZE returning %d\n", p_objs[bi][pool].size);

  02eb4	e59d104c	 ldr         r1, [sp, #0x4C]
  02eb8	e3a03c0e	 mov         r3, #0xE, 24
  02ebc	e0020391	 mul         r2, r1, r3
  02ec0	e59f3864	 ldr         r3, [pc, #0x864]
  02ec4	e0831002	 add         r1, r3, r2
  02ec8	e59d2064	 ldr         r2, [sp, #0x64]
  02ecc	e3a0301c	 mov         r3, #0x1C
  02ed0	e0030392	 mul         r3, r2, r3
  02ed4	e0813003	 add         r3, r1, r3
  02ed8	e2833014	 add         r3, r3, #0x14
  02edc	e5931000	 ldr         r1, [r3]
  02ee0	e59f0858	 ldr         r0, [pc, #0x858]
  02ee4	eb000000	 bl          NKDbgPrintfW

; 1566 :             break;

  02ee8	ea0001e7	 b           |$LN109@CMK_IOCont|
  02eec		 |$LN44@CMK_IOCont|

; 1567 : 
; 1568 :             /*
; 1569 :              * argp contains the requested pool buffers size coming in, and the
; 1570 :              * pool id (index) on return.
; 1571 :              */
; 1572 :         case CMEM_IOCGETPOOL:
; 1573 :             __D("GETPOOL ioctl received.\n");

  02eec	e59f0848	 ldr         r0, [pc, #0x848]
  02ef0	eb000000	 bl          NKDbgPrintfW

; 1574 : 
; 1575 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  02ef4	e59d3194	 ldr         r3, [sp, #0x194]
  02ef8	e3530000	 cmp         r3, #0
  02efc	0a000002	 beq         |$LN42@CMK_IOCont|
  02f00	e59d3198	 ldr         r3, [sp, #0x198]
  02f04	e3530010	 cmp         r3, #0x10
  02f08	2a000002	 bcs         |$LN43@CMK_IOCont|
  02f0c		 |$LN42@CMK_IOCont|

; 1576 :                 return FALSE;

  02f0c	e3a03000	 mov         r3, #0
  02f10	e58d3090	 str         r3, [sp, #0x90]
  02f14	ea0001de	 b           |$LN111@CMK_IOCont|
  02f18		 |$LN43@CMK_IOCont|

; 1577 :             }
; 1578 :             pAllocDesc = (union CMEM_AllocUnion*)pInBuf;

  02f18	e59d3194	 ldr         r3, [sp, #0x194]
  02f1c	e58d3008	 str         r3, [sp, #8]

; 1579 : 
; 1580 :             reqsize = pAllocDesc->get_pool_inparams.size;

  02f20	e59d3008	 ldr         r3, [sp, #8]
  02f24	e5933000	 ldr         r3, [r3]
  02f28	e58d3034	 str         r3, [sp, #0x34]

; 1581 :             bi = pAllocDesc->get_pool_inparams.blockid;

  02f2c	e59d3008	 ldr         r3, [sp, #8]
  02f30	e2833004	 add         r3, r3, #4
  02f34	e5933000	 ldr         r3, [r3]
  02f38	e58d304c	 str         r3, [sp, #0x4C]

; 1582 : 
; 1583 :             if (bi >= NBLOCKS) {

  02f3c	e59d304c	 ldr         r3, [sp, #0x4C]
  02f40	e3530002	 cmp         r3, #2
  02f44	ba000006	 blt         |$LN41@CMK_IOCont|

; 1584 :                 __E("ioctl: invalid block id %d, must be < %d\n",
; 1585 :                         bi, NBLOCKS);

  02f48	e3a02002	 mov         r2, #2
  02f4c	e59d104c	 ldr         r1, [sp, #0x4C]
  02f50	e59f07e0	 ldr         r0, [pc, #0x7E0]
  02f54	eb000000	 bl          NKDbgPrintfW

; 1586 :                 return FALSE;

  02f58	e3a03000	 mov         r3, #0
  02f5c	e58d3090	 str         r3, [sp, #0x90]
  02f60	ea0001cb	 b           |$LN111@CMK_IOCont|
  02f64		 |$LN41@CMK_IOCont|

; 1587 :             }
; 1588 : 
; 1589 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  02f64	e3e01000	 mvn         r1, #0
  02f68	e59f3738	 ldr         r3, [pc, #0x738]
  02f6c	e5930000	 ldr         r0, [r3]
  02f70	eb000000	 bl          WaitForSingleObject
  02f74	e58d015c	 str         r0, [sp, #0x15C]
  02f78	e59d315c	 ldr         r3, [sp, #0x15C]
  02f7c	e3530000	 cmp         r3, #0
  02f80	0a000002	 beq         |$LN40@CMK_IOCont|

; 1590 :                 return FALSE;

  02f84	e3a03000	 mov         r3, #0
  02f88	e58d3090	 str         r3, [sp, #0x90]
  02f8c	ea0001c0	 b           |$LN111@CMK_IOCont|
  02f90		 |$LN40@CMK_IOCont|

; 1591 :             }
; 1592 : 
; 1593 :             __D("GETPOOL: Trying to find a pool to fit size %d\n", reqsize);

  02f90	e59d1034	 ldr         r1, [sp, #0x34]
  02f94	e59f0798	 ldr         r0, [pc, #0x798]
  02f98	eb000000	 bl          NKDbgPrintfW

; 1594 :             for (i = 0; i < npools[bi]; i++) {

  02f9c	e3a03000	 mov         r3, #0
  02fa0	e58d3014	 str         r3, [sp, #0x14]
  02fa4	ea000002	 b           |$LN39@CMK_IOCont|
  02fa8		 |$LN38@CMK_IOCont|
  02fa8	e59d3014	 ldr         r3, [sp, #0x14]
  02fac	e2833001	 add         r3, r3, #1
  02fb0	e58d3014	 str         r3, [sp, #0x14]
  02fb4		 |$LN39@CMK_IOCont|
  02fb4	e59d104c	 ldr         r1, [sp, #0x4C]
  02fb8	e3a03004	 mov         r3, #4
  02fbc	e0020391	 mul         r2, r1, r3
  02fc0	e59f3768	 ldr         r3, [pc, #0x768]
  02fc4	e0833002	 add         r3, r3, r2
  02fc8	e59d2014	 ldr         r2, [sp, #0x14]
  02fcc	e5933000	 ldr         r3, [r3]
  02fd0	e1520003	 cmp         r2, r3
  02fd4	aa000040	 bge         |$LN37@CMK_IOCont|

; 1595 :                 size = p_objs[bi][i].size;

  02fd8	e59d104c	 ldr         r1, [sp, #0x4C]
  02fdc	e3a03c0e	 mov         r3, #0xE, 24
  02fe0	e0020391	 mul         r2, r1, r3
  02fe4	e59f3740	 ldr         r3, [pc, #0x740]
  02fe8	e0831002	 add         r1, r3, r2
  02fec	e59d2014	 ldr         r2, [sp, #0x14]
  02ff0	e3a0301c	 mov         r3, #0x1C
  02ff4	e0030392	 mul         r3, r2, r3
  02ff8	e0813003	 add         r3, r1, r3
  02ffc	e2833014	 add         r3, r3, #0x14
  03000	e5933000	 ldr         r3, [r3]
  03004	e58d3024	 str         r3, [sp, #0x24]

; 1596 :                 freelistp = &p_objs[bi][i].freelist;

  03008	e59d104c	 ldr         r1, [sp, #0x4C]
  0300c	e3a03c0e	 mov         r3, #0xE, 24
  03010	e0020391	 mul         r2, r1, r3
  03014	e59f3710	 ldr         r3, [pc, #0x710]
  03018	e0831002	 add         r1, r3, r2
  0301c	e59d2014	 ldr         r2, [sp, #0x14]
  03020	e3a0301c	 mov         r3, #0x1C
  03024	e0030392	 mul         r3, r2, r3
  03028	e0813003	 add         r3, r1, r3
  0302c	e58d3010	 str         r3, [sp, #0x10]

; 1597 : 
; 1598 :                 __D("GETPOOL: size (%d) > reqsize (%d)?\n", size, reqsize);

  03030	e59d2034	 ldr         r2, [sp, #0x34]
  03034	e59d1024	 ldr         r1, [sp, #0x24]
  03038	e59f06e8	 ldr         r0, [pc, #0x6E8]
  0303c	eb000000	 bl          NKDbgPrintfW

; 1599 :                 if (size >= reqsize) {

  03040	e59d2024	 ldr         r2, [sp, #0x24]
  03044	e59d3034	 ldr         r3, [sp, #0x34]
  03048	e1520003	 cmp         r2, r3
  0304c	3a000021	 bcc         |$LN36@CMK_IOCont|

; 1600 :                     __D("GETPOOL: delta (%d) < olddelta (%d)?\n",
; 1601 :                             size - reqsize, delta);

  03050	e59d2050	 ldr         r2, [sp, #0x50]
  03054	e59d1024	 ldr         r1, [sp, #0x24]
  03058	e59d3034	 ldr         r3, [sp, #0x34]
  0305c	e0411003	 sub         r1, r1, r3
  03060	e59f06bc	 ldr         r0, [pc, #0x6BC]
  03064	eb000000	 bl          NKDbgPrintfW

; 1602 :                     if ((size - reqsize) < (unsigned int)delta) {

  03068	e59d2024	 ldr         r2, [sp, #0x24]
  0306c	e59d3034	 ldr         r3, [sp, #0x34]
  03070	e0422003	 sub         r2, r2, r3
  03074	e59d3050	 ldr         r3, [sp, #0x50]
  03078	e1520003	 cmp         r2, r3
  0307c	2a000015	 bcs         |$LN35@CMK_IOCont|

; 1603 :                         if (!IsListEmpty(freelistp)) {

  03080	e59d3010	 ldr         r3, [sp, #0x10]
  03084	e5932000	 ldr         r2, [r3]
  03088	e59d3010	 ldr         r3, [sp, #0x10]
  0308c	e1520003	 cmp         r2, r3
  03090	1a000002	 bne         |$LN147@CMK_IOCont|
  03094	e3a03001	 mov         r3, #1
  03098	e58d3160	 str         r3, [sp, #0x160]
  0309c	ea000001	 b           |$LN148@CMK_IOCont|
  030a0		 |$LN147@CMK_IOCont|
  030a0	e3a03000	 mov         r3, #0
  030a4	e58d3160	 str         r3, [sp, #0x160]
  030a8		 |$LN148@CMK_IOCont|
  030a8	e59d3160	 ldr         r3, [sp, #0x160]
  030ac	e3530000	 cmp         r3, #0
  030b0	1a000008	 bne         |$LN34@CMK_IOCont|

; 1604 :                             delta = size - reqsize;

  030b4	e59d2024	 ldr         r2, [sp, #0x24]
  030b8	e59d3034	 ldr         r3, [sp, #0x34]
  030bc	e0423003	 sub         r3, r2, r3
  030c0	e58d3050	 str         r3, [sp, #0x50]

; 1605 :                             __D("GETPOOL: Found a best fit delta %d\n", delta);

  030c4	e59d1050	 ldr         r1, [sp, #0x50]
  030c8	e59f0650	 ldr         r0, [pc, #0x650]
  030cc	eb000000	 bl          NKDbgPrintfW

; 1606 :                             pool = i;

  030d0	e59d3014	 ldr         r3, [sp, #0x14]
  030d4	e58d3064	 str         r3, [sp, #0x64]
  030d8		 |$LN34@CMK_IOCont|
  030d8		 |$LN35@CMK_IOCont|
  030d8		 |$LN36@CMK_IOCont|

; 1607 :                         }
; 1608 :                     }
; 1609 :                 }
; 1610 :             }

  030d8	eaffffb2	 b           |$LN38@CMK_IOCont|
  030dc		 |$LN37@CMK_IOCont|

; 1611 : 
; 1612 :             if (pool == -1 && heap_pool[bi] != -1) {

  030dc	e59d3064	 ldr         r3, [sp, #0x64]
  030e0	e3730001	 cmn         r3, #1
  030e4	1a00001b	 bne         |$LN33@CMK_IOCont|
  030e8	e59d104c	 ldr         r1, [sp, #0x4C]
  030ec	e3a03004	 mov         r3, #4
  030f0	e0020391	 mul         r2, r1, r3
  030f4	e59f3620	 ldr         r3, [pc, #0x620]
  030f8	e0833002	 add         r3, r3, r2
  030fc	e5933000	 ldr         r3, [r3]
  03100	e3730001	 cmn         r3, #1
  03104	0a000013	 beq         |$LN33@CMK_IOCont|

; 1613 :                 if (useHeapIfPoolUnavailable) {

  03108	e59f3608	 ldr         r3, [pc, #0x608]
  0310c	e5933000	 ldr         r3, [r3]
  03110	e3530000	 cmp         r3, #0
  03114	0a00000f	 beq         |$LN32@CMK_IOCont|

; 1614 :                     /* no pool buffer available, try heap */
; 1615 :                     virtp = (unsigned long)HeapMem_alloc(bi, reqsize,
; 1616 :                             HEAP_ALIGN, DRYRUN);

  03118	e3a03001	 mov         r3, #1
  0311c	e59f25f0	 ldr         r2, [pc, #0x5F0]
  03120	e5922000	 ldr         r2, [r2]
  03124	e59d1034	 ldr         r1, [sp, #0x34]
  03128	e59d004c	 ldr         r0, [sp, #0x4C]
  0312c	eb000000	 bl          HeapMem_alloc
  03130	e58d0164	 str         r0, [sp, #0x164]
  03134	e59d3164	 ldr         r3, [sp, #0x164]
  03138	e58d301c	 str         r3, [sp, #0x1C]

; 1617 :                     if (virtp != (unsigned long)NULL) {

  0313c	e59d301c	 ldr         r3, [sp, #0x1C]
  03140	e3530000	 cmp         r3, #0
  03144	0a000003	 beq         |$LN31@CMK_IOCont|

; 1618 :                         /*
; 1619 :                          * Indicate heap pool with magic negative value.
; 1620 :                          * -1 indicates no pool and no heap.
; 1621 :                          * -2 indicates no pool but heap available and allowed.
; 1622 :                          */
; 1623 :                         pool = -2;

  03148	e3e03001	 mvn         r3, #1
  0314c	e58d3064	 str         r3, [sp, #0x64]

; 1624 : 
; 1625 :                         __D("GETPOOL: no pool-based buffer available, returning heap \"pool\" instead (due to config override)\n");

  03150	e59f05b8	 ldr         r0, [pc, #0x5B8]
  03154	eb000000	 bl          NKDbgPrintfW
  03158		 |$LN31@CMK_IOCont|
  03158		 |$LN32@CMK_IOCont|
  03158		 |$LN33@CMK_IOCont|

; 1626 :                     }
; 1627 :                 }
; 1628 :             }
; 1629 : 
; 1630 :             ReleaseMutex(cmem_mutex);

  03158	e59f3548	 ldr         r3, [pc, #0x548]
  0315c	e5930000	 ldr         r0, [r3]
  03160	eb000000	 bl          ReleaseMutex

; 1631 : 
; 1632 :             if (pool == -1) {

  03164	e59d3064	 ldr         r3, [sp, #0x64]
  03168	e3730001	 cmn         r3, #1
  0316c	1a000005	 bne         |$LN30@CMK_IOCont|

; 1633 :                 __E("Failed to find a pool which fits %d\n", reqsize);

  03170	e59d1034	 ldr         r1, [sp, #0x34]
  03174	e59f0590	 ldr         r0, [pc, #0x590]
  03178	eb000000	 bl          NKDbgPrintfW

; 1634 :                 return FALSE;

  0317c	e3a03000	 mov         r3, #0
  03180	e58d3090	 str         r3, [sp, #0x90]
  03184	ea000142	 b           |$LN111@CMK_IOCont|
  03188		 |$LN30@CMK_IOCont|

; 1635 :             }
; 1636 : 
; 1637 :             if (InBufLen < sizeof(pool)) {

  03188	e59d3198	 ldr         r3, [sp, #0x198]
  0318c	e3530004	 cmp         r3, #4
  03190	2a000002	 bcs         |$LN29@CMK_IOCont|

; 1638 :                 return FALSE;

  03194	e3a03000	 mov         r3, #0
  03198	e58d3090	 str         r3, [sp, #0x90]
  0319c	ea00013c	 b           |$LN111@CMK_IOCont|
  031a0		 |$LN29@CMK_IOCont|

; 1639 :             }
; 1640 :             ((union CMEM_AllocUnion*)pInBuf)->poolid = pool;

  031a0	e59d2064	 ldr         r2, [sp, #0x64]
  031a4	e59d3194	 ldr         r3, [sp, #0x194]
  031a8	e5832000	 str         r2, [r3]

; 1641 :             __D("GETPOOL: returning %d\n", pool);

  031ac	e59d1064	 ldr         r1, [sp, #0x64]
  031b0	e59f0550	 ldr         r0, [pc, #0x550]
  031b4	eb000000	 bl          NKDbgPrintfW

; 1642 :             break;

  031b8	ea000133	 b           |$LN109@CMK_IOCont|
  031bc		 |$LN28@CMK_IOCont|

; 1643 : 
; 1644 :         case CMEM_IOCCACHE:
; 1645 :             __D("CACHE%s%s ioctl received.\n",
; 1646 :                     Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "");

  031bc	e59d3190	 ldr         r3, [sp, #0x190]
  031c0	e3130c02	 tst         r3, #2, 24
  031c4	0a000002	 beq         |$LN149@CMK_IOCont|
  031c8	e59f3534	 ldr         r3, [pc, #0x534]
  031cc	e58d3168	 str         r3, [sp, #0x168]
  031d0	ea000001	 b           |$LN150@CMK_IOCont|
  031d4		 |$LN149@CMK_IOCont|
  031d4	e59f3520	 ldr         r3, [pc, #0x520]
  031d8	e58d3168	 str         r3, [sp, #0x168]
  031dc		 |$LN150@CMK_IOCont|
  031dc	e59d3190	 ldr         r3, [sp, #0x190]
  031e0	e3130c01	 tst         r3, #1, 24
  031e4	0a000002	 beq         |$LN151@CMK_IOCont|
  031e8	e59f3510	 ldr         r3, [pc, #0x510]
  031ec	e58d316c	 str         r3, [sp, #0x16C]
  031f0	ea000001	 b           |$LN152@CMK_IOCont|
  031f4		 |$LN151@CMK_IOCont|
  031f4	e59f3500	 ldr         r3, [pc, #0x500]
  031f8	e58d316c	 str         r3, [sp, #0x16C]
  031fc		 |$LN152@CMK_IOCont|
  031fc	e59d2168	 ldr         r2, [sp, #0x168]
  03200	e59d116c	 ldr         r1, [sp, #0x16C]
  03204	e59f04ec	 ldr         r0, [pc, #0x4EC]
  03208	eb000000	 bl          NKDbgPrintfW

; 1647 : 
; 1648 :             if (!pInBuf || InBufLen < sizeof(block)) {

  0320c	e59d3194	 ldr         r3, [sp, #0x194]
  03210	e3530000	 cmp         r3, #0
  03214	0a000002	 beq         |$LN26@CMK_IOCont|
  03218	e59d3198	 ldr         r3, [sp, #0x198]
  0321c	e3530008	 cmp         r3, #8
  03220	2a000002	 bcs         |$LN27@CMK_IOCont|
  03224		 |$LN26@CMK_IOCont|

; 1649 :                 return FALSE;

  03224	e3a03000	 mov         r3, #0
  03228	e58d3090	 str         r3, [sp, #0x90]
  0322c	ea000118	 b           |$LN111@CMK_IOCont|
  03230		 |$LN27@CMK_IOCont|

; 1650 :             }
; 1651 :             pBlock = (struct block_struct*)pInBuf;

  03230	e59d3194	 ldr         r3, [sp, #0x194]
  03234	e58d3030	 str         r3, [sp, #0x30]

; 1652 : 
; 1653 :             virtp = pBlock->addr;

  03238	e59d3030	 ldr         r3, [sp, #0x30]
  0323c	e5933000	 ldr         r3, [r3]
  03240	e58d301c	 str         r3, [sp, #0x1C]

; 1654 :             virtp_end = virtp + pBlock->size;

  03244	e59d3030	 ldr         r3, [sp, #0x30]
  03248	e2833004	 add         r3, r3, #4
  0324c	e59d201c	 ldr         r2, [sp, #0x1C]
  03250	e5933000	 ldr         r3, [r3]
  03254	e0823003	 add         r3, r2, r3
  03258	e58d3068	 str         r3, [sp, #0x68]

; 1655 : 
; 1656 : #ifdef CHECK_FOR_ALLOCATED_BUFFER
; 1657 :             physp = get_phys(virtp);
; 1658 :             if (physp == 0) {
; 1659 :                 __E("CACHE%s%s: Failed to convert virtual %#lx to physical\n",
; 1660 :                         Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "",
; 1661 :                         virtp);
; 1662 :                 return FALSE;
; 1663 :             }
; 1664 : 
; 1665 :             __D("CACHE%s%s: translated %#lx user virtual to %#lx physical\n",
; 1666 :                     Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "",
; 1667 :                     virtp, physp);
; 1668 : 
; 1669 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {
; 1670 :                 return FALSE;
; 1671 :             }
; 1672 :             entry = find_busy_entry(physp, &pool, &e, &bi, FALSE);
; 1673 :             ReleaseMutex(cmem_mutex);
; 1674 :             if (!entry) {
; 1675 :                 __E("CACHE%s%s: Failed to find allocated buffer at virtual %#lx\n",
; 1676 :                         Ioctl & CMEM_WB ? "WB" : "",
; 1677 :                         Ioctl & CMEM_INV ? "INV" : "", virtp);
; 1678 :                 return FALSE;
; 1679 :             }
; 1680 :             if (!(entry->flags & CMEM_CACHED)) {
; 1681 :                 __E("CACHE%s%s: virtual buffer %#lx not cached\n",
; 1682 :                         Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "",
; 1683 :                         virtp);
; 1684 :                 return FALSE;
; 1685 :             }
; 1686 : #endif
; 1687 : 
; 1688 : #ifdef USE_MMAPSEM
; 1689 :             __D("CACHE%s%s: acquiring mmap_sem ...\n",
; 1690 :                     Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "");
; 1691 :             down_write(&current->mm->mmap_sem);
; 1692 : #endif
; 1693 : 
; 1694 :             switch (Ioctl) {

  0325c	e59d3190	 ldr         r3, [sp, #0x190]
  03260	e58d3170	 str         r3, [sp, #0x170]
  03264	e59d2170	 ldr         r2, [sp, #0x170]
  03268	e3a03c01	 mov         r3, #1, 24
  0326c	e3833007	 orr         r3, r3, #7
  03270	e1520003	 cmp         r2, r3
  03274	0a00000a	 beq         |$LN23@CMK_IOCont|
  03278	e59d2170	 ldr         r2, [sp, #0x170]
  0327c	e3a03c02	 mov         r3, #2, 24
  03280	e3833007	 orr         r3, r3, #7
  03284	e1520003	 cmp         r2, r3
  03288	0a000010	 beq         |$LN22@CMK_IOCont|
  0328c	e59d2170	 ldr         r2, [sp, #0x170]
  03290	e3a03c03	 mov         r3, #3, 24
  03294	e3833007	 orr         r3, r3, #7
  03298	e1520003	 cmp         r2, r3
  0329c	0a000016	 beq         |$LN21@CMK_IOCont|
  032a0	ea00001f	 b           |$LN24@CMK_IOCont|
  032a4		 |$LN23@CMK_IOCont|

; 1695 :                 case CMEM_IOCCACHEWB:
; 1696 :                     CacheRangeFlush((LPVOID)virtp,
; 1697 :                             (DWORD)virtp_end - (DWORD)virtp,
; 1698 :                             CACHE_SYNC_WRITEBACK);

  032a4	e3a02004	 mov         r2, #4
  032a8	e59d1068	 ldr         r1, [sp, #0x68]
  032ac	e59d301c	 ldr         r3, [sp, #0x1C]
  032b0	e0411003	 sub         r1, r1, r3
  032b4	e59d001c	 ldr         r0, [sp, #0x1C]
  032b8	eb000000	 bl          CacheRangeFlush

; 1699 :                     __D("CACHEWB: cleaned user virtual %#lx->%#lx\n",
; 1700 :                             virtp, virtp_end);

  032bc	e59d2068	 ldr         r2, [sp, #0x68]
  032c0	e59d101c	 ldr         r1, [sp, #0x1C]
  032c4	e59f0428	 ldr         r0, [pc, #0x428]
  032c8	eb000000	 bl          NKDbgPrintfW

; 1701 : 
; 1702 :                     break;

  032cc	ea000014	 b           |$LN24@CMK_IOCont|
  032d0		 |$LN22@CMK_IOCont|

; 1703 : 
; 1704 :                 case CMEM_IOCCACHEINV:
; 1705 :                     CacheRangeFlush((LPVOID)virtp,
; 1706 :                             (DWORD)virtp_end - (DWORD)virtp,
; 1707 :                             CACHE_SYNC_DISCARD);

  032d0	e3a02001	 mov         r2, #1
  032d4	e59d1068	 ldr         r1, [sp, #0x68]
  032d8	e59d301c	 ldr         r3, [sp, #0x1C]
  032dc	e0411003	 sub         r1, r1, r3
  032e0	e59d001c	 ldr         r0, [sp, #0x1C]
  032e4	eb000000	 bl          CacheRangeFlush

; 1708 :                     __D("CACHEINV: invalidated user virtual %#lx->%#lx\n",
; 1709 :                             virtp, virtp_end);

  032e8	e59d2068	 ldr         r2, [sp, #0x68]
  032ec	e59d101c	 ldr         r1, [sp, #0x1C]
  032f0	e59f03f8	 ldr         r0, [pc, #0x3F8]
  032f4	eb000000	 bl          NKDbgPrintfW

; 1710 : 
; 1711 :                     break;

  032f8	ea000009	 b           |$LN24@CMK_IOCont|
  032fc		 |$LN21@CMK_IOCont|

; 1712 : 
; 1713 :                 case CMEM_IOCCACHEWBINV:
; 1714 :                     CacheRangeFlush((LPVOID)virtp,
; 1715 :                             (DWORD)virtp_end - (DWORD)virtp,
; 1716 :                             CACHE_SYNC_DISCARD);

  032fc	e3a02001	 mov         r2, #1
  03300	e59d1068	 ldr         r1, [sp, #0x68]
  03304	e59d301c	 ldr         r3, [sp, #0x1C]
  03308	e0411003	 sub         r1, r1, r3
  0330c	e59d001c	 ldr         r0, [sp, #0x1C]
  03310	eb000000	 bl          CacheRangeFlush

; 1717 :                     __D("CACHEWBINV: flushed user virtual %#lx->%#lx\n",
; 1718 :                             virtp, virtp_end);

  03314	e59d2068	 ldr         r2, [sp, #0x68]
  03318	e59d101c	 ldr         r1, [sp, #0x1C]
  0331c	e59f03c8	 ldr         r0, [pc, #0x3C8]
  03320	eb000000	 bl          NKDbgPrintfW
  03324		 |$LN24@CMK_IOCont|

; 1719 : 
; 1720 :                     break;
; 1721 :             }
; 1722 : 
; 1723 : #ifdef USE_MMAPSEM
; 1724 :             __D("CACHE%s%s: releasing mmap_sem ...\n",
; 1725 :                     Ioctl & CMEM_WB ? "WB" : "", Ioctl & CMEM_INV ? "INV" : "");
; 1726 :             up_write(&current->mm->mmap_sem);
; 1727 : #endif
; 1728 :             break;

  03324	ea0000d8	 b           |$LN109@CMK_IOCont|
  03328		 |$LN20@CMK_IOCont|

; 1729 : 
; 1730 :         case CMEM_IOCGETVERSION:
; 1731 :             __D("GETVERSION ioctl received, returning %#x.\n", version);

  03328	e59f33b4	 ldr         r3, [pc, #0x3B4]
  0332c	e5931000	 ldr         r1, [r3]
  03330	e59f03b0	 ldr         r0, [pc, #0x3B0]
  03334	eb000000	 bl          NKDbgPrintfW

; 1732 : 
; 1733 :             if (!pInBuf || InBufLen < sizeof(version)) {

  03338	e59d3194	 ldr         r3, [sp, #0x194]
  0333c	e3530000	 cmp         r3, #0
  03340	0a000002	 beq         |$LN18@CMK_IOCont|
  03344	e59d3198	 ldr         r3, [sp, #0x198]
  03348	e3530004	 cmp         r3, #4
  0334c	2a000002	 bcs         |$LN19@CMK_IOCont|
  03350		 |$LN18@CMK_IOCont|

; 1734 :                 return FALSE;

  03350	e3a03000	 mov         r3, #0
  03354	e58d3090	 str         r3, [sp, #0x90]
  03358	ea0000cd	 b           |$LN111@CMK_IOCont|
  0335c		 |$LN19@CMK_IOCont|

; 1735 :             }
; 1736 :             *(unsigned int*)pInBuf = version;

  0335c	e59f3380	 ldr         r3, [pc, #0x380]
  03360	e5932000	 ldr         r2, [r3]
  03364	e59d3194	 ldr         r3, [sp, #0x194]
  03368	e5832000	 str         r2, [r3]

; 1737 : 
; 1738 :             break;

  0336c	ea0000c6	 b           |$LN109@CMK_IOCont|
  03370		 |$LN17@CMK_IOCont|

; 1739 : 
; 1740 :         case CMEM_IOCGETNUMBLOCKS:
; 1741 :             __D("GETNUMBLOCKS ioctl received, returning %#x.\n", numBlocks);

  03370	e59f3364	 ldr         r3, [pc, #0x364]
  03374	e5931000	 ldr         r1, [r3]
  03378	e59f0360	 ldr         r0, [pc, #0x360]
  0337c	eb000000	 bl          NKDbgPrintfW

; 1742 : 
; 1743 :             if (!pInBuf || InBufLen < sizeof(numBlocks)) {

  03380	e59d3194	 ldr         r3, [sp, #0x194]
  03384	e3530000	 cmp         r3, #0
  03388	0a000002	 beq         |$LN15@CMK_IOCont|
  0338c	e59d3198	 ldr         r3, [sp, #0x198]
  03390	e3530004	 cmp         r3, #4
  03394	2a000002	 bcs         |$LN16@CMK_IOCont|
  03398		 |$LN15@CMK_IOCont|

; 1744 :                 return FALSE;

  03398	e3a03000	 mov         r3, #0
  0339c	e58d3090	 str         r3, [sp, #0x90]
  033a0	ea0000bb	 b           |$LN111@CMK_IOCont|
  033a4		 |$LN16@CMK_IOCont|

; 1745 :             }
; 1746 :             *(unsigned int*)pInBuf = numBlocks;

  033a4	e59f3330	 ldr         r3, [pc, #0x330]
  033a8	e5932000	 ldr         r2, [r3]
  033ac	e59d3194	 ldr         r3, [sp, #0x194]
  033b0	e5832000	 str         r2, [r3]

; 1747 : 
; 1748 :             break;

  033b4	ea0000b4	 b           |$LN109@CMK_IOCont|
  033b8		 |$LN14@CMK_IOCont|

; 1749 : 
; 1750 :         case CMEM_IOCGETBLOCK:
; 1751 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  033b8	e59d3194	 ldr         r3, [sp, #0x194]
  033bc	e3530000	 cmp         r3, #0
  033c0	0a000002	 beq         |$LN12@CMK_IOCont|
  033c4	e59d3198	 ldr         r3, [sp, #0x198]
  033c8	e3530010	 cmp         r3, #0x10
  033cc	2a000002	 bcs         |$LN13@CMK_IOCont|
  033d0		 |$LN12@CMK_IOCont|

; 1752 :                 return FALSE;

  033d0	e3a03000	 mov         r3, #0
  033d4	e58d3090	 str         r3, [sp, #0x90]
  033d8	ea0000ad	 b           |$LN111@CMK_IOCont|
  033dc		 |$LN13@CMK_IOCont|

; 1753 :             }
; 1754 :             pAllocDesc = (union CMEM_AllocUnion*)pInBuf;

  033dc	e59d3194	 ldr         r3, [sp, #0x194]
  033e0	e58d3008	 str         r3, [sp, #8]

; 1755 : 
; 1756 :             bi = pAllocDesc->blockid;

  033e4	e59d3008	 ldr         r3, [sp, #8]
  033e8	e5933000	 ldr         r3, [r3]
  033ec	e58d304c	 str         r3, [sp, #0x4C]

; 1757 : 
; 1758 :             pAllocDesc->get_block_outparams.physp = block_start[bi];

  033f0	e59d104c	 ldr         r1, [sp, #0x4C]
  033f4	e3a03004	 mov         r3, #4
  033f8	e0020391	 mul         r2, r1, r3
  033fc	e59f32d0	 ldr         r3, [pc, #0x2D0]
  03400	e0833002	 add         r3, r3, r2
  03404	e5932000	 ldr         r2, [r3]
  03408	e59d3008	 ldr         r3, [sp, #8]
  0340c	e5832000	 str         r2, [r3]

; 1759 :             pAllocDesc->get_block_outparams.size = block_end[bi] -
; 1760 :                 block_start[bi];

  03410	e59d104c	 ldr         r1, [sp, #0x4C]
  03414	e3a03004	 mov         r3, #4
  03418	e0020391	 mul         r2, r1, r3
  0341c	e59f32b4	 ldr         r3, [pc, #0x2B4]
  03420	e0830002	 add         r0, r3, r2
  03424	e59d104c	 ldr         r1, [sp, #0x4C]
  03428	e3a03004	 mov         r3, #4
  0342c	e0020391	 mul         r2, r1, r3
  03430	e59f329c	 ldr         r3, [pc, #0x29C]
  03434	e0833002	 add         r3, r3, r2
  03438	e5902000	 ldr         r2, [r0]
  0343c	e5933000	 ldr         r3, [r3]
  03440	e0422003	 sub         r2, r2, r3
  03444	e59d3008	 ldr         r3, [sp, #8]
  03448	e2833004	 add         r3, r3, #4
  0344c	e5832000	 str         r2, [r3]

; 1761 : 
; 1762 :             __D("GETBLOCK ioctl received, returning phys base 0x%lx, size 0x%x.\n",
; 1763 :                     pAllocDesc->get_block_outparams.physp,
; 1764 :                     pAllocDesc->get_block_outparams.size);

  03450	e59d3008	 ldr         r3, [sp, #8]
  03454	e2833004	 add         r3, r3, #4
  03458	e5932000	 ldr         r2, [r3]
  0345c	e59d3008	 ldr         r3, [sp, #8]
  03460	e5931000	 ldr         r1, [r3]
  03464	e59f0264	 ldr         r0, [pc, #0x264]
  03468	eb000000	 bl          NKDbgPrintfW

; 1765 : 
; 1766 :             //if (copy_to_user(argp, &allocDesc, sizeof(allocDesc)))
; 1767 :             //{
; 1768 :             //  return FALSE;
; 1769 :             //}
; 1770 : 
; 1771 :             break;

  0346c	ea000086	 b           |$LN109@CMK_IOCont|
  03470		 |$LN11@CMK_IOCont|

; 1772 : 
; 1773 :        /*
; 1774 :         * argp contains the physical address and size of the region
; 1775 :         * to map, and the mapped physical address on return.
; 1776 :         */
; 1777 :         case CMEM_IOCMAPADDRESS:
; 1778 :             __D("MAPADDRESS ioctl received.\n");

  03470	e59f0254	 ldr         r0, [pc, #0x254]
  03474	eb000000	 bl          NKDbgPrintfW

; 1779 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  03478	e59d3194	 ldr         r3, [sp, #0x194]
  0347c	e3530000	 cmp         r3, #0
  03480	0a000002	 beq         |$LN9@CMK_IOCont|
  03484	e59d3198	 ldr         r3, [sp, #0x198]
  03488	e3530010	 cmp         r3, #0x10
  0348c	2a000002	 bcs         |$LN10@CMK_IOCont|
  03490		 |$LN9@CMK_IOCont|

; 1780 :                 return (FALSE);

  03490	e3a03000	 mov         r3, #0
  03494	e58d3090	 str         r3, [sp, #0x90]
  03498	ea00007d	 b           |$LN111@CMK_IOCont|
  0349c		 |$LN10@CMK_IOCont|

; 1781 :             }
; 1782 :             pAllocDesc = (union CMEM_AllocUnion *)pInBuf;

  0349c	e59d3194	 ldr         r3, [sp, #0x194]
  034a0	e58d3008	 str         r3, [sp, #8]

; 1783 :             physp = pAllocDesc->map_inparams.physp;

  034a4	e59d3008	 ldr         r3, [sp, #8]
  034a8	e5933000	 ldr         r3, [r3]
  034ac	e58d302c	 str         r3, [sp, #0x2C]

; 1784 :             size = pAllocDesc->map_inparams.size;

  034b0	e59d3008	 ldr         r3, [sp, #8]
  034b4	e2833004	 add         r3, r3, #4
  034b8	e5933000	 ldr         r3, [r3]
  034bc	e58d3024	 str         r3, [sp, #0x24]

; 1785 :             dwCallerProcId = pAllocDesc->map_inparams.dwProcId;

  034c0	e59d3008	 ldr         r3, [sp, #8]
  034c4	e2833008	 add         r3, r3, #8
  034c8	e5933000	 ldr         r3, [r3]
  034cc	e58d3038	 str         r3, [sp, #0x38]

; 1786 : 
; 1787 :             __D("MAPADDRESS: physp = %#x.\n", physp);

  034d0	e59d102c	 ldr         r1, [sp, #0x2C]
  034d4	e59f01ec	 ldr         r0, [pc, #0x1EC]
  034d8	eb000000	 bl          NKDbgPrintfW

; 1788 : 
; 1789 :             /* Acquire mutex since we will be updating mapped buffer list */
; 1790 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  034dc	e3e01000	 mvn         r1, #0
  034e0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  034e4	e5930000	 ldr         r0, [r3]
  034e8	eb000000	 bl          WaitForSingleObject
  034ec	e58d0174	 str         r0, [sp, #0x174]
  034f0	e59d3174	 ldr         r3, [sp, #0x174]
  034f4	e3530000	 cmp         r3, #0
  034f8	0a000004	 beq         |$LN8@CMK_IOCont|

; 1791 :                 __E("MAPADDRESS: WaitForSingleObject failed!\n");

  034fc	e59f01ac	 ldr         r0, [pc, #0x1AC]
  03500	eb000000	 bl          NKDbgPrintfW

; 1792 :                 return (FALSE);

  03504	e3a03000	 mov         r3, #0
  03508	e58d3090	 str         r3, [sp, #0x90]
  0350c	ea000060	 b           |$LN111@CMK_IOCont|
  03510		 |$LN8@CMK_IOCont|

; 1793 :             }
; 1794 : 
; 1795 :             virtp = mapAddress(physp, size, dwCallerProcId);

  03510	e59d2038	 ldr         r2, [sp, #0x38]
  03514	e59d1024	 ldr         r1, [sp, #0x24]
  03518	e59d002c	 ldr         r0, [sp, #0x2C]
  0351c	eb000000	 bl          mapAddress
  03520	e58d0178	 str         r0, [sp, #0x178]
  03524	e59d3178	 ldr         r3, [sp, #0x178]
  03528	e58d301c	 str         r3, [sp, #0x1C]

; 1796 : 
; 1797 :             ReleaseMutex(cmem_mutex);

  0352c	e59f3174	 ldr         r3, [pc, #0x174]
  03530	e5930000	 ldr         r0, [r3]
  03534	eb000000	 bl          ReleaseMutex

; 1798 : 
; 1799 :             if (virtp == 0) {

  03538	e59d301c	 ldr         r3, [sp, #0x1C]
  0353c	e3530000	 cmp         r3, #0
  03540	1a000005	 bne         |$LN7@CMK_IOCont|

; 1800 :                 __E("MAPADDRESS: Failed to map physical address %#lx\n",
; 1801 :                         physp);

  03544	e59d102c	 ldr         r1, [sp, #0x2C]
  03548	e59f0174	 ldr         r0, [pc, #0x174]
  0354c	eb000000	 bl          NKDbgPrintfW

; 1802 :                 return (FALSE);

  03550	e3a03000	 mov         r3, #0
  03554	e58d3090	 str         r3, [sp, #0x90]
  03558	ea00004d	 b           |$LN111@CMK_IOCont|
  0355c		 |$LN7@CMK_IOCont|

; 1803 :             }
; 1804 : 
; 1805 :             pAllocDesc->virtp = virtp;

  0355c	e59d201c	 ldr         r2, [sp, #0x1C]
  03560	e59d3008	 ldr         r3, [sp, #8]
  03564	e5832000	 str         r2, [r3]

; 1806 : 
; 1807 :             __D("MAPADDRESS: returning %#lx\n", virtp);

  03568	e59d101c	 ldr         r1, [sp, #0x1C]
  0356c	e59f014c	 ldr         r0, [pc, #0x14C]
  03570	eb000000	 bl          NKDbgPrintfW

; 1808 :             break;

  03574	ea000044	 b           |$LN109@CMK_IOCont|
  03578		 |$LN6@CMK_IOCont|

; 1809 : 
; 1810 :        /*
; 1811 :         * argp contains the physical address and size of the region
; 1812 :         * to map, and the mapped physical address on return.
; 1813 :         */
; 1814 :         case CMEM_IOCUNMAPADDRESS:
; 1815 :             __D("UNMAPADDRESS ioctl received.\n");

  03578	e59f013c	 ldr         r0, [pc, #0x13C]
  0357c	eb000000	 bl          NKDbgPrintfW

; 1816 :             if (!pInBuf || InBufLen < sizeof(union CMEM_AllocUnion)) {

  03580	e59d3194	 ldr         r3, [sp, #0x194]
  03584	e3530000	 cmp         r3, #0
  03588	0a000002	 beq         |$LN4@CMK_IOCont|
  0358c	e59d3198	 ldr         r3, [sp, #0x198]
  03590	e3530010	 cmp         r3, #0x10
  03594	2a000002	 bcs         |$LN5@CMK_IOCont|
  03598		 |$LN4@CMK_IOCont|

; 1817 :                 return (FALSE);

  03598	e3a03000	 mov         r3, #0
  0359c	e58d3090	 str         r3, [sp, #0x90]
  035a0	ea00003b	 b           |$LN111@CMK_IOCont|
  035a4		 |$LN5@CMK_IOCont|

; 1818 :             }
; 1819 : 
; 1820 :             pAllocDesc = (union CMEM_AllocUnion *)pInBuf;

  035a4	e59d3194	 ldr         r3, [sp, #0x194]
  035a8	e58d3008	 str         r3, [sp, #8]

; 1821 :             virtp = pAllocDesc->unmap_inparams.virtp;

  035ac	e59d3008	 ldr         r3, [sp, #8]
  035b0	e5933000	 ldr         r3, [r3]
  035b4	e58d301c	 str         r3, [sp, #0x1C]

; 1822 :             size = pAllocDesc->unmap_inparams.size;

  035b8	e59d3008	 ldr         r3, [sp, #8]
  035bc	e2833004	 add         r3, r3, #4
  035c0	e5933000	 ldr         r3, [r3]
  035c4	e58d3024	 str         r3, [sp, #0x24]

; 1823 :             dwCallerProcId = pAllocDesc->unmap_inparams.dwProcId;

  035c8	e59d3008	 ldr         r3, [sp, #8]
  035cc	e2833008	 add         r3, r3, #8
  035d0	e5933000	 ldr         r3, [r3]
  035d4	e58d3038	 str         r3, [sp, #0x38]

; 1824 :             __D("UNMAPADDRESS: virtp = %#lx.\n", virtp);

  035d8	e59d101c	 ldr         r1, [sp, #0x1C]
  035dc	e59f00d4	 ldr         r0, [pc, #0xD4]
  035e0	eb000000	 bl          NKDbgPrintfW

; 1825 :             __D("UNMAPADDRESS: size = %#lx.\n", size);

  035e4	e59d1024	 ldr         r1, [sp, #0x24]
  035e8	e59f00c4	 ldr         r0, [pc, #0xC4]
  035ec	eb000000	 bl          NKDbgPrintfW

; 1826 : 
; 1827 :             /* Acquire mutex since we will be updating mapped buffer list */
; 1828 :             if (WaitForSingleObject(cmem_mutex, INFINITE) != WAIT_OBJECT_0) {

  035f0	e3e01000	 mvn         r1, #0
  035f4	e59f30ac	 ldr         r3, [pc, #0xAC]
  035f8	e5930000	 ldr         r0, [r3]
  035fc	eb000000	 bl          WaitForSingleObject
  03600	e58d017c	 str         r0, [sp, #0x17C]
  03604	e59d317c	 ldr         r3, [sp, #0x17C]
  03608	e3530000	 cmp         r3, #0
  0360c	0a000004	 beq         |$LN3@CMK_IOCont|

; 1829 :                 __E("MAPADDRESS: WaitForSingleObject failed!\n");

  03610	e59f0098	 ldr         r0, [pc, #0x98]
  03614	eb000000	 bl          NKDbgPrintfW

; 1830 :                 return (FALSE);

  03618	e3a03000	 mov         r3, #0
  0361c	e58d3090	 str         r3, [sp, #0x90]
  03620	ea00001b	 b           |$LN111@CMK_IOCont|
  03624		 |$LN3@CMK_IOCont|

; 1831 :             }
; 1832 : 
; 1833 :             if (unmapAddress(virtp, size, dwCallerProcId) != 0) {

  03624	e59d2038	 ldr         r2, [sp, #0x38]
  03628	e59d1024	 ldr         r1, [sp, #0x24]
  0362c	e59d001c	 ldr         r0, [sp, #0x1C]
  03630	eb000000	 bl          unmapAddress
  03634	e58d0180	 str         r0, [sp, #0x180]
  03638	e59d3180	 ldr         r3, [sp, #0x180]
  0363c	e3530000	 cmp         r3, #0
  03640	0a000008	 beq         |$LN2@CMK_IOCont|

; 1834 :                 __E("UNMAPADDRESS: Failed to unmap virtual address %#lx\n",
; 1835 :                         virtp);

  03644	e59d101c	 ldr         r1, [sp, #0x1C]
  03648	e59f005c	 ldr         r0, [pc, #0x5C]
  0364c	eb000000	 bl          NKDbgPrintfW

; 1836 :                 ReleaseMutex(cmem_mutex);

  03650	e59f3050	 ldr         r3, [pc, #0x50]
  03654	e5930000	 ldr         r0, [r3]
  03658	eb000000	 bl          ReleaseMutex

; 1837 :                 return (FALSE);

  0365c	e3a03000	 mov         r3, #0
  03660	e58d3090	 str         r3, [sp, #0x90]
  03664	ea00000a	 b           |$LN111@CMK_IOCont|
  03668		 |$LN2@CMK_IOCont|

; 1838 :             }
; 1839 : 
; 1840 :             ReleaseMutex(cmem_mutex);

  03668	e59f3038	 ldr         r3, [pc, #0x38]
  0366c	e5930000	 ldr         r0, [r3]
  03670	eb000000	 bl          ReleaseMutex

; 1841 : 
; 1842 :             break;

  03674	ea000004	 b           |$LN109@CMK_IOCont|
  03678		 |$LN1@CMK_IOCont|

; 1843 : 
; 1844 :         default:
; 1845 :             __E("Unknown ioctl received.\n");

  03678	e59f0024	 ldr         r0, [pc, #0x24]
  0367c	eb000000	 bl          NKDbgPrintfW

; 1846 :             return FALSE;

  03680	e3a03000	 mov         r3, #0
  03684	e58d3090	 str         r3, [sp, #0x90]
  03688	ea000001	 b           |$LN111@CMK_IOCont|
  0368c		 |$LN109@CMK_IOCont|

; 1847 :     }
; 1848 : 
; 1849 :     return TRUE;

  0368c	e3a03001	 mov         r3, #1
  03690	e58d3090	 str         r3, [sp, #0x90]
  03694		 |$LN111@CMK_IOCont|

; 1850 : }

  03694	e59d0090	 ldr         r0, [sp, #0x90]
  03698	e28ddf61	 add         sp, sp, #0x61, 30
  0369c	e89d6000	 ldmia       sp, {sp, lr}
  036a0	e12fff1e	 bx          lr
  036a4		 |$LN171@CMK_IOCont|
  036a4		 |$LN172@CMK_IOCont|
  036a4	00000000	 DCD         |??_C@_1EM@MJEFGDHI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@|
  036a8		 |$LN173@CMK_IOCont|
  036a8	00000000	 DCD         |cmem_mutex|
  036ac		 |$LN174@CMK_IOCont|
  036ac	00000000	 DCD         |??_C@_1IC@BMAEIIKN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  036b0		 |$LN175@CMK_IOCont|
  036b0	00000000	 DCD         |??_C@_1GM@ONIPBDBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr@|
  036b4		 |$LN176@CMK_IOCont|
  036b4	00000000	 DCD         |??_C@_1FC@IJJFEPMD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@|
  036b8		 |$LN177@CMK_IOCont|
  036b8	00000000	 DCD         |??_C@_1FE@GPGJMNM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAp@|
  036bc		 |$LN178@CMK_IOCont|
  036bc	00000000	 DCD         |??_C@_1FG@ICHJJAGN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAU?$AAN?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@|
  036c0		 |$LN179@CMK_IOCont|
  036c0	00000000	 DCD         |??_C@_1FC@KGMCGFLP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi@|
  036c4		 |$LN180@CMK_IOCont|
  036c4	00000000	 DCD         |??_C@_1HM@PINJBPBF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@|
  036c8		 |$LN181@CMK_IOCont|
  036c8	00000000	 DCD         |??_C@_1EO@KLDPFPB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAp?$AA?5?$AA?$DN@|
  036cc		 |$LN182@CMK_IOCont|
  036cc	00000000	 DCD         |??_C@_1FC@DBILBIOD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAM?$AAA?$AAP?$AAA?$AAD?$AAD?$AAR?$AAE?$AAS?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@|
  036d0		 |$LN183@CMK_IOCont|
  036d0	00000000	 DCD         |??_C@_1JK@LJHCIMLD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@|
  036d4		 |$LN184@CMK_IOCont|
  036d4	00000000	 DCD         |block_start|
  036d8		 |$LN185@CMK_IOCont|
  036d8	00000000	 DCD         |block_end|
  036dc		 |$LN186@CMK_IOCont|
  036dc	00000000	 DCD         |numBlocks|
  036e0		 |$LN187@CMK_IOCont|
  036e0	00000000	 DCD         |??_C@_1HE@GOLBGKGH@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAN?$AAU?$AAM?$AAB?$AAL?$AAO?$AAC?$AAK?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5@|
  036e4		 |$LN188@CMK_IOCont|
  036e4	00000000	 DCD         |version|
  036e8		 |$LN189@CMK_IOCont|
  036e8	00000000	 DCD         |??_C@_1HA@ONBDBAJI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe@|
  036ec		 |$LN190@CMK_IOCont|
  036ec	00000000	 DCD         |??_C@_1HE@HCOGAHNB@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAf?$AAl?$AAu?$AAs?$AAh?$AAe?$AAd@|
  036f0		 |$LN191@CMK_IOCont|
  036f0	00000000	 DCD         |??_C@_1HI@HIEOILNF@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAI?$AAN?$AAV?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt@|
  036f4		 |$LN192@CMK_IOCont|
  036f4	00000000	 DCD         |??_C@_1GO@NDPACKBE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AAW?$AAB?$AA?3?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs@|
  036f8		 |$LN193@CMK_IOCont|
  036f8	00000000	 DCD         |??_C@_1FA@OCOOAJKP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAA?$AAC?$AAH?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc@|
  036fc		 |$LN194@CMK_IOCont|
  036fc	00000000	 DCD         |??_C@_00CNPNBAHC@?$AA@|
  03700		 |$LN195@CMK_IOCont|
  03700	00000000	 DCD         |??_C@_02KLACDDFP@WB?$AA@|
  03704		 |$LN196@CMK_IOCont|
  03704	00000000	 DCD         |??_C@_03KOECGNEM@INV?$AA@|
  03708		 |$LN197@CMK_IOCont|
  03708	00000000	 DCD         |??_C@_1EI@BJJPPGGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@|
  0370c		 |$LN198@CMK_IOCont|
  0370c	00000000	 DCD         |??_C@_1GE@ODKFOIGO@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAp?$AAo@|
  03710		 |$LN199@CMK_IOCont|
  03710	00000000	 DCD         |??_C@_1NM@MJDFBKNP@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AAb?$AAa@|
  03714		 |$LN200@CMK_IOCont|
  03714	00000000	 DCD         |gdwPageSize|
  03718		 |$LN201@CMK_IOCont|
  03718	00000000	 DCD         |useHeapIfPoolUnavailable|
  0371c		 |$LN202@CMK_IOCont|
  0371c	00000000	 DCD         |heap_pool|
  03720		 |$LN203@CMK_IOCont|
  03720	00000000	 DCD         |??_C@_1GC@EGDDBBFG@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAa?$AA?5?$AAb?$AAe@|
  03724		 |$LN204@CMK_IOCont|
  03724	00000000	 DCD         |??_C@_1GG@BEIADIOI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@|
  03728		 |$LN205@CMK_IOCont|
  03728	00000000	 DCD         |??_C@_1GC@LPLINNOE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@|
  0372c		 |$LN206@CMK_IOCont|
  0372c	00000000	 DCD         |p_objs|
  03730		 |$LN207@CMK_IOCont|
  03730	00000000	 DCD         |npools|
  03734		 |$LN208@CMK_IOCont|
  03734	00000000	 DCD         |??_C@_1HI@IIFIHIPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?3?$AA?5?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5@|
  03738		 |$LN209@CMK_IOCont|
  03738	00000000	 DCD         |??_C@_1GO@HIHOKAPN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc@|
  0373c		 |$LN210@CMK_IOCont|
  0373c	00000000	 DCD         |??_C@_1EM@CHGMNOLN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAO?$AAL?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@|
  03740		 |$LN211@CMK_IOCont|
  03740	00000000	 DCD         |??_C@_1EG@KFEHIKGM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@|
  03744		 |$LN212@CMK_IOCont|
  03744	00000000	 DCD         |??_C@_1GC@JHLICFOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo@|
  03748		 |$LN213@CMK_IOCont|
  03748	00000000	 DCD         |??_C@_1EK@MKLGDKGI@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@|
  0374c		 |$LN214@CMK_IOCont|
  0374c	00000000	 DCD         |??_C@_1EM@NEHOKHNA@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5@|
  03750		 |$LN215@CMK_IOCont|
  03750	00000000	 DCD         |??_C@_1IG@EKDDKMDK@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5@|
  03754		 |$LN216@CMK_IOCont|
  03754	00000000	 DCD         |??_C@_1IA@PMKIHOPJ@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAC?$AAM?$AAK?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAs?$AAe?$AA?5@|
  03758		 |$LN217@CMK_IOCont|
  03758	00000000	 DCD         |??_C@_1EM@EDDHNKIM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAH?$AAY?$AAS?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi@|
  0375c		 |$LN218@CMK_IOCont|
  0375c	00000000	 DCD         |??_C@_1GK@IGEFKKAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg@|
  03760		 |$LN219@CMK_IOCont|
  03760	00000000	 DCD         |??_C@_04DGHHAJMG@HEAP?$AA@|
  03764		 |$LN220@CMK_IOCont|
  03764	00000000	 DCD         |??_C@_04KNJFKMFD@PHYS?$AA@|
  03768		 |$LN221@CMK_IOCont|
  03768	00000000	 DCD         |??_C@_1FI@PDOJBEOL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo@|
  0376c		 |$LN222@CMK_IOCont|
  0376c	00000000	 DCD         |??_C@_1IE@KFMGGDNN@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu@|
  03770		 |$LN223@CMK_IOCont|
  03770	00000000	 DCD         |??_C@_1JC@KNEBIOIE@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@|
  03774		 |$LN224@CMK_IOCont|
  03774	00000000	 DCD         |??_C@_1EO@LLFGGNAM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAF?$AAR?$AAE?$AAE?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAe@|
  03778		 |$LN225@CMK_IOCont|
  03778	00000000	 DCD         |??_C@_1IC@NCAFIKLL@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?3?$AA?5?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CF?$AAs?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5@|
  0377c		 |$LN226@CMK_IOCont|
  0377c	00000000	 DCD         |??_C@_06HAMDABMN@CACHED?$AA@|
  03780		 |$M41415|

			 ENDP  ; |CMK_IOControl|

	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T41495| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M41492|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M41493|

			 ENDP  ; |GetCurrentProcessId|


  00070			 AREA	 |.pdata|, PDATA
|$T41505| DCD	|$LN21@find_busy_|
	DCD	0x40007504
; Function compile flags: /Odtp
; File i:\library\trees\winceutils\winceutils-b01x\src\ti\sdo\winceutils\cmem\drivers\cmemk.c

  03780			 AREA	 |.text|, CODE, ARM

  03780		 |find_busy_entry| PROC

; 638  : {

  03780		 |$LN21@find_busy_|
  03780	e1a0c00d	 mov         r12, sp
  03784	e92d000f	 stmdb       sp!, {r0 - r3}
  03788	e92d5000	 stmdb       sp!, {r12, lr}
  0378c	e24dd028	 sub         sp, sp, #0x28
  03790		 |$M41502|

; 639  :     LIST_ENTRY *busylistp;
; 640  :     LIST_ENTRY *e;
; 641  :     struct pool_buffer *entry;
; 642  :     unsigned long physAddr;
; 643  :     int num_pools;
; 644  :     int i;
; 645  :     int bi;
; 646  : 
; 647  : 
; 648  :     /* Convert virtual address to physical address */
; 649  :     physAddr = (bSearchByVA) ? get_phys(addr) : addr;

  03790	e59d3040	 ldr         r3, [sp, #0x40]
  03794	e3530000	 cmp         r3, #0
  03798	0a000005	 beq         |$LN17@find_busy_|
  0379c	e59d0030	 ldr         r0, [sp, #0x30]
  037a0	eb000000	 bl          get_phys
  037a4	e58d0020	 str         r0, [sp, #0x20]
  037a8	e59d3020	 ldr         r3, [sp, #0x20]
  037ac	e58d3024	 str         r3, [sp, #0x24]
  037b0	ea000001	 b           |$LN18@find_busy_|
  037b4		 |$LN17@find_busy_|
  037b4	e59d3030	 ldr         r3, [sp, #0x30]
  037b8	e58d3024	 str         r3, [sp, #0x24]
  037bc		 |$LN18@find_busy_|
  037bc	e59d3024	 ldr         r3, [sp, #0x24]
  037c0	e58d3008	 str         r3, [sp, #8]

; 650  : 
; 651  :     for (bi = 0; bi < NBLOCKS; bi++) {

  037c4	e3a03000	 mov         r3, #0
  037c8	e58d3010	 str         r3, [sp, #0x10]
  037cc	ea000002	 b           |$LN14@find_busy_|
  037d0		 |$LN13@find_busy_|
  037d0	e59d3010	 ldr         r3, [sp, #0x10]
  037d4	e2833001	 add         r3, r3, #1
  037d8	e58d3010	 str         r3, [sp, #0x10]
  037dc		 |$LN14@find_busy_|
  037dc	e59d3010	 ldr         r3, [sp, #0x10]
  037e0	e3530002	 cmp         r3, #2
  037e4	aa000051	 bge         |$LN12@find_busy_|

; 652  :         num_pools = npools[bi];

  037e8	e59d1010	 ldr         r1, [sp, #0x10]
  037ec	e3a03004	 mov         r3, #4
  037f0	e0020391	 mul         r2, r1, r3
  037f4	e59f3154	 ldr         r3, [pc, #0x154]
  037f8	e0833002	 add         r3, r3, r2
  037fc	e5933000	 ldr         r3, [r3]
  03800	e58d300c	 str         r3, [sp, #0xC]

; 653  :         if (heap_pool[bi] != -1) {

  03804	e59d1010	 ldr         r1, [sp, #0x10]
  03808	e3a03004	 mov         r3, #4
  0380c	e0020391	 mul         r2, r1, r3
  03810	e59f3134	 ldr         r3, [pc, #0x134]
  03814	e0833002	 add         r3, r3, r2
  03818	e5933000	 ldr         r3, [r3]
  0381c	e3730001	 cmn         r3, #1
  03820	0a000002	 beq         |$LN11@find_busy_|

; 654  :             num_pools++;

  03824	e59d300c	 ldr         r3, [sp, #0xC]
  03828	e2833001	 add         r3, r3, #1
  0382c	e58d300c	 str         r3, [sp, #0xC]
  03830		 |$LN11@find_busy_|

; 655  :         }
; 656  : 
; 657  :         for (i = 0; i < num_pools; i++) {

  03830	e3a03000	 mov         r3, #0
  03834	e58d3004	 str         r3, [sp, #4]
  03838	ea000002	 b           |$LN10@find_busy_|
  0383c		 |$LN9@find_busy_|
  0383c	e59d3004	 ldr         r3, [sp, #4]
  03840	e2833001	 add         r3, r3, #1
  03844	e58d3004	 str         r3, [sp, #4]
  03848		 |$LN10@find_busy_|
  03848	e59d2004	 ldr         r2, [sp, #4]
  0384c	e59d300c	 ldr         r3, [sp, #0xC]
  03850	e1520003	 cmp         r2, r3
  03854	aa000034	 bge         |$LN8@find_busy_|

; 658  :             busylistp = &p_objs[bi][i].busylist;

  03858	e59d1010	 ldr         r1, [sp, #0x10]
  0385c	e3a03c0e	 mov         r3, #0xE, 24
  03860	e0020391	 mul         r2, r1, r3
  03864	e59f30dc	 ldr         r3, [pc, #0xDC]
  03868	e0831002	 add         r1, r3, r2
  0386c	e59d2004	 ldr         r2, [sp, #4]
  03870	e3a0301c	 mov         r3, #0x1C
  03874	e0030392	 mul         r3, r2, r3
  03878	e0813003	 add         r3, r1, r3
  0387c	e2833008	 add         r3, r3, #8
  03880	e58d3000	 str         r3, [sp]

; 659  : 
; 660  :             for (e = busylistp->Flink; e != busylistp; e = e->Flink) {

  03884	e59d3000	 ldr         r3, [sp]
  03888	e5933000	 ldr         r3, [r3]
  0388c	e58d3018	 str         r3, [sp, #0x18]
  03890	ea000002	 b           |$LN7@find_busy_|
  03894		 |$LN6@find_busy_|
  03894	e59d3018	 ldr         r3, [sp, #0x18]
  03898	e5933000	 ldr         r3, [r3]
  0389c	e58d3018	 str         r3, [sp, #0x18]
  038a0		 |$LN7@find_busy_|
  038a0	e59d2018	 ldr         r2, [sp, #0x18]
  038a4	e59d3000	 ldr         r3, [sp]
  038a8	e1520003	 cmp         r2, r3
  038ac	0a00001d	 beq         |$LN5@find_busy_|

; 661  :                 entry = CONTAINING_RECORD(e, struct pool_buffer, element);

  038b0	e59d3018	 ldr         r3, [sp, #0x18]
  038b4	e58d3014	 str         r3, [sp, #0x14]

; 662  : 
; 663  :                 if (entry->physp == physAddr) {

  038b8	e59d3014	 ldr         r3, [sp, #0x14]
  038bc	e283300c	 add         r3, r3, #0xC
  038c0	e5932000	 ldr         r2, [r3]
  038c4	e59d3008	 ldr         r3, [sp, #8]
  038c8	e1520003	 cmp         r2, r3
  038cc	1a000014	 bne         |$LN4@find_busy_|

; 664  :                     if (poolp) {

  038d0	e59d3034	 ldr         r3, [sp, #0x34]
  038d4	e3530000	 cmp         r3, #0
  038d8	0a000002	 beq         |$LN3@find_busy_|

; 665  :                         *poolp = i;

  038dc	e59d2004	 ldr         r2, [sp, #4]
  038e0	e59d3034	 ldr         r3, [sp, #0x34]
  038e4	e5832000	 str         r2, [r3]
  038e8		 |$LN3@find_busy_|

; 666  :                     }
; 667  :                     if (ep) {

  038e8	e59d3038	 ldr         r3, [sp, #0x38]
  038ec	e3530000	 cmp         r3, #0
  038f0	0a000002	 beq         |$LN2@find_busy_|

; 668  :                         *ep = e;

  038f4	e59d2018	 ldr         r2, [sp, #0x18]
  038f8	e59d3038	 ldr         r3, [sp, #0x38]
  038fc	e5832000	 str         r2, [r3]
  03900		 |$LN2@find_busy_|

; 669  :                     }
; 670  :                     if (bip) {

  03900	e59d303c	 ldr         r3, [sp, #0x3C]
  03904	e3530000	 cmp         r3, #0
  03908	0a000002	 beq         |$LN1@find_busy_|

; 671  :                         *bip = bi;

  0390c	e59d2010	 ldr         r2, [sp, #0x10]
  03910	e59d303c	 ldr         r3, [sp, #0x3C]
  03914	e5832000	 str         r2, [r3]
  03918		 |$LN1@find_busy_|

; 672  :                     }
; 673  : 
; 674  :                     return (entry);

  03918	e59d3014	 ldr         r3, [sp, #0x14]
  0391c	e58d301c	 str         r3, [sp, #0x1C]
  03920	ea000004	 b           |$LN15@find_busy_|
  03924		 |$LN4@find_busy_|

; 675  :                 }
; 676  :             }

  03924	eaffffda	 b           |$LN6@find_busy_|
  03928		 |$LN5@find_busy_|

; 677  :         }

  03928	eaffffc3	 b           |$LN9@find_busy_|
  0392c		 |$LN8@find_busy_|

; 678  :     }

  0392c	eaffffa7	 b           |$LN13@find_busy_|
  03930		 |$LN12@find_busy_|

; 679  : 
; 680  :     return (NULL);

  03930	e3a03000	 mov         r3, #0
  03934	e58d301c	 str         r3, [sp, #0x1C]
  03938		 |$LN15@find_busy_|

; 681  : }

  03938	e59d001c	 ldr         r0, [sp, #0x1C]
  0393c	e28dd028	 add         sp, sp, #0x28
  03940	e89d6000	 ldmia       sp, {sp, lr}
  03944	e12fff1e	 bx          lr
  03948		 |$LN22@find_busy_|
  03948		 |$LN23@find_busy_|
  03948	00000000	 DCD         |p_objs|
  0394c		 |$LN24@find_busy_|
  0394c	00000000	 DCD         |heap_pool|
  03950		 |$LN25@find_busy_|
  03950	00000000	 DCD         |npools|
  03954		 |$M41503|

			 ENDP  ; |find_busy_entry|

	EXPORT	|CMK_PowerDown|

  00078			 AREA	 |.pdata|, PDATA
|$T41514| DCD	|$LN5@CMK_PowerD|
	DCD	0x40000503
; Function compile flags: /Odtp

  03954			 AREA	 |.text|, CODE, ARM

  03954		 |CMK_PowerDown| PROC

; 1855 : {

  03954		 |$LN5@CMK_PowerD|
  03954	e1a0c00d	 mov         r12, sp
  03958	e92d0001	 stmdb       sp!, {r0}
  0395c	e92d5000	 stmdb       sp!, {r12, lr}
  03960		 |$M41511|

; 1856 : }

  03960	e89d6000	 ldmia       sp, {sp, lr}
  03964	e12fff1e	 bx          lr
  03968		 |$M41512|

			 ENDP  ; |CMK_PowerDown|

	EXPORT	|CMK_PowerUp|

  00080			 AREA	 |.pdata|, PDATA
|$T41519| DCD	|$LN5@CMK_PowerU|
	DCD	0x40000503
; Function compile flags: /Odtp

  03968			 AREA	 |.text|, CODE, ARM

  03968		 |CMK_PowerUp| PROC

; 1861 : {

  03968		 |$LN5@CMK_PowerU|
  03968	e1a0c00d	 mov         r12, sp
  0396c	e92d0001	 stmdb       sp!, {r0}
  03970	e92d5000	 stmdb       sp!, {r12, lr}
  03974		 |$M41516|

; 1862 : }

  03974	e89d6000	 ldmia       sp, {sp, lr}
  03978	e12fff1e	 bx          lr
  0397c		 |$M41517|

			 ENDP  ; |CMK_PowerUp|

	EXPORT	|??_C@_1FO@JPKAAJLM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@HEJCJEEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@FPLHNBAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@MAGACGEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T41528| DCD	|$LN12@mapAddress|
	DCD	0x40009904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@JPKAAJLM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u", 0x0, "a"
	DCB	0x0, "l", 0x0, "C", 0x0, "o", 0x0, "p", 0x0, "y", 0x0, "E"
	DCB	0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@HEJCJEEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I"
	DCB	0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@FPLHNBAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u", 0x0, "a"
	DCB	0x0, "l", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "E", 0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "#", 0x0, "l", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@MAGACGEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e"
	DCB	0x0, "d", 0x0, "_", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0397c			 AREA	 |.text|, CODE, ARM

  0397c		 |mapAddress| PROC

; 1869 : {

  0397c		 |$LN12@mapAddress|
  0397c	e1a0c00d	 mov         r12, sp
  03980	e92d0007	 stmdb       sp!, {r0 - r2}
  03984	e92d5000	 stmdb       sp!, {r12, lr}
  03988	e24dd04c	 sub         sp, sp, #0x4C
  0398c		 |$M41525|

; 1870 :     PHYSICAL_ADDRESS    pa;
; 1871 :     PVOID               pv;
; 1872 :     PVOID               pUsrVA;
; 1873 :     Mapped_buffer      *entry;
; 1874 :     BOOL                retVal;
; 1875 : 
; 1876 : 
; 1877 :     entry = (Mapped_buffer *)malloc(sizeof(Mapped_buffer));

  0398c	e3a00024	 mov         r0, #0x24
  03990	eb000000	 bl          malloc
  03994	e58d0038	 str         r0, [sp, #0x38]
  03998	e59d3038	 ldr         r3, [sp, #0x38]
  0399c	e58d301c	 str         r3, [sp, #0x1C]

; 1878 :     if (entry == NULL) {

  039a0	e59d301c	 ldr         r3, [sp, #0x1C]
  039a4	e3530000	 cmp         r3, #0
  039a8	1a000004	 bne         |$LN7@mapAddress|

; 1879 :         __E("mapAddress: Failed to allocate Mapped_buffer list entry\n");

  039ac	e59f0228	 ldr         r0, [pc, #0x228]
  039b0	eb000000	 bl          NKDbgPrintfW

; 1880 :         return (0);

  039b4	e3a03000	 mov         r3, #0
  039b8	e58d3028	 str         r3, [sp, #0x28]
  039bc	ea00007e	 b           |$LN8@mapAddress|
  039c0		 |$LN7@mapAddress|

; 1881 :     }
; 1882 : 
; 1883 :     /* Reserve a block of virtual memory for the calling process. */
; 1884 :     pUsrVA = VirtualAllocEx((HANDLE)dwProcId, NULL, size, MEM_RESERVE,
; 1885 :             PAGE_READWRITE | PAGE_NOCACHE);

  039c0	e3a03f81	 mov         r3, #0x81, 30
  039c4	e58d3000	 str         r3, [sp]
  039c8	e3a03a02	 mov         r3, #2, 20
  039cc	e59d2058	 ldr         r2, [sp, #0x58]
  039d0	e3a01000	 mov         r1, #0
  039d4	e59d005c	 ldr         r0, [sp, #0x5C]
  039d8	eb000000	 bl          VirtualAllocEx
  039dc	e58d003c	 str         r0, [sp, #0x3C]
  039e0	e59d303c	 ldr         r3, [sp, #0x3C]
  039e4	e58d3018	 str         r3, [sp, #0x18]

; 1886 : 
; 1887 :     if (pUsrVA == NULL) {

  039e8	e59d3018	 ldr         r3, [sp, #0x18]
  039ec	e3530000	 cmp         r3, #0
  039f0	1a000005	 bne         |$LN6@mapAddress|

; 1888 :         __E("mapAddress: VirtualAllocEx failed for size %#lx\n", size);

  039f4	e59d1058	 ldr         r1, [sp, #0x58]
  039f8	e59f01d8	 ldr         r0, [pc, #0x1D8]
  039fc	eb000000	 bl          NKDbgPrintfW

; 1889 :         return (0);

  03a00	e3a03000	 mov         r3, #0
  03a04	e58d3028	 str         r3, [sp, #0x28]
  03a08	ea00006b	 b           |$LN8@mapAddress|
  03a0c		 |$LN6@mapAddress|

; 1890 :     }
; 1891 : 
; 1892 :     /* Map physAddr to kernal virtual address, non-cached */
; 1893 :     pa.QuadPart = physAddr;

  03a0c	e59d3054	 ldr         r3, [sp, #0x54]
  03a10	e58d3010	 str         r3, [sp, #0x10]
  03a14	e3a03000	 mov         r3, #0
  03a18	e58d3014	 str         r3, [sp, #0x14]

; 1894 :     pv = MmMapIoSpace(pa, size, FALSE);

  03a1c	e3a03000	 mov         r3, #0
  03a20	e59d2058	 ldr         r2, [sp, #0x58]
  03a24	e59d0010	 ldr         r0, [sp, #0x10]
  03a28	e59d1014	 ldr         r1, [sp, #0x14]
  03a2c	eb000000	 bl          MmMapIoSpace
  03a30	e58d0040	 str         r0, [sp, #0x40]
  03a34	e59d3040	 ldr         r3, [sp, #0x40]
  03a38	e58d300c	 str         r3, [sp, #0xC]

; 1895 : 
; 1896 :     if (pv == NULL) {

  03a3c	e59d300c	 ldr         r3, [sp, #0xC]
  03a40	e3530000	 cmp         r3, #0
  03a44	1a00000a	 bne         |$LN5@mapAddress|

; 1897 :         __E("mapAddress: MmMapIoSpace failed for address %#lx\n", physAddr);

  03a48	e59d1054	 ldr         r1, [sp, #0x54]
  03a4c	e59f0180	 ldr         r0, [pc, #0x180]
  03a50	eb000000	 bl          NKDbgPrintfW

; 1898 :         VirtualFreeEx((HANDLE)dwProcId, pUsrVA, 0, MEM_RELEASE);

  03a54	e3a03902	 mov         r3, #2, 18
  03a58	e3a02000	 mov         r2, #0
  03a5c	e59d1018	 ldr         r1, [sp, #0x18]
  03a60	e59d005c	 ldr         r0, [sp, #0x5C]
  03a64	eb000000	 bl          VirtualFreeEx

; 1899 :         return (0);

  03a68	e3a03000	 mov         r3, #0
  03a6c	e58d3028	 str         r3, [sp, #0x28]
  03a70	ea000051	 b           |$LN8@mapAddress|
  03a74		 |$LN5@mapAddress|

; 1900 :     }
; 1901 : 
; 1902 :     /* Map the kernel virtual address to caller's virtual address */
; 1903 :     retVal = VirtualCopyEx((HANDLE)dwProcId, pUsrVA,
; 1904 :             (HANDLE)GetCurrentProcessId(), pv, size,
; 1905 :             PAGE_READWRITE | PAGE_NOCACHE);

  03a74	eb000000	 bl          GetCurrentProcessId
  03a78	e58d0044	 str         r0, [sp, #0x44]
  03a7c	e3a03f81	 mov         r3, #0x81, 30
  03a80	e58d3004	 str         r3, [sp, #4]
  03a84	e59d3058	 ldr         r3, [sp, #0x58]
  03a88	e58d3000	 str         r3, [sp]
  03a8c	e59d300c	 ldr         r3, [sp, #0xC]
  03a90	e59d2044	 ldr         r2, [sp, #0x44]
  03a94	e59d1018	 ldr         r1, [sp, #0x18]
  03a98	e59d005c	 ldr         r0, [sp, #0x5C]
  03a9c	eb000000	 bl          VirtualCopyEx
  03aa0	e58d0048	 str         r0, [sp, #0x48]
  03aa4	e59d3048	 ldr         r3, [sp, #0x48]
  03aa8	e58d3008	 str         r3, [sp, #8]

; 1906 : 
; 1907 :     if (retVal == FALSE) {

  03aac	e59d3008	 ldr         r3, [sp, #8]
  03ab0	e3530000	 cmp         r3, #0
  03ab4	1a00000e	 bne         |$LN4@mapAddress|

; 1908 :         __E("mapAddress: VirtualCopyEx failed\n");

  03ab8	e59f0110	 ldr         r0, [pc, #0x110]
  03abc	eb000000	 bl          NKDbgPrintfW

; 1909 :         free(entry);

  03ac0	e59d001c	 ldr         r0, [sp, #0x1C]
  03ac4	eb000000	 bl          free

; 1910 :         MmUnmapIoSpace(pv, size);        

  03ac8	e59d1058	 ldr         r1, [sp, #0x58]
  03acc	e59d000c	 ldr         r0, [sp, #0xC]
  03ad0	eb000000	 bl          MmUnmapIoSpace

; 1911 :         VirtualFreeEx((HANDLE)dwProcId, pUsrVA, 0, MEM_RELEASE);

  03ad4	e3a03902	 mov         r3, #2, 18
  03ad8	e3a02000	 mov         r2, #0
  03adc	e59d1018	 ldr         r1, [sp, #0x18]
  03ae0	e59d005c	 ldr         r0, [sp, #0x5C]
  03ae4	eb000000	 bl          VirtualFreeEx

; 1912 :         return (0);

  03ae8	e3a03000	 mov         r3, #0
  03aec	e58d3028	 str         r3, [sp, #0x28]
  03af0	ea000031	 b           |$LN8@mapAddress|
  03af4		 |$LN4@mapAddress|

; 1913 :     }
; 1914 : 
; 1915 :     /* Add mapped buffer info to list */
; 1916 :     entry->id = 0;

  03af4	e59d301c	 ldr         r3, [sp, #0x1C]
  03af8	e2832008	 add         r2, r3, #8
  03afc	e3a03000	 mov         r3, #0
  03b00	e5823000	 str         r3, [r2]

; 1917 :     entry->physp = physAddr;

  03b04	e59d301c	 ldr         r3, [sp, #0x1C]
  03b08	e283200c	 add         r2, r3, #0xC
  03b0c	e59d3054	 ldr         r3, [sp, #0x54]
  03b10	e5823000	 str         r3, [r2]

; 1918 :     entry->flags = 0;       /* ?? */

  03b14	e59d301c	 ldr         r3, [sp, #0x1C]
  03b18	e2832010	 add         r2, r3, #0x10
  03b1c	e3a03000	 mov         r3, #0
  03b20	e5823000	 str         r3, [r2]

; 1919 :     entry->kvirtp = (PVOID)pv;

  03b24	e59d301c	 ldr         r3, [sp, #0x1C]
  03b28	e2832014	 add         r2, r3, #0x14
  03b2c	e59d300c	 ldr         r3, [sp, #0xC]
  03b30	e5823000	 str         r3, [r2]

; 1920 :     entry->size = size;

  03b34	e59d301c	 ldr         r3, [sp, #0x1C]
  03b38	e2832018	 add         r2, r3, #0x18
  03b3c	e59d3058	 ldr         r3, [sp, #0x58]
  03b40	e5823000	 str         r3, [r2]

; 1921 :     entry->pUsrVA = pUsrVA;

  03b44	e59d301c	 ldr         r3, [sp, #0x1C]
  03b48	e283201c	 add         r2, r3, #0x1C
  03b4c	e59d3018	 ldr         r3, [sp, #0x18]
  03b50	e5823000	 str         r3, [r2]

; 1922 :     entry->dwUsrProcId = dwProcId;

  03b54	e59d301c	 ldr         r3, [sp, #0x1C]
  03b58	e2832020	 add         r2, r3, #0x20
  03b5c	e59d305c	 ldr         r3, [sp, #0x5C]
  03b60	e5823000	 str         r3, [r2]

; 1923 : 
; 1924 :     InsertTailList(&mappedBufferList, &entry->element);

  03b64	e59f3060	 ldr         r3, [pc, #0x60]
  03b68	e58d3024	 str         r3, [sp, #0x24]
  03b6c	e59d3024	 ldr         r3, [sp, #0x24]
  03b70	e2833004	 add         r3, r3, #4
  03b74	e5933000	 ldr         r3, [r3]
  03b78	e58d3020	 str         r3, [sp, #0x20]
  03b7c	e59d2024	 ldr         r2, [sp, #0x24]
  03b80	e59d301c	 ldr         r3, [sp, #0x1C]
  03b84	e5832000	 str         r2, [r3]
  03b88	e59d301c	 ldr         r3, [sp, #0x1C]
  03b8c	e2832004	 add         r2, r3, #4
  03b90	e59d3020	 ldr         r3, [sp, #0x20]
  03b94	e5823000	 str         r3, [r2]
  03b98	e59d201c	 ldr         r2, [sp, #0x1C]
  03b9c	e59d3020	 ldr         r3, [sp, #0x20]
  03ba0	e5832000	 str         r2, [r3]
  03ba4	e59d3024	 ldr         r3, [sp, #0x24]
  03ba8	e2832004	 add         r2, r3, #4
  03bac	e59d301c	 ldr         r3, [sp, #0x1C]
  03bb0	e5823000	 str         r3, [r2]

; 1925 : 
; 1926 :     return ((unsigned long)pUsrVA);

  03bb4	e59d3018	 ldr         r3, [sp, #0x18]
  03bb8	e58d3028	 str         r3, [sp, #0x28]
  03bbc		 |$LN8@mapAddress|

; 1927 : }

  03bbc	e59d0028	 ldr         r0, [sp, #0x28]
  03bc0	e28dd04c	 add         sp, sp, #0x4C
  03bc4	e89d6000	 ldmia       sp, {sp, lr}
  03bc8	e12fff1e	 bx          lr
  03bcc		 |$LN13@mapAddress|
  03bcc		 |$LN14@mapAddress|
  03bcc	00000000	 DCD         |mappedBufferList|
  03bd0		 |$LN15@mapAddress|
  03bd0	00000000	 DCD         |??_C@_1FO@JPKAAJLM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@|
  03bd4		 |$LN16@mapAddress|
  03bd4	00000000	 DCD         |??_C@_1HO@HEJCJEEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo@|
  03bd8		 |$LN17@mapAddress|
  03bd8	00000000	 DCD         |??_C@_1HM@FPLHNBAD@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl@|
  03bdc		 |$LN18@mapAddress|
  03bdc	00000000	 DCD         |??_C@_1IM@MAGACGEM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@|
  03be0		 |$M41526|

			 ENDP  ; |mapAddress|

	EXPORT	|??_C@_1GC@BHAKEIBM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HLGKHAFC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T41540| DCD	|$LN14@unmapAddre|
	DCD	0x40005704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BHAKEIBM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t"
	DCB	0x0, "u", 0x0, "a", 0x0, "l", 0x0, "F", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "E", 0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HLGKHAFC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "C"
	DCB	0x0, "M", 0x0, "E", 0x0, "M", 0x0, "K", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03be0			 AREA	 |.text|, CODE, ARM

  03be0		 |unmapAddress| PROC

; 1933 : {

  03be0		 |$LN14@unmapAddre|
  03be0	e1a0c00d	 mov         r12, sp
  03be4	e92d0007	 stmdb       sp!, {r0 - r2}
  03be8	e92d5000	 stmdb       sp!, {r12, lr}
  03bec	e24dd018	 sub         sp, sp, #0x18
  03bf0		 |$M41537|

; 1934 :     Mapped_buffer      *entry;
; 1935 :     LIST_ENTRY         *listp;
; 1936 :     LIST_ENTRY         *e;
; 1937 : 
; 1938 : 
; 1939 :     listp = &mappedBufferList;

  03bf0	e59f3140	 ldr         r3, [pc, #0x140]
  03bf4	e58d3000	 str         r3, [sp]

; 1940 : 
; 1941 :     for (e = listp->Flink; e != listp; e = e->Flink) {

  03bf8	e59d3000	 ldr         r3, [sp]
  03bfc	e5933000	 ldr         r3, [r3]
  03c00	e58d3008	 str         r3, [sp, #8]
  03c04	ea000002	 b           |$LN9@unmapAddre|
  03c08		 |$LN8@unmapAddre|
  03c08	e59d3008	 ldr         r3, [sp, #8]
  03c0c	e5933000	 ldr         r3, [r3]
  03c10	e58d3008	 str         r3, [sp, #8]
  03c14		 |$LN9@unmapAddre|
  03c14	e59d2008	 ldr         r2, [sp, #8]
  03c18	e59d3000	 ldr         r3, [sp]
  03c1c	e1520003	 cmp         r2, r3
  03c20	0a00000f	 beq         |$LN7@unmapAddre|

; 1942 :         entry = CONTAINING_RECORD(e, struct Mapped_buffer, element);

  03c24	e59d3008	 ldr         r3, [sp, #8]
  03c28	e58d3004	 str         r3, [sp, #4]

; 1943 : 
; 1944 :         if ((entry->pUsrVA == pUsrVA) && (entry->dwUsrProcId == dwProcId)) {

  03c2c	e59d3004	 ldr         r3, [sp, #4]
  03c30	e283301c	 add         r3, r3, #0x1C
  03c34	e5932000	 ldr         r2, [r3]
  03c38	e59d3020	 ldr         r3, [sp, #0x20]
  03c3c	e1520003	 cmp         r2, r3
  03c40	1a000006	 bne         |$LN6@unmapAddre|
  03c44	e59d3004	 ldr         r3, [sp, #4]
  03c48	e2833020	 add         r3, r3, #0x20
  03c4c	e5932000	 ldr         r2, [r3]
  03c50	e59d3028	 ldr         r3, [sp, #0x28]
  03c54	e1520003	 cmp         r2, r3
  03c58	1a000000	 bne         |$LN6@unmapAddre|

; 1945 :             break;

  03c5c	ea000000	 b           |$LN7@unmapAddre|
  03c60		 |$LN6@unmapAddre|

; 1946 :         }
; 1947 :     }

  03c60	eaffffe8	 b           |$LN8@unmapAddre|
  03c64		 |$LN7@unmapAddre|

; 1948 : 
; 1949 :     if (e == listp) {

  03c64	e59d2008	 ldr         r2, [sp, #8]
  03c68	e59d3000	 ldr         r3, [sp]
  03c6c	e1520003	 cmp         r2, r3
  03c70	1a000004	 bne         |$LN5@unmapAddre|

; 1950 :         __E("unmapAddress: Failed to find mapped buffer!\n");

  03c74	e59f00b8	 ldr         r0, [pc, #0xB8]
  03c78	eb000000	 bl          NKDbgPrintfW

; 1951 :         return (-1);

  03c7c	e3e03000	 mvn         r3, #0
  03c80	e58d3010	 str         r3, [sp, #0x10]
  03c84	ea000025	 b           |$LN10@unmapAddre|
  03c88		 |$LN5@unmapAddre|

; 1952 :     }
; 1953 : 
; 1954 :     MmUnmapIoSpace((PVOID)entry->kvirtp, size);

  03c88	e59d1024	 ldr         r1, [sp, #0x24]
  03c8c	e59d3004	 ldr         r3, [sp, #4]
  03c90	e2833014	 add         r3, r3, #0x14
  03c94	e5930000	 ldr         r0, [r3]
  03c98	eb000000	 bl          MmUnmapIoSpace

; 1955 : 
; 1956 :     if (!VirtualFreeEx((HANDLE)dwProcId, (LPVOID)pUsrVA, 0, MEM_RELEASE)) {

  03c9c	e3a03902	 mov         r3, #2, 18
  03ca0	e3a02000	 mov         r2, #0
  03ca4	e59d1020	 ldr         r1, [sp, #0x20]
  03ca8	e59d0028	 ldr         r0, [sp, #0x28]
  03cac	eb000000	 bl          VirtualFreeEx
  03cb0	e58d0014	 str         r0, [sp, #0x14]
  03cb4	e59d3014	 ldr         r3, [sp, #0x14]
  03cb8	e3530000	 cmp         r3, #0
  03cbc	1a000004	 bne         |$LN4@unmapAddre|

; 1957 :         __E("unmapAddress: VirtualFreeEx failed\n");

  03cc0	e59f0068	 ldr         r0, [pc, #0x68]
  03cc4	eb000000	 bl          NKDbgPrintfW

; 1958 :         return (-2);

  03cc8	e3e03001	 mvn         r3, #1
  03ccc	e58d3010	 str         r3, [sp, #0x10]
  03cd0	ea000012	 b           |$LN10@unmapAddre|
  03cd4		 |$LN4@unmapAddre|

; 1959 :     }
; 1960 : 
; 1961 :     RemoveEntryList(e);

  03cd4	e59d3008	 ldr         r3, [sp, #8]
  03cd8	e58d300c	 str         r3, [sp, #0xC]
  03cdc	e59d300c	 ldr         r3, [sp, #0xC]
  03ce0	e2833004	 add         r3, r3, #4
  03ce4	e5932000	 ldr         r2, [r3]
  03ce8	e59d300c	 ldr         r3, [sp, #0xC]
  03cec	e5933000	 ldr         r3, [r3]
  03cf0	e5823000	 str         r3, [r2]
  03cf4	e59d300c	 ldr         r3, [sp, #0xC]
  03cf8	e2831004	 add         r1, r3, #4
  03cfc	e59d300c	 ldr         r3, [sp, #0xC]
  03d00	e5933000	 ldr         r3, [r3]
  03d04	e2832004	 add         r2, r3, #4
  03d08	e5913000	 ldr         r3, [r1]
  03d0c	e5823000	 str         r3, [r2]

; 1962 :     free(entry);

  03d10	e59d0004	 ldr         r0, [sp, #4]
  03d14	eb000000	 bl          free

; 1963 : 
; 1964 :     return (0);

  03d18	e3a03000	 mov         r3, #0
  03d1c	e58d3010	 str         r3, [sp, #0x10]
  03d20		 |$LN10@unmapAddre|

; 1965 : }

  03d20	e59d0010	 ldr         r0, [sp, #0x10]
  03d24	e28dd018	 add         sp, sp, #0x18
  03d28	e89d6000	 ldmia       sp, {sp, lr}
  03d2c	e12fff1e	 bx          lr
  03d30		 |$LN15@unmapAddre|
  03d30		 |$LN16@unmapAddre|
  03d30	00000000	 DCD         |??_C@_1GC@BHAKEIBM@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@|
  03d34		 |$LN17@unmapAddre|
  03d34	00000000	 DCD         |??_C@_1HE@HLGKHAFC@?$AAC?$AAM?$AAE?$AAM?$AAK?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAu?$AAn?$AAm?$AAa?$AAp?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  03d38		 |$LN18@unmapAddre|
  03d38	00000000	 DCD         |mappedBufferList|
  03d3c		 |$M41538|

			 ENDP  ; |unmapAddress|

	END
