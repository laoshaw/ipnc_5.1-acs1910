
#include "drv_imgs_AR0331_3.1MP.h"
#include <drv_gpio.h>

DRV_ImgsObj gDRV_imgsObj;

#define INPUT_CLK    24  //EXTCLK
#define PLL_M        44  //pll_multiplier
#define PLL_pre_div  2   //pre_pll_clk_div
#define PLL_P1       1   //vt_sys_clk_div
#define PLL_P2       8   //vt_pix_clk_div
#define OUT_CLK ((INPUT_CLK * PLL_M) / (PLL_pre_div * PLL_P1 * PLL_P2))//73.5MHz

#define LINE_LENGTH (0x3e8) //1000,1080p 
#define ROW_TIME    27      // (2*LINE_LENGTH / OUT_CLK)//27.2us,two paths readout

//#define rev2_HDR
#define rev2_linear
//#define setting_from_rev1

int DRV_imgsOpen(DRV_ImgsConfig *config)
{
    int status, retry=10;
    Uint16 width, height;

    memset(&gDRV_imgsObj, 0, sizeof(gDRV_imgsObj));

    DRV_imgGetWidthHeight(config->sensorMode, &width, &height);

    width+=IMGS_H_PAD;
    height+=IMGS_V_PAD;

    DRV_imgsCalcFrameTime(config->fps, width, height, config->binEnable);

    status = DRV_i2cOpen(&gDRV_imgsObj.i2cHndl, IMGS_I2C_ADDR);
    if(status!=OSA_SOK) {
        OSA_ERROR("DRV_i2cOpen()\n");
        return status;
    }

#ifdef BOARD_AP_IPNC
    DRV_gpioSetMode(IMGS_RESET_GPIO, DRV_GPIO_DIR_OUT);
    DRV_gpioSet(IMGS_RESET_GPIO);
    DRV_gpioClr(IMGS_RESET_GPIO);
    OSA_waitMsecs(50);
    DRV_gpioSet(IMGS_RESET_GPIO);
    OSA_waitMsecs(50);
#endif
    do {
        status = DRV_imgsCheckId();
        if(status==OSA_SOK)
            break;
        OSA_waitMsecs(10);
    } while(retry--);

    if(status!=OSA_SOK) {
        OSA_ERROR("DRV_imgsCheckId()\n");
        DRV_i2cClose(&gDRV_imgsObj.i2cHndl);
        return status;
    }
    return 0;
}

int DRV_imgsClose()
{
    int status;

    status = DRV_imgsEnable(FALSE);
    status |= DRV_i2cClose(&gDRV_imgsObj.i2cHndl);

    return status;
}

char* DRV_imgsGetImagerName()
{
    return "Aptina_AR0331_3.1MP";
}

int DRV_imgsSpecificSetting(void)
{
    return 0;
}

int DRV_imgsSet50_60Hz(Bool is50Hz)
{
    /*
       int fps;

       if( gDRV_imgsObj.curFrameTime.fps==30
       ||gDRV_imgsObj.curFrameTime.fps==25
       ) {

       if(is50Hz)
       fps = 25;
       else
       fps = 30;

       DRV_imgsSetFramerate(fps);
       }
       return 0;
       */
    return 0;
}

int DRV_imgsSetFramerate(int fps)
{
    /*
       Uint16 regAddr[4];
       Uint16 regValue[4];
       int i = 0;
       int j;
       int status = 0;

       switch(fps){
       case 30:
       i = 0;
       regAddr[i] = AR0331_PLL_Multiplier; regValue[i] = 0x0031; i++; 	
       regAddr[i] = AR0331_Pre_PLL_CLK_DIV; regValue[i] = 0x0002; i++; 	
       regAddr[i] = AR0331_VT_SYS_CLK_DIV; regValue[i] = 0x0001; i++; 	
       regAddr[i] = AR0331_VT_PIX_CLK_DIV; regValue[i] = 0x0008; i++; 
       break;
       case 24:
       i = 0;
       regAddr[i] = AR0331_PLL_Multiplier; regValue[i] = 0x002D; i++; 	
       regAddr[i] = AR0331_Pre_PLL_CLK_DIV; regValue[i] = 0x0002; i++; 
       regAddr[i] = AR0331_VT_SYS_CLK_DIV; regValue[i] = 0x0001; i++; 	
       regAddr[i] = AR0331_VT_PIX_CLK_DIV; regValue[i] = 0x000A; i++; 	
       break;
       case 15:
       i = 0;
       regAddr[i] = AR0331_PLL_Multiplier; regValue[i] = 0x002D; i++; 	
       regAddr[i] = AR0331_Pre_PLL_CLK_DIV; regValue[i] = 0x0002; i++; 
       regAddr[i] = AR0331_VT_SYS_CLK_DIV; regValue[i] = 0x0001; i++; 	
       regAddr[i] = AR0331_VT_PIX_CLK_DIV; regValue[i] = 0x0010; i++; 	
       break;
       case 8:
       i = 0;
       regAddr[i] = AR0331_PLL_Multiplier; regValue[i] = 0x002D; i++; 	
       regAddr[i] = AR0331_Pre_PLL_CLK_DIV; regValue[i] = 0x0004; i++; 
       regAddr[i] = AR0331_VT_SYS_CLK_DIV; regValue[i] = 0x0001; i++; 	
       regAddr[i] = AR0331_VT_PIX_CLK_DIV; regValue[i] = 0x000F; i++; 	
       break;
       default: 
       break;
       }
       for(j = 0; j < i ; j++)
       {
       status = DRV_i2c16Write16(&gDRV_imgsObj.i2cHndl, regAddr, regValue, i);
       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2c16Write16()\n");
       return status;
       }
       OSA_waitMsecs(1);
       }
       OSA_waitMsecs(50);
       return status;
       */    
    return 0;
}

int DRV_imgsBinEnable(Bool enable)
{
    /*
       Uint8 regAddr[4];
       Uint16 regValue[4];
       int i, col_bin, row_bin, status;

       if(!enable) {
       col_bin = 0;
       row_bin = 0;
       } else {
       col_bin = gDRV_imgsObj.curFrameTime.col_bin;
       row_bin = gDRV_imgsObj.curFrameTime.row_bin;
       }

       i=0;
       regAddr[i]  = ROW_ADDR_MODE;
       regValue[i] = (gDRV_imgsObj.curFrameTime.row_skip & 0x7 ) | ((row_bin & 0x3) << 4);
       i++;

       regAddr[i]  = COL_ADDR_MODE;
       regValue[i] = (gDRV_imgsObj.curFrameTime.col_skip & 0x7 ) | ((col_bin & 0x3) << 4);
       i++;

       status = DRV_i2cWrite16(&gDRV_imgsObj.i2cHndl, regAddr, regValue, i);
       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2cWrite16()\n");
       return status;
       }

       return status;
       */
    return 0;
}

int DRV_imgsBinMode(int binMode)
{
    /*
       Uint8 regAddr[4];
       Uint16 regValue[4];
       int i, status;

       i=0;
       regAddr[i]  = READ_MODE_2;
       regValue[i] = binMode;
       i++;


       status = DRV_i2cWrite16(&gDRV_imgsObj.i2cHndl, regAddr, regValue, i);
       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2cWrite16()\n");
       return status;
       }

       return status;
       */
    return 0;
}

int DRV_imgsSetAgain(int again, int setRegDirect)
{
    Uint16 regAddr;
    Uint16 regValue;

    int status=0;
    regAddr = AR0331_ANALOG_GAIN;

    if (again >= 8000)
    {
        regValue = 0x30;
    }
    else if (again >= 5333)
    {
        regValue = 0x28;
    }
    else if (again >= 4000)
    {
        regValue = 0x20;
    }
    else if (again >= 2666)
    {
        regValue = 0x18;
    }
    else if (again >= 2000)
    {
        regValue = 0x10;
    }
    else if (again >= 1333)
    {
        regValue = 0x08;
    }
    else
    {
        regValue = 0x00;
    }

    printf("\ncurrent again=%d, reg=%#x\n",again, regValue);
    status = DRV_i2c16Write16(&gDRV_imgsObj.i2cHndl, &regAddr, &regValue, 1);  
    if(status!=OSA_SOK) {
        OSA_ERROR("I2C write error\n");
        return status;
    }
    return 0;
}

int DRV_imgsSetEshutter(Uint32 eshutterInUsec, int setRegDirect)
{

    int status;
    Uint16 regAddr;
    Uint16 regValue;
    //  printf("current eshutterInUsec:%d-----\n",eshutterInUsec); 

    regAddr =AR0331_COARSE_IT_TIME_A;
    regValue = eshutterInUsec/ROW_TIME;

    status = DRV_i2c16Write16(&gDRV_imgsObj.i2cHndl, &regAddr, &regValue, 1);
    if(status!=OSA_SOK) {
        OSA_ERROR("DRV_i2c16Write16()\n");
        return status;
    }
    return status;

    //  return 0;
}
int AR0331_HDR_Enable(int enable)
{
    return 0;
    Uint16 regAddr[7];
    Uint16 regValue[7];
    int status = 0;
    int i = 0;
    int j = 0;

    if(enable)
    {			/*rev1,32X*/
        /*
           regAddr[i] = 0x3082; regValue[i] = 0x000c; i++; 	
           regAddr[i] = 0x31d0; regValue[i] = 0x0001; i++; 
           regAddr[i] = 0x301a; regValue[i] = 0x10de; i++; 	
           regAddr[i] = 0x318c; regValue[i] = 0xc001; i++; 
           regAddr[i] = 0x31d0; regValue[i] = 0x0000; i++; 	
           regAddr[i] = 0x2400; regValue[i] = 0x0002; i++; 
           regAddr[i] = 0x3064; regValue[i] = 0x1882; i++; 
           */
        /*rev2 16x*/
        regAddr[i]= 0x3082;regValue[i]= 0x0008;i++;
        regAddr[i]= 0x305E;regValue[i]= 0x0040;i++;

        //Delay=60

        regAddr[i]= 0x318C; regValue[i]=0xC001;i++;
        regAddr[i]= 0x3198; regValue[i]=0x061E;i++;

        //[ALTM Enabled]
        regAddr[i]=0x301A;  regValue[i]=0x10D8;i++;//stopping streaming

        regAddr[i]= 0x2442; regValue[i]=0x0080;i++;
        regAddr[i]= 0x2444; regValue[i]=0x0000;i++;
        regAddr[i]= 0x2446; regValue[i]=0x0004;i++;
        regAddr[i]= 0x2440; regValue[i]=0x0002;i++;
        regAddr[i]= 0x2438; regValue[i]=0x0010;i++;
        regAddr[i]= 0x243A; regValue[i]=0x0020;i++;
        regAddr[i]= 0x243C; regValue[i]=0x0000;i++;
        regAddr[i]= 0x243E; regValue[i]=0x0200;i++;
        regAddr[i]= 0x31D0; regValue[i]=0x0000;i++;
        regAddr[i]= 0x301E; regValue[i]=0x00A8;i++;
        /*LOAD= ALTM Enabled Devware Color Setup*/
        regAddr[i]= 0x2400; regValue[i]=0x0002;i++;

        regAddr[i]=0x301A;regValue[i]=0x10DC;i++;// Enable Streaming


        regAddr[i]= 0x30FE; regValue[i]=0x0000;i++;
        regAddr[i]= 0x31E0; regValue[i]=0x0200;i++;
        regAddr[i]= 0x320A; regValue[i]=0x0000;i++;
        regAddr[i]= 0x2450; regValue[i]=0x0000;i++;
        regAddr[i]= 0x301E; regValue[i]=0x00A8;i++;
        regAddr[i]= 0x318A; regValue[i]=0x0E10;i++;
        regAddr[i]= 0x3064; regValue[i]=0x1982;i++;
        regAddr[i]= 0x3064; regValue[i]=0x1982;i++;

        regAddr[i]=0x301A;regValue[i]=0x10DE;i++;

        //[ADACD Enabled]
        regAddr[i]= 0x3202; regValue[i]=0x00A0;i++;
        regAddr[i]= 0x3206; regValue[i]=0x1810;i++;
        regAddr[i]= 0x3208; regValue[i]=0x2820;i++;
        regAddr[i]= 0x3200; regValue[i]=0x0002;i++;	
    }
    else
    {
        regAddr[i] = 0x3082; regValue[i] = 0x0009; i++; 	
        regAddr[i] = 0x31d0; regValue[i] = 0x0000; i++; 
        regAddr[i] = 0x301a; regValue[i] = 0x10dc; i++; 	
        regAddr[i] = 0x318c; regValue[i] = 0x0000; i++; 
        regAddr[i] = 0x31d0; regValue[i] = 0x0000; i++; 	
        regAddr[i] = 0x2400; regValue[i] = 0x0003; i++; 
        regAddr[i] = 0x3064; regValue[i] = 0x1082; i++; 
    }
    for(j = 0; j < i ; j++)
    {
        status = DRV_i2c16Write16(&gDRV_imgsObj.i2cHndl, &regAddr[j], &regValue[j], 1);
        if(status!=OSA_SOK) {
            OSA_ERROR("DRV_i2c16Write16()\n");
            return status;
        }
        printf("xxxxxxxxxxxxxxHDR enable,j:%d",j);
        OSA_waitMsecs(1);
    }
    //printf("xxxxxxxxxxxxxxHDR enable,i:%d",j);
    return status;
}
//Read AGain & exposure
int DRV_imgsGetAgain(int *again)
{
    /*
       Uint16 regAddr;
       Uint16 regValue;
       int status;

       regAddr = AR0331_GLOABL_GAIN;

       status = DRV_i2c16Read16(&gDRV_imgsObj.i2cHndl, &regAddr, &regValue, 1);

       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2c16Read16()\n");
       return status;
       }

     *again = regValue;
     return status;
     */
    return 0;
}

int DRV_imgsGetEshutter(Uint32 *eshutterInUsec)
{
    /*
       int status;
       Uint16 regAddr;
       Uint16 regValue;

       regAddr = AR0331_COARSE_IT_TIME_A;

       status = DRV_i2c16Read16(&gDRV_imgsObj.i2cHndl, &regAddr, &regValue, 1);
       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2c16Write16()\n");
       return status;
       }

     *eshutterInUsec = regValue*ROW_TIME;

     return status;
     */
    return 0;
}

int DRV_imgsSetDcSub(Uint32 dcSub, int setRegDirect)
{

    return 0;
}

int DRV_imgsEnable(Bool enable)
{
    int status=OSA_SOK;

    if(enable) {
        status = DRV_imgsSetRegs();
        if(status!=OSA_SOK) {
            OSA_ERROR("DRV_imgsSetRegs()\n");
            return status;
        }
    }
    return status;
}

DRV_ImgsModeConfig      *DRV_imgsGetModeConfig(int sensorMode)
{
    return &gDRV_imgsObj.curModeConfig;
}

DRV_ImgsIsifConfig      *DRV_imgsGetIsifConfig(int sensorMode)
{
    return &gDRV_imgsIsifConfig_Common;
}

DRV_ImgsIpipeConfig     *DRV_imgsGetIpipeConfig(int sensorMode, int vnfDemoCfg)
{
    if(vnfDemoCfg)
        return &gDRV_imgsIpipeConfig_Vnfdemo;
    else
        return &gDRV_imgsIpipeConfig_Common;
}

DRV_ImgsH3aConfig       *DRV_imgsGetH3aConfig(int sensorMode, int aewbVendor)
{
    if(aewbVendor==1) {
        return &gDRV_imgsH3aConfig_Appro;
    }
    else if(aewbVendor==2) {
        return &gDRV_imgsH3aConfig_TI;
    }
    else {
        return &gDRV_imgsH3aConfig_Common;
    }
}

DRV_ImgsLdcConfig       *DRV_imgsGetLdcConfig(int sensorMode, Uint16 ldcInFrameWidth, Uint16 ldcInFrameHeight)
{
    sensorMode &= 0xFF;

    switch(sensorMode) {

        case DRV_IMGS_SENSOR_MODE_720x480:

            if(ldcInFrameWidth==864)
                return &gDRV_imgsLdcConfig_736x480_0_VS;

            if(ldcInFrameWidth==352)
                return &gDRV_imgsLdcConfig_736x480_1_VS;

            if(ldcInFrameWidth==736)
                return &gDRV_imgsLdcConfig_736x480_0;

            if(ldcInFrameWidth==288)
                return &gDRV_imgsLdcConfig_736x480_1;

            if(ldcInFrameWidth==768)
                return &gDRV_imgsLdcConfig_768x512_0;

            if(ldcInFrameWidth==320)
                return &gDRV_imgsLdcConfig_768x512_1;

            if(ldcInFrameWidth==928)
                return &gDRV_imgsLdcConfig_768x512_0_VS;

            if(ldcInFrameWidth==384)
                return &gDRV_imgsLdcConfig_768x512_1_VS;

            break;

        case DRV_IMGS_SENSOR_MODE_1280x720:

            if(ldcInFrameWidth==1280)
                return &gDRV_imgsLdcConfig_1280x736_0;

            if(ldcInFrameWidth==320)
                return &gDRV_imgsLdcConfig_1280x736_1;

            if(ldcInFrameWidth==640)
                return &gDRV_imgsLdcConfig_1280x736_2;

            if(ldcInFrameWidth==1536)
                return &gDRV_imgsLdcConfig_1280x736_0_VS;

            if(ldcInFrameWidth==384)
                return &gDRV_imgsLdcConfig_1280x736_1_VS;

            if(ldcInFrameWidth==768)
                return &gDRV_imgsLdcConfig_1280x736_2_VS;

            if(ldcInFrameWidth==1312)
                return &gDRV_imgsLdcConfig_1312x768_0;

            if(ldcInFrameWidth==352)
                return &gDRV_imgsLdcConfig_1312x768_1;

            if(ldcInFrameWidth==672)
                return &gDRV_imgsLdcConfig_1312x768_2;

            if(ldcInFrameWidth==1600)
                return &gDRV_imgsLdcConfig_1312x768_0_VS;

            if(ldcInFrameWidth==448)
                return &gDRV_imgsLdcConfig_1312x768_1_VS;

            if(ldcInFrameWidth==832)
                return &gDRV_imgsLdcConfig_1312x768_2_VS;

            break;

    }

    return NULL;
}

int DRV_imgsReset()
{
    /*
       Uint8 regAddr[8];
       Uint16 regValue[8];
       int status, i;

       i=0;

       regAddr[i]  = OUTPUT_CTRL;
       regValue[i] = 0x1f80;

       regAddr[i]  = RESET;
       regValue[i] = 0x1;
       i++;

       status = DRV_i2cWrite16(&gDRV_imgsObj.i2cHndl, regAddr, regValue, i);
       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2cWrite16()\n");
       return status;
       }

       if(status==OSA_SOK) {

       i=0;

       regAddr[i]  = RESET;
       regValue[i] = 0x0;
       i++;

       status = DRV_i2cWrite16(&gDRV_imgsObj.i2cHndl, regAddr, regValue, i);
       }

       if(status!=OSA_SOK) {
       OSA_ERROR("DRV_i2cWrite16()\n");
       return status;
       }
       */
    return 0;
}

int DRV_imgsCheckId()
{
    int status;
    Uint16  regAddr;
    Uint16 regValue;

    regAddr = CHIP_VERSION_ADDR;
    regValue = 0;

    status = DRV_i2c16Read16(&gDRV_imgsObj.i2cHndl, &regAddr, &regValue, 1);
    printf("Read Sensor ID:0x%4x\n",regValue);
    if(status!=OSA_SOK) {
        OSA_ERROR("DRV_i2cRead16()\n");
        return status;
    }
    if(regValue!=IMGS_CHIP_ID)
        return OSA_EFAIL;

    return OSA_SOK;
}

int DRV_imgsSetRegs()
{
    Uint16  regAddr[500];
    Uint16 regValue[500];
    int status,i=0;
    int j;
    memset(regAddr, 0, 500*sizeof(Uint16));
    memset(regValue, 0,500*sizeof(Uint16));

    //rev2 HDR
#ifdef rev2_HDR
    regAddr[i] = 0x301A; regValue[i] = 0x0001 	      ; i++;  // RESET_REGISTER
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	      ; i++;  // RESET_REG ISTER
    regAddr[i] = 0x3088; regValue[i] = 0x8000 	      ; i++;  // SEQ_CTRL_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6134 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A31 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4342 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2714 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DEA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2704 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2705 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2715 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3527 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x053D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1045 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4027 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0427 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x143D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xEA62 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2728 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3627 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x083D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6444 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B00 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x432D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6343 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1664 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x435F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4F50 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2604 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2694 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FC 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x530D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C0D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5754 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1709 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5556 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4953 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0753 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x034D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x286C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4C09 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x282C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2828 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x261C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4E5C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0960 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4500 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4580 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26BE 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F8 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1702 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C0B 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1712 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26BA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C03 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1713 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F2 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F28 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0817 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0360 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x173C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26B2 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F4D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1926 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9316 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1627 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA45 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xA017 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFB17 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1F45 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x801F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171E 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5D17 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0C26 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9248 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D4E 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x269A 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2808 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4C0B 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0327 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF217 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2626 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9216 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x165F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D19 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2693 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2643 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C01 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1720 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A65 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6643 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5A43 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x165B 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4327 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9C45 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0627 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9D17 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1C45 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4023 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5D26 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4417 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0E28 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0053 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x014B 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5251 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B01 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x432D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4643 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1647 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x434F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5026 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0426 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8427 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFC53 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D5C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D57 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5417 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0955 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5649 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5307 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5303 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D28 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6C4C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0928 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C28 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2826 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0C4E 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C09 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6045 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0045 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8026 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xAE27 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF817 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0227 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA5C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B17 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1226 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xAA5C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0317 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B27 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF217 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x265F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2808 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1703 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0326 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xA216 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x165F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D1A 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2683 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x45A0 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FB 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171F 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4580 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2017 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA17 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1E5D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x170C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2682 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x484D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4E26 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8A28 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x084C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B60 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1707 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F2 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1738 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2682 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F4D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1A26 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8316 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1627 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA26 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x435C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0145 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4027 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9817 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1F4A 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0343 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1604 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5843 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1659 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2217 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x985D 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2645 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x170E 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2800 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5301 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B52 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5112 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4460 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	      ; i++;  // SEQ_DATA_PORT
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	      ; i++;  // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x30B0; regValue[i] = 0x0000 	      ; i++;  // DIGITAL_TEST
    regAddr[i] = 0x30BA; regValue[i] = 0x07EC 	      ; i++;  // DIGITAL_CTRL
    regAddr[i] = 0x31AC; regValue[i] = 0x100C 	      ; i++;  // DATA_FORMAT_BITS
    regAddr[i] = 0x302A; regValue[i] = PLL_P2 	      ; i++;  // VT_PIX_CLK_DIV
    regAddr[i] = 0x302C; regValue[i] = PLL_P1 	      ; i++;  // VT_SYS_CLK_DIV
    regAddr[i] = 0x302E; regValue[i] = PLL_pre_div	  ; i++;  // PRE_PLL_CLK_DIV
    regAddr[i] = 0x3030; regValue[i] = PLL_M	      ; i++;  // PLL_MULTIPLIER
    regAddr[i] = 0x3036; regValue[i] = 0x000C 	      ; i++;  // OP_PIX_CLK_DIV
    regAddr[i] = 0x3038; regValue[i] = 0x0001 	      ; i++;  // OP_SYS_CLK_DIV
    regAddr[i] = 0x3002; regValue[i] = 0x00E4 	      ; i++;  // Y_ADDR_START
    regAddr[i] = 0x3004; regValue[i] = 0x0042 	      ; i++;  // X_ADDR_START
    regAddr[i] = 0x3006; regValue[i] = 0x0523 	      ; i++;  // Y_ADDR_END
    regAddr[i] = 0x3008; regValue[i] = 0x07C9 	      ; i++;  // X_ADDR_END
    regAddr[i] = 0x300A; regValue[i] = 0x0465 	      ; i++;  // FRAME_LENGTH_LINES
    regAddr[i] = 0x300C; regValue[i] = 0x044C 	      ; i++;  // LINE_LENGTH_PCK
    regAddr[i] = 0x3012; regValue[i] = 0x03F4 	      ; i++;  // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x30A2; regValue[i] = 0x0001 	      ; i++;  // X_ODD_INC
    regAddr[i] = 0x30A6; regValue[i] = 0x0001 	      ; i++;  // Y_ODD_INC
    regAddr[i] = 0x3040; regValue[i] = 0xC000 	      ; i++;  // READ_MODE
    regAddr[i] = 0x31AE; regValue[i] = 0x0301 	      ; i++;  // SERIAL_FORMAT
    regAddr[i] = 0x3082; regValue[i] = 0x0008 	      ; i++;  // OPERATION_MODE_CTRL
    regAddr[i] = 0x305E; regValue[i] = 0x0080 	      ; i++;  // GLOBAL_GAIN
    regAddr[i] = 0x318C; regValue[i] = 0xC001 	      ; i++;  // HDR_MC_CTRL2
    regAddr[i] = 0x3198; regValue[i] = 0x061E 	      ; i++;  // HDR_MC_CTRL8
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	      ; i++;  // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x2442; regValue[i] = 0x0080 	      ; i++;  // ALTM_CONTROL_KEY_K0
    regAddr[i] = 0x2444; regValue[i] = 0x0000 	      ; i++;  // ALTM_CONTROL_KEY_K01_LO
    regAddr[i] = 0x2446; regValue[i] = 0x0004 	      ; i++;  // ALTM_CONTROL_KEY_K01_HI
    regAddr[i] = 0x2440; regValue[i] = 0x0002 	      ; i++;  // ALTM_CONTROL_DAMPER
    regAddr[i] = 0x2438; regValue[i] = 0x0010 	      ; i++;  // ALTM_CONTROL_MIN_FACTOR
    regAddr[i] = 0x243A; regValue[i] = 0x0020 	      ; i++;  // ALTM_CONTROL_MAX_FACTOR
    regAddr[i] = 0x243C; regValue[i] = 0x0000 	      ; i++;  // ALTM_CONTROL_DARK_FLOOR
    regAddr[i] = 0x243E; regValue[i] = 0x0200 	      ; i++;  // ALTM_CONTROL_BRIGHT_FLOOR
    regAddr[i] = 0x31D0; regValue[i] = 0x0000 	      ; i++;  // COMPANDING
    regAddr[i] = 0x301E; regValue[i] = 0x00A8 	      ; i++;  // DATA_PEDESTAL
    regAddr[i] = 0x2400; regValue[i] = 0x0002 	      ; i++;  // ALTM_CONTROL
    regAddr[i] = 0x301A; regValue[i] = 0x10DC 	      ; i++;  // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x30FE; regValue[i] = 0x0000 	      ; i++;  // NOISE_PEDESTAL
    regAddr[i] = 0x31E0; regValue[i] = 0x0200 	      ; i++;  // PIX_DEF_ID
    regAddr[i] = 0x320A; regValue[i] = 0x0000 	      ; i++;  // ADACD_PEDESTAL
    regAddr[i] = 0x2450; regValue[i] = 0x0000 	      ; i++;  // ALTM_OUT_PEDESTAL
    regAddr[i] = 0x301E; regValue[i] = 0x00A8 	      ; i++;  // DATA_PEDESTAL
    regAddr[i] = 0x318A; regValue[i] = 0x0E10 	      ; i++;  // HDR_MC_CTRL1
    regAddr[i] = 0x3064; regValue[i] = 0x1982 	      ; i++;  // SMIA_TEST
    regAddr[i] = 0x3064; regValue[i] = 0x1982 	      ; i++;  // SMIA_TEST
    regAddr[i] = 0x301A; regValue[i] = 0x10DE 	      ; i++;  // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x3202; regValue[i] = 0x00A0 	      ; i++;  // ADACD_NOISE_MODEL1
    regAddr[i] = 0x3206; regValue[i] = 0x1810 	      ; i++;  // RESERVED_MFR_3206
    regAddr[i] = 0x3208; regValue[i] = 0x2820 	      ; i++;  // RESERVED_MFR_3208
    regAddr[i] = 0x3200; regValue[i] = 0x0002 	      ; i++;  // ADACD_CONTROL
    regAddr[i] = 0x3180; regValue[i] = 0x8089 	      ; i++;  // DELTA_DK_CONTROL
    regAddr[i] = 0x30F4; regValue[i] = 0x4000 	      ; i++;  // RESERVED_MFR_30F4
    regAddr[i] = 0x3ED4; regValue[i] = 0x8F6C 	      ; i++;  // RESERVED_MFR_3ED4
    regAddr[i] = 0x3ED6; regValue[i] = 0x6666 	      ; i++;  // RESERVED_MFR_3ED6
    regAddr[i] = 0x3EDA; regValue[i] = 0x8899 	      ; i++;  // RESERVED_MFR_3EDA
    regAddr[i] = 0x3EE6; regValue[i] = 0x00F0 	      ; i++;  // RESERVED_MFR_3EE6
    regAddr[i] = 0x3ED2; regValue[i] = 0xBF46 	      ; i++;  // DAC_LD_6_7
    regAddr[i] = 0x301A; regValue[i] = 0x10DC 	      ; i++;  // RESET_REGISTER
    regAddr[i] = 0x3060; regValue[i] = 0x000C 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0096 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C9 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0445 	      ; i++;  // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x000A 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009E 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E9 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A0 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00F2 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A1 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00F8 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A2 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00FD 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A2 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00FF 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A2 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x0100 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A2 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00FF 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A2 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00FD 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A1 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00FA 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A0 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00F6 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x00A0 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00F1 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009F 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00EC 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009E 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E7 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009D 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E3 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009C 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DE 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009B 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D9 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009B 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D5 	      ; i++;  // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0009 	      ; i++;  // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009A 	      ; i++;  // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0081 	      ; i++;  // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0081 	      ; i++;  // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D1 	      ; i++;  // BLUE_GAIN
#endif

    //rev2 linear
#ifdef rev2_linear
    regAddr[i] = 0x301A; regValue[i] = 0x0001 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x3088; regValue[i] = 0x8000 	       ; i++; // SEQ_CTRL_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A03 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0443 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1645 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x404B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6134 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A31 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4342 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2714 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DEA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2704 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2715 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3527 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x053D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4027 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0427 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x143D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xEA62 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2728 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x083D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6444 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B01 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x432D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4643 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1647 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x435F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4F50 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2604 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2694 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2027 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFC53 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D5C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D57 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5417 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0955 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5649 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5307 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5303 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6C4C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0928 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x294E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C09 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4500 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4580 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26B6 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F8 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1702 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C0B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1718 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26B2 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C03 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1744 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F2 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1702 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2809 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1710 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1628 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x084D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1A26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA45 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xA017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0727 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFB17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2945 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0827 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x285D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x170E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2691 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5301 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1740 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5302 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1710 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2693 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2692 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x484D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4E28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x094C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F27 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF217 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1428 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0816 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D1A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2603 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C01 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x172A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A0A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B43 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1707 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1725 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1708 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5D53 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x455C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x014B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5251 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1702 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6018 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A03 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0443 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1658 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5943 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x165A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5B43 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1707 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1725 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1710 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1720 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x224B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	       ; i++; // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x30B0; regValue[i] = 0x0000 	       ; i++; // DIGITAL_TEST
    regAddr[i] = 0x30BA; regValue[i] = 0x06EC 	       ; i++; // DIGITAL_CTRL
    regAddr[i] = 0x31AC; regValue[i] = 0x0C0C 	       ; i++; // DATA_FORMAT_BITS
    regAddr[i] = 0x302A; regValue[i] = PLL_P2 	       ; i++; // VT_PIX_CLK_DIV
    regAddr[i] = 0x302C; regValue[i] = PLL_P1	       ; i++; // VT_SYS_CLK_DIV
    regAddr[i] = 0x302E; regValue[i] = PLL_pre_div     ; i++; // PRE_PLL_CLK_DIV
    regAddr[i] = 0x3030; regValue[i] = PLL_M 	       ; i++; // PLL_MULTIPLIER
    regAddr[i] = 0x3036; regValue[i] = 0x000C 	       ; i++; // OP_PIX_CLK_DIV
    regAddr[i] = 0x3038; regValue[i] = 0x0001 	       ; i++; // OP_SYS_CLK_DIV
    regAddr[i] = 0x3002; regValue[i] = 0x00E4 	       ; i++; // Y_ADDR_START
    regAddr[i] = 0x3004; regValue[i] = 0x0042 	       ; i++; // X_ADDR_START
    regAddr[i] = 0x3006; regValue[i] = 0x0523 	       ; i++; // Y_ADDR_END
    regAddr[i] = 0x3008; regValue[i] = 0x07C9 	       ; i++; // X_ADDR_END
    regAddr[i] = 0x300A; regValue[i] = 0x0465 	       ; i++; // FRAME_LENGTH_LINES
    regAddr[i] = 0x300C; regValue[i] = 0x044C 	       ; i++; // LINE_LENGTH_PCK
    regAddr[i] = 0x3012; regValue[i] = 0x0416 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x30A2; regValue[i] = 0x0001 	       ; i++; // X_ODD_INC
    regAddr[i] = 0x30A6; regValue[i] = 0x0001 	       ; i++; // Y_ODD_INC
    regAddr[i] = 0x3040; regValue[i] = 0xC000 	       ; i++; // READ_MODE
    regAddr[i] = 0x31AE; regValue[i] = 0x0301 	       ; i++; // SERIAL_FORMAT
    regAddr[i] = 0x3082; regValue[i] = 0x0009 	       ; i++; // OPERATION_MODE_CTRL
    regAddr[i] = 0x318C; regValue[i] = 0x0000 	       ; i++; // HDR_MC_CTRL2
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	       ; i++; // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x2400; regValue[i] = 0x0003 	       ; i++; // ALTM_CONTROL
    regAddr[i] = 0x301E; regValue[i] = 0x00A8 	       ; i++; // DATA_PEDESTAL
    regAddr[i] = 0x301A; regValue[i] = 0x10DC 	       ; i++; // RESET_; i++ ; regAddr[i] ISTER
    regAddr[i] = 0x3200; regValue[i] = 0x0000 	       ; i++; // ADACD_CONTROL
    regAddr[i] = 0x31D0; regValue[i] = 0x0000 	       ; i++; // COMPANDING
    regAddr[i] = 0x30FE; regValue[i] = 0x0080 	       ; i++; // NOISE_PEDESTAL
    regAddr[i] = 0x31E0; regValue[i] = 0x0200 	       ; i++; // PIX_DEF_ID
    regAddr[i] = 0x320A; regValue[i] = 0x0080 	       ; i++; // ADACD_PEDESTAL
    regAddr[i] = 0x2450; regValue[i] = 0x0000 	       ; i++; // ALTM_OUT_PEDESTAL
    regAddr[i] = 0x301E; regValue[i] = 0x00A8 	       ; i++; // DATA_PEDESTAL
    regAddr[i] = 0x3064; regValue[i] = 0x1982 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x3064; regValue[i] = 0x1982 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x3180; regValue[i] = 0x8089 	       ; i++; // DELTA_DK_CONTROL
    regAddr[i] = 0x30F4; regValue[i] = 0x4000 	       ; i++; // RESERVED_MFR_30F4
    regAddr[i] = 0x3ED4; regValue[i] = 0x8F6C 	       ; i++; // RESERVED_MFR_3ED4
    regAddr[i] = 0x3ED6; regValue[i] = 0x6666 	       ; i++; // RESERVED_MFR_3ED6
    regAddr[i] = 0x3EDA; regValue[i] = 0x8899 	       ; i++; // RESERVED_MFR_3EDA
    regAddr[i] = 0x3EE6; regValue[i] = 0x00F0 	       ; i++; // RESERVED_MFR_3EE6
    regAddr[i] = 0x3ED2; regValue[i] = 0x9F46 	       ; i++; // DAC_LD_6_7
    regAddr[i] = 0x301A; regValue[i] = 0x10DC 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x3060; regValue[i] = 0x0012 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x009A 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0083 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0083 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CD 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0445 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x000E 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D3 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000C 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0092 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0091 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0091 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D9 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0091 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DA 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0091 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D9 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0091 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0092 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0092 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D3 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D1 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0094 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D0 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0095 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0095 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CC 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0096 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CA 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0097 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C9 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0097 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0097 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C7 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C4 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C4 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C4 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x000B 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0098 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00C7 	       ; i++;  // BLUE_GAIN
#endif

    //rev1 
#ifdef setting_from_rev1
    regAddr[i] = 0x301A; regValue[i] = 0x0001 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x3088; regValue[i] = 0x8000 	       ; i++; // SEQ_CTRL_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6134 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A31 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4342 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2714 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DFF 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3DEA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2704 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3D10 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2715 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3527 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x053D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4027 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0427 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x143D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFF3D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xEA62 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2728 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x3627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x083D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6444 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B00 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x432D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6343 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1664 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x435F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4F50 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2604 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2684 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FC 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x530D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C0D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5754 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1709 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5556 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4953 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0753 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x034D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x286C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4C09 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x282C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2828 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x260C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4E5C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0960 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4500 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4580 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26AE 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F8 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1702 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C0B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1712 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26AA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C03 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1723 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0827 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF260 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1716 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x26A2 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F4D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1926 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA45 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xA017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFB17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1F45 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x801F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5D17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0C26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8248 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D4E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x268A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2808 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4C0B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2B27 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF217 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1626 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x825F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D19 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2642 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C01 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1720 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4A65 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6643 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5A43 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x165B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4327 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9C45 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9D17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1C45 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4023 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2798 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5D26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4417 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0E28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0053 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x014B 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5251 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B01 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x432D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4643 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1647 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x434F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5026 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0426 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8427 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFC53 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D5C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0D57 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5417 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0955 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5649 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5307 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5303 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6C4C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0928 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2826 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0C4E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5C09 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0045 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8026 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xAE27 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xF817 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0227 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA5C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1226 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xAA5C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0317 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x235F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2808 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F2 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x6017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1626 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xA25F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4D1A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2683 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1616 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FA 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x45A0 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27FB 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171F 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4580 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2017 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA17 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1E5D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x170C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2682 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x484D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4E26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x8A28 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x084C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0B60 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x172D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x27F2 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1716 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2682 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5F4D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1A16 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1627 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0xFA26 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x425C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0145 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4027 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x9817 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1F4A 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1244 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0343 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1604 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5843 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1659 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4316 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4560 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x1705 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x279D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x171D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4540 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2217 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x0527 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x985D 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2645 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x170E 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2800 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5301 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4B52 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x5112 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x4460 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x3086; regValue[i] = 0x2C2C 	       ; i++; // SEQ_DATA_PORT
    regAddr[i] = 0x301A; regValue[i] = 0x10D8 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x30B0; regValue[i] = 0x0000 	       ; i++; // DIGITAL_TEST
    regAddr[i] = 0x3064; regValue[i] = 0x1902 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x302A; regValue[i] = PLL_P2 	       ; i++; // VT_PIX_CLK_DIV
    regAddr[i] = 0x302C; regValue[i] = PLL_P1 	       ; i++; // VT_SYS_CLK_DIV
    regAddr[i] = 0x302E; regValue[i] = PLL_pre_div     ; i++; // PRE_PLL_CLK_DIV
    regAddr[i] = 0x3030; regValue[i] = PLL_M 	       ; i++; // PLL_MULTIPLIER
    regAddr[i] = 0x3036; regValue[i] = 0x000C 	       ; i++; // OP_PIX_CLK_DIV
    regAddr[i] = 0x3038; regValue[i] = 0x0001 	       ; i++; // OP_SYS_CLK_DIV
    regAddr[i] = 0x3002; regValue[i] = 0x00E4 	       ; i++; // Y_ADDR_START
    regAddr[i] = 0x3004; regValue[i] = 0x0042 	       ; i++; // X_ADDR_START
    regAddr[i] = 0x3006; regValue[i] = 0x0523 	       ; i++; // Y_ADDR_END
    regAddr[i] = 0x3008; regValue[i] = 0x07C9 	       ; i++; // X_ADDR_END
    regAddr[i] = 0x300A; regValue[i] = 0x0465 	       ; i++; // FRAME_LENGTH_LINES
    regAddr[i] = 0x300C; regValue[i] = 0x03E8 	       ; i++; // LINE_LENGTH_PCK
    regAddr[i] = 0x3012; regValue[i] = 0x0416 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3014; regValue[i] = 0x0113 	       ; i++; // FINE_INTEGRATION_TIME
    regAddr[i] = 0x30A2; regValue[i] = 0x0001 	       ; i++; // X_ODD_INC
    regAddr[i] = 0x30A6; regValue[i] = 0x0001 	       ; i++; // Y_ODD_INC
    regAddr[i] = 0x308C; regValue[i] = 0x0004 	       ; i++; // Y_ADDR_START_CB
    regAddr[i] = 0x308A; regValue[i] = 0x0006 	       ; i++; // X_ADDR_START_CB
    regAddr[i] = 0x3090; regValue[i] = 0x0603 	       ; i++; // Y_ADDR_END_CB
    regAddr[i] = 0x308E; regValue[i] = 0x0805 	       ; i++; // X_ADDR_END_CB
    regAddr[i] = 0x30AA; regValue[i] = 0x0625 	       ; i++; // FRAME_LENGTH_LINES_CB
    regAddr[i] = 0x303E; regValue[i] = 0x049C 	       ; i++; // LINE_LENGTH_PCK_CB
    regAddr[i] = 0x3016; regValue[i] = 0x001F 	       ; i++; // COARSE_INTEGRATION_TIME_CB
    regAddr[i] = 0x3018; regValue[i] = 0x0050 	       ; i++; // FINE_INTEGRATION_TIME_CB
    regAddr[i] = 0x30AE; regValue[i] = 0x0001 	       ; i++; // X_ODD_INC_CB
    regAddr[i] = 0x30A8; regValue[i] = 0x0001 	       ; i++; // Y_ODD_INC_CB
    regAddr[i] = 0x3040; regValue[i] = 0xc000 	       ; i++; // READ_MODE
    regAddr[i] = 0x31AE; regValue[i] = 0x0301 	       ; i++; // SERIAL_FORMAT
    regAddr[i] = 0x3082; regValue[i] = 0x0009 	       ; i++; // OPERATION_MODE_CTRL
    regAddr[i] = 0x31D0; regValue[i] = 0x0000 	       ; i++; // COMPANDING
    regAddr[i] = 0x318C; regValue[i] = 0x0000 	       ; i++; // HDR_MC_CTRL2
    regAddr[i] = 0x2400; regValue[i] = 0x0003 	       ; i++; // ALTM_CONTROL
    regAddr[i] = 0x31D0; regValue[i] = 0x0001 	       ; i++; // COMPANDING
    regAddr[i] = 0x3058; regValue[i] = 0x003F 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x02A0 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3064; regValue[i] = 0x1902 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x3082; regValue[i] = 0x0009 	       ; i++; // OPERATION_MODE_CTRL
    regAddr[i] = 0x31D0; regValue[i] = 0x0000 	       ; i++; // COMPANDING
    regAddr[i] = 0x318C; regValue[i] = 0x0000 	       ; i++; // HDR_MC_CTRL2
    regAddr[i] = 0x2400; regValue[i] = 0x0003 	       ; i++; // ALTM_CONTROL
    regAddr[i] = 0x31D0; regValue[i] = 0x0001 	       ; i++; // COMPANDING
    regAddr[i] = 0x3058; regValue[i] = 0x003F 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x02A0 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3064; regValue[i] = 0x1902 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x3200; regValue[i] = 0x0003 	       ; i++; // RESERVED_MFR_3200
    regAddr[i] = 0x320A; regValue[i] = 0x0000 	       ; i++; // RESERVED_MFR_320A
    regAddr[i] = 0x3200; regValue[i] = 0x0002 	       ; i++; // RESERVED_MFR_3200
    regAddr[i] = 0x3202; regValue[i] = 0x00A0 	       ; i++; // RESERVED_MFR_3202
    regAddr[i] = 0x3206; regValue[i] = 0x1810 	       ; i++; // RESERVED_MFR_3206
    regAddr[i] = 0x3208; regValue[i] = 0x2820 	       ; i++; // RESERVED_MFR_3208
    regAddr[i] = 0x320A; regValue[i] = 0x0000 	       ; i++; // RESERVED_MFR_320A
    regAddr[i] = 0x3064; regValue[i] = 0x1802 	       ; i++; // SMIA_TEST
    regAddr[i] = 0x301E; regValue[i] = 0x00A8 	       ; i++; // DATA_PEDESTAL
    regAddr[i] = 0x2440; regValue[i] = 0x0002 	       ; i++; // RESERVED_MFR_2440
    regAddr[i] = 0x30FE; regValue[i] = 0x0000 	       ; i++; // RESERVED_MFR_30FE
    regAddr[i] = 0x30F4; regValue[i] = 0x4000 	       ; i++; // RESERVED_MFR_30F4
    regAddr[i] = 0x3180; regValue[i] = 0x8029 	       ; i++; // RESERVED_MFR_3180
    regAddr[i] = 0x3EDA; regValue[i] = 0x8899 	       ; i++; // RESERVED_MFR_3EDA
    regAddr[i] = 0x3EE6; regValue[i] = 0x00F0 	       ; i++; // RESERVED_MFR_3EE6
    regAddr[i] = 0x2444; regValue[i] = 0x8000 	       ; i++; // RESERVED_MFR_2444
    regAddr[i] = 0x2446; regValue[i] = 0x0000 	       ; i++; // RESERVED_MFR_2446
    regAddr[i] = 0x301A; regValue[i] = 0x10DC 	       ; i++; // RESET_REGISTER
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D2 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0F28 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D7 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0A2A 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DC 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0763 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DF 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0602 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E2 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x0555 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0x04FE 	       ; i++; // COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3012; regValue[i] = 0X0440          ; i++; // 0x04CF 	// COARSE_INTEGRATION_TIME
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E9 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E9 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E7 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E4 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E3 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E1 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00E0 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DD 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DB 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00DA 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D8 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D7 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D6 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D5 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D3 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D2 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D2 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D1 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00D0 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CF 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CF 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CE 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CF 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CF 	       ; i++; // BLUE_GAIN
    regAddr[i] = 0x3060; regValue[i] = 0x0020 	       ; i++; // ANALOG_GAIN
    regAddr[i] = 0x305A; regValue[i] = 0x0093 	       ; i++; // RED_GAIN
    regAddr[i] = 0x3056; regValue[i] = 0x0080 	       ; i++; // GREEN1_GAIN
    regAddr[i] = 0x305C; regValue[i] = 0x0080 	       ; i++; // GREEN2_GAIN
    regAddr[i] = 0x3058; regValue[i] = 0x00CF 	       ; i++; // BLUE_GAIN
#endif

    for(j=0; j < i; j++)
    {
        status = DRV_i2c16Write16(&gDRV_imgsObj.i2cHndl, &regAddr[j], &regValue[j], 1);  
        if(status != OSA_SOK)
        {
            printf("I2C write Error,index:%d\n",j);
            return status;
        }
        if(regAddr[j] == 0x301A )	
            OSA_waitMsecs(100);

        OSA_waitMsecs(1);	
    }
    printf("Finished Demo Init with AR0331\n");
    return 0;
}

